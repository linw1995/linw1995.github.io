<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Logging on linw1995</title>
    <link>https://linw1995.com/tags/logging/</link>
    <description>Recent content in Logging on linw1995</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 29 Jan 2019 23:59:59 +0000</lastBuildDate>
    
	<atom:link href="https://linw1995.com/tags/logging/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>两种方式来用 Python logging 记录额外的值</title>
      <link>https://linw1995.com/blog/%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%9D%A5%E7%94%A8-Python-logging-%E8%AE%B0%E5%BD%95%E9%A2%9D%E5%A4%96%E7%9A%84%E5%80%BC/</link>
      <pubDate>Tue, 29 Jan 2019 23:59:59 +0000</pubDate>
      
      <guid>https://linw1995.com/blog/%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%9D%A5%E7%94%A8-Python-logging-%E8%AE%B0%E5%BD%95%E9%A2%9D%E5%A4%96%E7%9A%84%E5%80%BC/</guid>
      <description>前言 有两种方式来用 Python logging 记录额外的值
 使用 extra 参数 向 args 传入字典结构的数据  使用 extra 参数 通过 log 方法的 extra 参数可以来记录而外的值。通过 LogRecord.extra 获取，配合 LogFilter 及 LoggerAdapter 使用。还可以通过配置 Formatter 打印出该值
logging.basicConfig(format=&amp;quot;%(ip)s - %(message)s&amp;quot;) logging.info(&amp;quot;test message&amp;quot;, extra={&amp;quot;ip&amp;quot;: &amp;quot;127.0.0.1&amp;quot;})  其输出
127.0.0.1 - test message  使用 Formatter 十分方便，但一旦没有通过 extra 传入对应的键值，则会导致日志写出异常
logger = logging.getLogger() adapted_logger = logging.LoggerAdapter(logger, extra={&amp;quot;ip&amp;quot;: &amp;quot;127.0.0.1&amp;quot;}) adapted_logger.info(&amp;quot;test message&amp;quot;)  可通过 LoggerAdapter 来给所有 log 方法加上 extra 参数
不过官方的实现很奇怪，直接覆盖掉了原本的 extra 参数。</description>
    </item>
    
  </channel>
</rss>