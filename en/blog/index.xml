<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on linw1995</title>
    <link>https://linw1995.com/en/blog/</link>
    <description>Recent content in Blog on linw1995</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 24 Dec 2020 21:00:00 +0800</lastBuildDate><atom:link href="https://linw1995.com/en/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Decorators Advance</title>
      <link>https://linw1995.com/en/blog/Python-Decorators-Advance/</link>
      <pubDate>Thu, 24 Dec 2020 21:00:00 +0800</pubDate>
      
      <guid>https://linw1995.com/en/blog/Python-Decorators-Advance/</guid>
      <description>Accessing Wrapped Function Parameters In An Easy Way import functools def decorator(func): @functools.wraps(func) def wrap(*args, **kwargs): print(args, kwargs) return func(*args, **kwargs) return wrap @decorator def boo(a, b, c): pass boo(1, b=2, c=3)((1,), {&amp;#39;c&amp;#39;: 3, &amp;#39;b&amp;#39;: 2}) The above codes is a general decorator function we always writen. The wrap inside the decorator uses (*args, **kwargs) as parameters for full compatibility with the wrapped func if we don&amp;rsquo;t know what parameters will be received.</description>
    </item>
    
    <item>
      <title>Share My Emacs Configuration</title>
      <link>https://linw1995.com/en/blog/Share-My-Emacs-Configuration/</link>
      <pubDate>Mon, 13 Jul 2020 23:34:59 +0800</pubDate>
      
      <guid>https://linw1995.com/en/blog/Share-My-Emacs-Configuration/</guid>
      <description>My Emacs Configuration Repository: linw1995/.emacs.d.
Inspired by the article &amp;ldquo;Switching to a Literate Emacs Configuration&amp;rdquo;, file &amp;quot;configuration.org&amp;quot; contains all my Emacs configuration.</description>
    </item>
    
    <item>
      <title>Write Racket With Emacs</title>
      <link>https://linw1995.com/en/blog/Write-Racket-With-Emacs/</link>
      <pubDate>Mon, 13 Jul 2020 01:30:00 +0800</pubDate>
      
      <guid>https://linw1995.com/en/blog/Write-Racket-With-Emacs/</guid>
      <description>At the opening of my previous blog Using Emacs Editor For The First Time says I want to use Emacs to program in Racket language. Now it&amp;rsquo;s the time to share my Emacs configuration and some humble opinions.
racket-mode In Emacs, almost every programming language has its own major mode. And the Racket language has no exception. racket-mode is the only and powerful Emacs major mode package.
(use-package racket-mode :straight t :hook (racket-mode .</description>
    </item>
    
    <item>
      <title>Using Emacs Editor For The First Time</title>
      <link>https://linw1995.com/en/blog/Using-Emacs-Editor-For-The-First-Time/</link>
      <pubDate>Mon, 15 Jun 2020 01:15:59 +0800</pubDate>
      
      <guid>https://linw1995.com/en/blog/Using-Emacs-Editor-For-The-First-Time/</guid>
      <description>Recently I had been learning how to programs in Racket language. editors like VSCode and vim support poorly for the Racket language. And in the document of Racket, it recommends Emacs for developing Racket project. So I decided to give it a try. The main purpose of this blog is to record some solutions to problems that happened while I using it.
Installation Follow the installation section of Emacs document, I installed latest Emacs 26.</description>
    </item>
    
    <item>
      <title>How To Write Asynchronous Code With Contextvars Properly</title>
      <link>https://linw1995.com/en/blog/How-To-Write-Asynchronous-Code-With-Contextvars-Properly/</link>
      <pubDate>Sat, 16 May 2020 16:15:59 +0800</pubDate>
      
      <guid>https://linw1995.com/en/blog/How-To-Write-Asynchronous-Code-With-Contextvars-Properly/</guid>
      <description>Recently I contributed a project which using async/await syntax to write asynchronous code. After coding, testing, and fixing repeatedly, I summary out how to use write asynchronous code with contextvars properly.
What Is contextvars Package contextvars comes from PEP-567 and provides APIs that allow developers to store, access and manage the local context. It&amp;rsquo;s similar to thread-local storage (TLS), but, unlike TLS, it also allows correctly keeping track of values per asynchronous task.</description>
    </item>
    
    <item>
      <title>Run Asyncio Event Loop in another thread</title>
      <link>https://linw1995.com/en/blog/Run-Asyncio-Event-Loop-in-another-thread/</link>
      <pubDate>Sat, 14 Mar 2020 00:15:59 +0800</pubDate>
      
      <guid>https://linw1995.com/en/blog/Run-Asyncio-Event-Loop-in-another-thread/</guid>
      <description>When using a web framework not supports to write concurrent code using the async/await syntax, want to use concurrent to speed the connection up with another service, like connecting Redis, making a lot of requests, etc. So it&amp;rsquo;s why we need to run the asyncio event loop in another thread.
Create a thread that runs asyncio event loop forever Attention, This example is not fully tested.
import asyncio import threading class AsyncioEventLoopThread(threading.</description>
    </item>
    
    <item>
      <title>How To Override Geolocation on Headless Chrome</title>
      <link>https://linw1995.com/en/blog/How-To-Override-Geolocation-on-Headless-Chrome/</link>
      <pubDate>Fri, 28 Feb 2020 23:59:59 +0800</pubDate>
      
      <guid>https://linw1995.com/en/blog/How-To-Override-Geolocation-on-Headless-Chrome/</guid>
      <description>I googled it and got many methods. I try one by one, almost all of them turn out outdated. Then I find out a solution, use Chrome Devtools Protocol to achieve that.
The small example code below, that it uses the most common tool selenium to execute chrome devtools protocol command.
import time from selenium.webdriver import Chrome, ChromeOptions options = ChromeOptions() options.add_argument(&amp;#34;--headless&amp;#34;) driver = Chrome(options=options) driver.execute_cdp_cmd( &amp;#34;Browser.grantPermissions&amp;#34;, { &amp;#34;origin&amp;#34;: &amp;#34;https://www.</description>
    </item>
    
    <item>
      <title>Run Twisted in another thread</title>
      <link>https://linw1995.com/en/blog/Run-Twisted-in-another-thread/</link>
      <pubDate>Thu, 27 Dec 2018 23:59:59 +0000</pubDate>
      
      <guid>https://linw1995.com/en/blog/Run-Twisted-in-another-thread/</guid>
      <description>Develop a project related to a service project base on Twisted, and consider how to test it. This is a solution. Run Twisted&amp;rsquo;s reactor in another thread and delegating the Twisted functions calling into it.
Use this fixture run a reactor in another thread. Due to the reactor is not restartable, so the fixture&amp;rsquo;s scope is &amp;ldquo;session&amp;rdquo;.
import pytest from twisted.internet import reactor as twisted_reactor @pytest.fixture(scope=&amp;#34;session&amp;#34;, autouse=True) def reactor(): t = threading.</description>
    </item>
    
  </channel>
</rss>
