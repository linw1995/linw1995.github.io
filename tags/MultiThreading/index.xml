<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MultiThreading on linw1995</title>
    <link>https://linw1995.com/tags/MultiThreading/</link>
    <description>Recent content in MultiThreading on linw1995</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Mar 2020 22:45:59 +0800</lastBuildDate>
    
	<atom:link href="https://linw1995.com/tags/MultiThreading/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何用 C 实现一个 Python Awaitable 函数</title>
      <link>https://linw1995.com/blog/%E5%A6%82%E4%BD%95%E7%94%A8-C-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-Python-Awaitable-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 23 Mar 2020 22:45:59 +0800</pubDate>
      
      <guid>https://linw1995.com/blog/%E5%A6%82%E4%BD%95%E7%94%A8-C-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-Python-Awaitable-%E5%87%BD%E6%95%B0/</guid>
      <description>这是一个取巧的方式，用 C 实现一个普通的 Python 函数，但返回一个 asyncio.Future 对象。 用副线程去执行，等到执行有结果后，再调用 asyncio.Future.set_result 方法去设置函数的结果。 先看一下直接用 Python 的话，是怎么实现这个的。
import asyncio import os import threading def call_system(cmd: str, fut: asyncio.Future): exit_code = os.system(cmd) loop = fut.get_loop() loop.call_soon_threadsafe(fut.set_result, exit_code) def system(cmd): fut = asyncio.Future() threading.Thread(target=call_system, args=(cmd, fut)).start() return fut 可以注意到副线程并没有直接执行 Future.set_result 。 因为从副线程回调的话，必须调用 loop.call_soon_threadsafe 去让 loop 去调度回调。 避免了执行 await spam.system(&#39;ls&#39;) 卡住。
现在需要做的事，就是把以上的代码翻译成 C 代码
#define PY_SSIZE_T_CLEAN #include &amp;lt;Python.h&amp;gt;#include &amp;lt;pthread.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; struct call_system_ctx { char *command; PyObject *fut; }; static void *call_system(void *args) { printf(&amp;#34;=== pthread launch\n&amp;#34;); struct call_system_ctx *ctx = (struct call_system_ctx *)args; printf(&amp;#34;=== call system(%s)\n&amp;#34;, ctx-&amp;gt;command); int exit_code = system(ctx-&amp;gt;command); printf(&amp;#34;=== call system(%s) done\n&amp;#34;, ctx-&amp;gt;command); printf(&amp;#34;=== acquire GIL\n&amp;#34;); PyGILState_STATE gstate = PyGILState_Ensure(); PyObject *loop = PyObject_CallMethod(ctx-&amp;gt;fut, &amp;#34;get_loop&amp;#34;, NULL); PyObject *set_result = PyObject_GetAttrString(ctx-&amp;gt;fut, &amp;#34;set_result&amp;#34;); printf(&amp;#34;=== schedule callback\n&amp;#34;); PyObject *handler = PyObject_CallMethod(loop, &amp;#34;call_soon_threadsafe&amp;#34;, &amp;#34;(O,i)&amp;#34;, set_result, exit_code); Py_DECREF(handler); Py_DECREF(set_result); Py_DECREF(loop); Py_DECREF(ctx-&amp;gt;fut); printf(&amp;#34;=== release GIL\n&amp;#34;); PyGILState_Release(gstate); printf(&amp;#34;=== pthread exit\n&amp;#34;); free(ctx); pthread_exit(NULL); return 0; } static PyObject *spam_system(PyObject *self, PyObject *args) { char *command; if (!</description>
    </item>
    
    <item>
      <title>如何在线程里跑协程</title>
      <link>https://linw1995.com/blog/%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BA%BF%E7%A8%8B%E9%87%8C%E8%B7%91%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sun, 15 Mar 2020 11:49:59 +0800</pubDate>
      
      <guid>https://linw1995.com/blog/%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BA%BF%E7%A8%8B%E9%87%8C%E8%B7%91%E5%8D%8F%E7%A8%8B/</guid>
      <description>当使用不支持 async/await 协程的 web 框架时，想去使用协程来加快与其他服务的链接， 比如链接 Redis，发起大量网络请求等。所以我们需要在线程里跑 asyncio event loop。
创建用来跑 asyncio event loop 线程 import asyncio import threading class AsyncioEventLoopThread(threading.Thread): def __init__(self, *args, loop=None, **kwargs): super().__init__(*args, **kwargs) self.loop = loop or asyncio.new_event_loop() self.running = False def run(self): self.running = True self.loop.run_forever() def run_coro(self, coro): return asyncio.run_coroutine_threadsafe(coro, loop=self.loop).result() def stop(self): self.loop.call_soon_threadsafe(self.loop.stop) self.join() self.running = False 因为 asyncio.run_coroutine_threadsafe 的返回值为 concurrent.futures.Future，可以直接执行其 result 方法，函数会等待直到协程执行完毕并返回结果。
下面的例子展示了如何使用 AsyncioEventLoopThread
async def hello_world(): print(&amp;#34;hello world&amp;#34;) async def make_request(): await asyncio.</description>
    </item>
    
    <item>
      <title>用多线程加速爬虫的 lxml 解析</title>
      <link>https://linw1995.com/blog/%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%A0%E9%80%9F%E7%88%AC%E8%99%AB%E7%9A%84-lxml-%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 17 Jul 2019 23:59:59 +0000</pubDate>
      
      <guid>https://linw1995.com/blog/%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8A%A0%E9%80%9F%E7%88%AC%E8%99%AB%E7%9A%84-lxml-%E8%A7%A3%E6%9E%90/</guid>
      <description>当编写一个爬虫时，会使用 lxml 库来解析 HTML 文件。当爬取到了一个超大且复杂的 HTML 文件，解析起来十分耗费时间，进而影响了爬虫的正常运行
为了不影响爬虫的正常运行，尝试把解析任务交给线程池来处理
模拟爬虫 先随便准备一个 html 文件，就直接从 lxml 的文档上下载一个
wget https://lxml.de/tutorial.html -O example.html 举一个重解析的模拟爬虫例子，每次请求的 io 时间假定为 0.01s ，请求并发数无上限，总量为 2000 个。
import asyncio import time from pathlib import Path from lxml import html _html_text = None _latest_fetched = 0 async def fetch_text(): # 模拟爬取 await asyncio.sleep(0.01) # 记录最后的一个请求的结束时间 global _latest_fetched _latest_fetched = time.perf_counter() return _html_text def get_title(text): doc = html.fromstring(text) return doc.xpath(&amp;#34;//title/text()&amp;#34;)[0] async def create_task(): text = await fetch_text() title = get_title(text) return title async def main(): futs = [] for _ in range(2000): fut = asyncio.</description>
    </item>
    
    <item>
      <title>初解Python并发</title>
      <link>https://linw1995.com/blog/%E5%88%9D%E8%A7%A3Python%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sun, 16 Jul 2017 21:28:07 +0000</pubDate>
      
      <guid>https://linw1995.com/blog/%E5%88%9D%E8%A7%A3Python%E5%B9%B6%E5%8F%91/</guid>
      <description>前言 昨天（2017年7月15日）偶然看到这个视频，看完之后豁然开朗，忍不住要分享给大家。
  并发Demo 视频中举了个例子，用socket写了个迷你服务，只有一个作用，计算Fibonacci……
# -*- coding: utf-8 -*- # server.py import socket def fib(n): if n &amp;lt;= 2: return 1 else: return fib(n - 1) + fib(n - 2) def server(addr, port): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) sock.bind((addr, port)) sock.listen(5) while True: client, addr = sock.accept() print(&amp;#39;Connection&amp;#39;, addr) handler(client) def handler(client): while True: req = client.recv(100) if not req: break n = int(req) result = fib(n) resp = str(result).</description>
    </item>
    
  </channel>
</rss>