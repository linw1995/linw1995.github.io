<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh"><title>
    linw1995&#x27;s blog - golang</title>
    <link rel="self" type="application/atom+xml" href="/tags/golang/atom.xml"/>
    <link rel="alternate" type="text/html" href="/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <icon>/favicon.ico</icon>
    <logo>/favicon.png</logo>
    <updated>2025-06-25T00:00:00+00:00</updated>
    <id>/tags/golang/atom.xml</id>
    <follow_challenge><feedId>72476326505512960</feedId><userId>57795710219398144</userId></follow_challenge>
    <entry xml:lang="zh"><title>Neovim 项目级 LSP 配置</title><published>2025-06-25T00:00:00+00:00</published><updated>2025-06-25T00:00:00+00:00</updated>
        
        <author><name>
            
              linw1995
            
          </name></author>
        
        <link rel="alternate" type="text/html" href="/nvim-lsp-project-config/"/>
        <id>/nvim-lsp-project-config/</id>
        
        <summary type="html">&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;最近在编写 Golang 代码时，为了在构建时隔离某些代码中的常量，
需要使用 Golang 内置的 build tags 功能。
因此，需要为 gopls 配置特定的启动参数，以便正确解析代码。
然而，gopls 的配置需要在项目级别完成，全局配置可能会影响其他项目。&lt;&#x2F;p&gt;
&lt;p&gt;那么，该如何进行配置呢？&lt;&#x2F;p&gt;&lt;br&gt; &lt;a href=&quot;/nvim-lsp-project-config/&quot; target=&quot;_blank&quot;&gt;Read more&lt;/a&gt;</summary>
        
        <content type="html" xml:base="/nvim-lsp-project-config/">&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;&#x2F;h2&gt;
&lt;p&gt;最近在编写 Golang 代码时，为了在构建时隔离某些代码中的常量，
需要使用 Golang 内置的 build tags 功能。
因此，需要为 gopls 配置特定的启动参数，以便正确解析代码。
然而，gopls 的配置需要在项目级别完成，全局配置可能会影响其他项目。&lt;&#x2F;p&gt;
&lt;p&gt;那么，该如何进行配置呢？&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;pei-zhi-fang-shi&quot;&gt;配置方式&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;shi-yong-neovim-nei-zhi-de-exrc-gong-neng&quot;&gt;使用 Neovim 内置的 exrc 功能&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;exrc&lt;&#x2F;code&gt; 功能允许 Neovim 读取当前目录下的 &lt;code&gt;.exrc&lt;&#x2F;code&gt; 文件以加载本地配置
（本质上是通过执行代码来实现配置的目的）。
然而，这种方式需要对 Neovim 有深入的了解，并且可能与其他插件发生冲突。
因此，不太推荐使用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-lazy-nvim&quot;&gt;使用 lazy.nvim&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;lazy.nvim&lt;&#x2F;strong&gt; 是一款强大的 Neovim 插件管理器，能够简化插件的管理和配置。
它支持通过 &lt;code&gt;.lazy.lua&lt;&#x2F;code&gt; 文件为特定项目配置插件。
尽管 &lt;strong&gt;lazy.nvim&lt;&#x2F;strong&gt; 的官方文档几乎没有涉及（实际上是完全没有）这一功能，
但熟悉 &lt;strong&gt;lazy.nvim&lt;&#x2F;strong&gt; 的用户通常能轻松上手。&lt;&#x2F;p&gt;
&lt;p&gt;配置格式参考文档: &lt;a href=&quot;https:&#x2F;&#x2F;lazy.folke.io&#x2F;spec&quot;&gt;https:&#x2F;&#x2F;lazy.folke.io&#x2F;spec&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lua&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-lua &quot;&gt;&lt;code class=&quot;language-lua&quot; data-lang=&quot;lua&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nvim&#x2F;nvim-lspconfig&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;opts &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;servers &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gopls &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;settings &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gopls &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;buildFlags &lt;&#x2F;span&gt;&lt;span&gt;= { &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-tags=encrypt decrypt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; },
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                },
&lt;&#x2F;span&gt;&lt;span&gt;            },
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
    </entry>
</feed>
