<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Develop on linw1995</title>
    <link>https://linw1995.com/tags/Develop/</link>
    <description>Recent content in Develop on linw1995</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 13 Mar 2020 00:02:00 +0800</lastBuildDate>
    
	<atom:link href="https://linw1995.com/tags/Develop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>我的 Shell 配置</title>
      <link>https://linw1995.com/blog/%E6%88%91%E7%9A%84-Shell-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 13 Mar 2020 00:02:00 +0800</pubDate>
      
      <guid>https://linw1995.com/blog/%E6%88%91%E7%9A%84-Shell-%E9%85%8D%E7%BD%AE/</guid>
      <description>统一各个开发环境，有助于平滑地切换，避免每次切换导致的生疏感，降低码力。当然公司的环境就别瞎搞了。

 这个 GIF 示例来自 starship 的 README。 其 Shell 为 fish Shell ，所以自带了自动补全、历史命令展示和命令高亮等功能。 fish 也是一个很好用的 Shell，感兴趣的可以自行体验一下。
 以下是需要安装的工具列表
 zsh ohmyzsh starship antibody  本文只以 MacOS 为例，而其他 OS 的安装方式，请仔细阅读以上工具的文档。
 安装 zsh
brew install zsh chsh -s /bin/zsh 执行以上命令安装 zsh，再重启终端即可发现 Shell 变成了 zsh。
 安装 ohmyzsh
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; 执行以上命令安装 ohmyzsh
 安装 starship
brew install starship 执行以上命令安装 starship，然后把 eval &amp;quot;$(starship init zsh)&amp;quot; 写入到 ~/.zshrc 文件末尾。 再执行 $SHELL 就可以看到 Shell 变漂亮了～</description>
    </item>
    
    <item>
      <title>Python 版本及依赖管理的最终方案 pyenv &#43; Pipenv</title>
      <link>https://linw1995.com/blog/Python-%E7%89%88%E6%9C%AC%E5%8F%8A%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E7%9A%84%E6%9C%80%E7%BB%88%E6%96%B9%E6%A1%88-pyenv-Pipenv/</link>
      <pubDate>Sat, 22 Dec 2018 22:45:00 +0000</pubDate>
      
      <guid>https://linw1995.com/blog/Python-%E7%89%88%E6%9C%AC%E5%8F%8A%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E7%9A%84%E6%9C%80%E7%BB%88%E6%96%B9%E6%A1%88-pyenv-Pipenv/</guid>
      <description>前言 作为个程序员，总会遇到这些问题：如何升级系统的 Python 版本；如何安装多个 Python 版本；如何隔离项目的依赖；在开发机上好好的，为什么线上、CI 就运行失败了呢
 通过下载 Python 源码编译安装（最好不要覆盖掉系统原有的 Python，可安装在自己的 home 目录或者其他路径下） 通过 Virtualenv 来隔离项目 Python 环境 通过 pip freeze &amp;gt; requirements.txt 和 pip install -r requirements.txt来固定依赖的版本，来确保重新安装后的 Python 环境是一致  随着开发项目的增多，mac 上的 Python 环境越来越复杂，就像下面这张图一样。面对这样的复杂的环境，管理起来太折磨人了，且会因冗余而浪费硬盘空间。

那么我们如何来管理越来越复杂的 Python 环境？解决该问题的最终方案是：使用 pyenv 管理多个 python 版本；使用 Pipenv 管理项目所需要的依赖。
pyenv Github Repo: pyenv/pyenv
参照此教程安装 pyenv
 installation | pyenv
 使用
pyenv install --list # 列出所有可安装的版本 pyenv install 3.7.1 # 安装指定版本 pyenv shell 3.</description>
    </item>
    
  </channel>
</rss>