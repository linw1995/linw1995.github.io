<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linw1995</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linw1995.com/"/>
  <updated>2017-09-24T14:24:38.290Z</updated>
  <id>http://linw1995.com/</id>
  
  <author>
    <name>linw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自己来写压缩算法——哈夫曼算法</title>
    <link href="http://linw1995.com/2017/09/24/%E8%87%AA%E5%B7%B1%E6%9D%A5%E5%86%99%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%E2%80%94%E2%80%94%E5%93%88%E5%A4%AB%E6%9B%BC%E7%AE%97%E6%B3%95/"/>
    <id>http://linw1995.com/2017/09/24/自己来写压缩算法——哈夫曼算法/</id>
    <published>2017-09-24T14:24:08.000Z</published>
    <updated>2017-09-24T14:24:38.290Z</updated>
    
    <content type="html"><![CDATA[<p>一般文件的编码都是等长的，一些常用字符的编码与很少用到的等长，可若是编码是变长的呢？无疑可以使整个文件大小减小。为了解码时不遇到任何歧义的问题，则<strong>每个有效字符所代表的变长编码不能是其它字符的前缀</strong>，这种编码也叫做<strong>前缀编码</strong>。而如何做到这一点呢，接下的内容会尽可能地讲明白。</p>
<h2 id="哈夫曼算法">
  <a href="#哈夫曼算法" class="headerlink" title="哈夫曼算法"></a>哈夫曼算法</h2>
<p>若是把等长的编码(一字节)用平衡二叉树来表示，字符共有256个，那么树的深度就有 $\log_{2}{256}=8$ 。</p>
<p>如果变作变长编码，那么所有有儿子（child）的节点（node）都不能用来表示，唯有子叶（leaf，没有儿子的节点）才可以用来表示。这是因为<strong>每个有效字符所代表的变长编码不能是其它字符的前缀</strong>。而且树结构也不可能是平衡二叉树了，树的深度肯定会大于8。</p>
<p>例如，有一份<a href="/2017/09/24/自己来写压缩算法——哈夫曼算法/MIT.txt" title="MIT-LICENCE">MIT-LICENCE</a>文件，其中空格<code>&#39;</code>&nbsp;<code>&#39;</code>有163个，而字母<code>&#39;</code>v<code>&#39;</code>却只有一个。那么让<code>&#39;</code>&nbsp;<code>&#39;</code>表示为<code>110</code>,<code>&#39;</code>v<code>&#39;</code>表示为<code>0111011101</code>，那么得省$(8
  - 3) \times 163 - (8 - 10) \times 1 = 817$个bit。可见变长编码确确实实能起到压缩的作用。</p>
<h3 id="哈夫曼树">
  <a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h3>
<p><strong>哈夫曼树Huffman Tree</strong>，也叫做<strong>最优二叉树</strong>，是一种带权路径长度最短的二叉树。所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（若根结点为$0$层，叶结点到根结点的路径长度为叶结点的层数）。树的路径长度是从树根到每一结点的路径长度之和，记为$\operatorname{WPL}=(W_1 \times L_<br>1+W_2 \times L_2+W_3 \times L_3+…+W_n \times
  L_n)$，$N$个权值$W_i(i=1,2,…n)$构成一棵有$N$个叶结点的二叉树，相应的叶结点的路径长度为$L_i(i=1,2,…n)$。可以证明霍夫曼树的$\operatorname{WPL}$是最小的。</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">      /-40                /-40                /-40</div><div class="line">   /-|                 /-|                 /-|</div><div class="line">  |   \-48            |   \-48            |  |   /-48</div><div class="line">--|                   |                   |   \-|</div><div class="line">  |   /-60          --|      /-60       --|      \-18</div><div class="line">   \-|                |   /-|             |</div><div class="line">     |   /-30         |  |   \-20         |      /-60</div><div class="line">      \-|              \-|                |   /-|</div><div class="line">        |   /-18         |   /-30          \-|   \-20</div><div class="line">         \-|              \-|                |</div><div class="line">            \-20             \-18             \-30</div><div class="line"></div><div class="line">      (0)                (1)                  (2)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>计算上面三颗树的$\operatorname{WPL}$：<br>(0): $ 18 \times 3 + 20 \times 3 + 30 \times 2 + 60 \times 1 + 48 \times 1 + 40 \times 1 = 286$<br>(1): $ 18 \times 2 + 30 \times 2 + 20 \times 2 + 60 \times 2 + 48 \times 1 + 40 \times 1 = 344$<br>(2): $ 20 \times 2 +
  60 \times 2 + 18 \times 2 + 48 \times 2 + 30 \times 1 + 40 \times 1 = 362$</p>
<p>可以看出同样的子叶，构造出来的树(0)的$\operatorname{WPL}$最小。<br>其实它就是哈夫曼树，可以验证同样的子叶,构造出来树的$\operatorname{WPL}$没有比这更小的了(可以同$\operatorname{WPL}$不同构)。</p>
<p><strong>结论</strong>: 权值越大的子叶离根节点越近，即路径长度越短；反之，权值越小的子叶离根节点越远，即路径长度越长。</p>
<p>构造哈夫曼树的算法步骤下：</p>
<ol>
  <li>将所有的要添加到哈夫曼树的子叶按从小达到排列</li>
  <li>找出两个权值最小的节点，拼接成一树结构，父节点的权值为二者之和</li>
  <li>父节点为新的节点，加入排列中，重复步骤2</li>
</ol>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">1          /-1                                             /-3</div><div class="line">        3 |                                             /-|</div><div class="line">2          \-2          /-3             /-3            |  |   /-1</div><div class="line">                     6 |   /-1       6 |   /-1         |   \-|</div><div class="line">3       3               \-|             \-|          --|      \-2</div><div class="line">                           \-2             \-2         |</div><div class="line">4       4            4                  /-4            |   /-4</div><div class="line">                                     9 |                \-|</div><div class="line">5       5            5                  \-5                \-5</div><div class="line"></div><div class="line">(0)      (1)           (2)             (3)               (4)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="哈夫曼编码">
  <a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h3>
<p>从根结点开始，左子树为<code>&#39;0&#39;</code>,右子树为<code>&#39;1&#39;</code>，累积到子叶得到的编码就是哈夫曼编码。</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">| leaf | code |</div><div class="line">|------|------|</div><div class="line">| 1    | 010  |</div><div class="line">| 2    | 011  |</div><div class="line">| 3    | 00   |</div><div class="line">| 4    | 10   |</div><div class="line">| 5    | 11   |</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="哈夫曼编码MIT-LICENCE文件结果">
  <a href="#哈夫曼编码MIT-LICENCE文件结果" class="headerlink" title="哈夫曼编码MIT-LICENCE文件结果"></a>哈夫曼编码MIT-LICENCE文件结果</h3>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">| byte | count | code       |     | byte | count | code       |     | byte | count | code       |</div><div class="line">|------|-------|------------|     |------|-------|------------|     |------|-------|------------|</div><div class="line">| &apos;/&apos;  | 1     | 0111011010 |     | &apos;j&apos;  | 1     | 0111011011 |     | &apos;:&apos;  | 1     | 0111011100 |</div><div class="line">| &apos;v&apos;  | 1     | 0111011101 |     | &apos;K&apos;  | 1     | 0111011110 |     | &apos;X&apos;  | 1     | 0111011111 |</div><div class="line">| &apos;(&apos;  | 2     | 011101000  |     | &apos;)&apos;  | 2     | 011101001  |     | &apos;&lt;&apos;  | 2     | 011101010  |</div><div class="line">| &apos;&gt;&apos;  | 2     | 011101011  |     | &apos;V&apos;  | 2     | 011101100  |     | &apos;.&apos;  | 3     | 01101100   |</div><div class="line">| &apos;&quot;&apos;  | 4     | 01101101   |     | &apos;B&apos;  | 5     | 11110100   |     | &apos;Y&apos;  | 6     | 11110101   |</div><div class="line">| &apos;G&apos;  | 6     | 0011110    |     | &apos;\r&apos; | 7     | 0011111    |     | &apos;\n&apos; | 7     | 0100110    |</div><div class="line">| &apos;M&apos;  | 7     | 0100111    |     | &apos;P&apos;  | 8     | 0110111    |     | &apos;m&apos;  | 8     | 0111000    |</div><div class="line">| &apos;U&apos;  | 8     | 0111001    |     | &apos;y&apos;  | 9     | 1011000    |     | &apos;b&apos;  | 9     | 1011001    |</div><div class="line">| &apos;W&apos;  | 9     | 1011010    |     | &apos;g&apos;  | 10    | 1011011    |     | &apos;w&apos;  | 10    | 1110000    |</div><div class="line">| &apos;D&apos;  | 10    | 1110001    |     | &apos;C&apos;  | 12    | 1111011    |     | &apos;u&apos;  | 12    | 000100     |</div><div class="line">| &apos;F&apos;  | 12    | 000101     |     | &apos;p&apos;  | 13    | 001110     |     | &apos;L&apos;  | 14    | 010010     |</div><div class="line">| &apos;f&apos;  | 15    | 011010     |     | &apos;c&apos;  | 17    | 100010     |     | &apos;l&apos;  | 17    | 100011     |</div><div class="line">| &apos;d&apos;  | 17    | 101000     |     | &apos;H&apos;  | 18    | 101001     |     | &apos;,&apos;  | 22    | 111001     |</div><div class="line">| &apos;h&apos;  | 23    | 111100     |     | &apos;S&apos;  | 25    | 00011      |     | &apos;a&apos;  | 26    | 00110      |</div><div class="line">| &apos;A&apos;  | 28    | 01000      |     | &apos;r&apos;  | 29    | 01010      |     | &apos;n&apos;  | 30    | 01011      |</div><div class="line">| &apos;N&apos;  | 30    | 01100      |     | &apos;s&apos;  | 34    | 01111      |     | &apos;R&apos;  | 34    | 10000      |</div><div class="line">| &apos;E&apos;  | 35    | 10010      |     | &apos;I&apos;  | 35    | 10011      |     | &apos;O&apos;  | 36    | 10101      |</div><div class="line">| &apos;T&apos;  | 39    | 10111      |     | &apos;i&apos;  | 45    | 11101      |     | &apos;e&apos;  | 48    | 11111      |</div><div class="line">| &apos;t&apos;  | 49    | 0000       |     | &apos;o&apos;  | 52    | 0010       |     | &apos; &apos;  | 163   | 110        |</div></pre>
      </td>
    </tr>
  </table>
</figure>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">                     /----&apos;t&apos; 49 0000</div><div class="line">                    |</div><div class="line">               /----0            /----&apos;u&apos; 12 000100</div><div class="line">              |     |      /----0</div><div class="line">              |      \----1      \----&apos;F&apos; 12 000101</div><div class="line">         /----0           |</div><div class="line">        |     |            \----&apos;S&apos; 25 00011</div><div class="line">        |     |</div><div class="line">        |     |      /----&apos;o&apos; 52 0010</div><div class="line">        |      \----1</div><div class="line">        |           |      /----&apos;a&apos; 26 00110</div><div class="line">        |            \----1</div><div class="line">        |                 |      /----&apos;p&apos; 13 001110</div><div class="line">        |                  \----1</div><div class="line">        |                       |      /----&apos;G&apos; 6 0011110</div><div class="line">        |                        \----1</div><div class="line">        |                              \----&apos;\r&apos; 7 0011111</div><div class="line">        |</div><div class="line">        |                  /----&apos;A&apos; 28 01000</div><div class="line">   /----0            /----0</div><div class="line">  |     |           |     |      /----&apos;L&apos; 14 010010</div><div class="line">  |     |           |      \----1</div><div class="line">  |     |           |           |      /----&apos;\n&apos; 7 0100110</div><div class="line">  |     |      /----0            \----1</div><div class="line">  |     |     |     |                  \----&apos;M&apos; 7 0100111</div><div class="line">  |     |     |     |</div><div class="line">  |     |     |     |      /----&apos;r&apos; 29 01010</div><div class="line">  |     |     |      \----1</div><div class="line">  |     |     |            \----&apos;n&apos; 30 01011</div><div class="line">  |     |     |</div><div class="line">  |     |     |            /----&apos;N&apos; 30 01100</div><div class="line">  |     |     |           |</div><div class="line">  |     |     |      /----0      /----&apos;f&apos; 15 011010</div><div class="line">  |      \----1     |     |     |</div><div class="line">  |           |     |      \----1            /----&apos;.&apos; 3 01101100</div><div class="line">  |           |     |           |      /----0</div><div class="line">  |           |     |            \----1      \----&apos;&quot;&apos; 4 01101101</div><div class="line">  |           |     |                 |</div><div class="line">  |           |     |                  \----&apos;P&apos; 8 0110111</div><div class="line">  |           |     |</div><div class="line">  |           |     |                  /----&apos;m&apos; 8 0111000</div><div class="line">  |           |     |            /----0</div><div class="line">  |           |     |           |      \----&apos;U&apos; 8 0111001</div><div class="line">  |           |     |           |</div><div class="line">  |            \----1           |                  /----&apos;(&apos; 2 011101000</div><div class="line">  |                 |           |            /----0</div><div class="line">  |                 |      /----0           |      \----&apos;)&apos; 2 011101001</div><div class="line">  |                 |     |     |      /----0</div><div class="line">  |                 |     |     |     |     |      /----&apos;&lt;&apos; 2 011101010</div><div class="line">  |                 |     |     |     |      \----1</div><div class="line">  |                 |     |     |     |            \----&apos;&gt;&apos; 2 011101011</div><div class="line">  |                 |     |     |     |</div><div class="line">  |                 |     |      \----1            /----&apos;V&apos; 2 011101100</div><div class="line">--|                 |     |           |      /----0</div><div class="line">  |                 |     |           |     |     |      /----&apos;/&apos; 1 0111011010</div><div class="line">  |                 |     |           |     |      \----1</div><div class="line">  |                  \----1           |     |            \----&apos;j&apos; 1 0111011011</div><div class="line">  |                       |            \----1</div><div class="line">  |                       |                 |            /----&apos;:&apos; 1 0111011100</div><div class="line">  |                       |                 |      /----0</div><div class="line">  |                       |                 |     |      \----&apos;v&apos; 1 0111011101</div><div class="line">  |                       |                  \----1</div><div class="line">  |                       |                       |      /----&apos;K&apos; 1 0111011110</div><div class="line">  |                       |                        \----1</div><div class="line">  |                       |                              \----&apos;X&apos; 1 0111011111</div><div class="line">  |                       |</div><div class="line">  |                        \----&apos;s&apos; 34 01111</div><div class="line">  |</div><div class="line">  |                        /----&apos;R&apos; 34 10000</div><div class="line">  |                  /----0</div><div class="line">  |                 |     |      /----&apos;c&apos; 17 100010</div><div class="line">  |                 |      \----1</div><div class="line">  |            /----0            \----&apos;l&apos; 17 100011</div><div class="line">  |           |     |</div><div class="line">  |           |     |      /----&apos;E&apos; 35 10010</div><div class="line">  |           |      \----1</div><div class="line">  |           |            \----&apos;I&apos; 35 10011</div><div class="line">  |           |</div><div class="line">  |      /----0                  /----&apos;d&apos; 17 101000</div><div class="line">  |     |     |            /----0</div><div class="line">  |     |     |      /----0      \----&apos;H&apos; 18 101001</div><div class="line">  |     |     |     |     |</div><div class="line">  |     |     |     |      \----&apos;O&apos; 36 10101</div><div class="line">  |     |     |     |</div><div class="line">  |     |      \----1                  /----&apos;y&apos; 9 1011000</div><div class="line">  |     |           |            /----0</div><div class="line">  |     |           |           |      \----&apos;b&apos; 9 1011001</div><div class="line">  |     |           |      /----0</div><div class="line">   \----1           |     |     |      /----&apos;W&apos; 9 1011010</div><div class="line">        |            \----1      \----1</div><div class="line">        |                 |            \----&apos;g&apos; 10 1011011</div><div class="line">        |                 |</div><div class="line">        |                  \----&apos;T&apos; 39 10111</div><div class="line">        |</div><div class="line">        |      /----&apos; &apos; 163 110</div><div class="line">        |     |</div><div class="line">        |     |                        /----&apos;w&apos; 10 1110000</div><div class="line">        |     |                  /----0</div><div class="line">        |     |            /----0      \----&apos;D&apos; 10 1110001</div><div class="line">         \----1           |     |</div><div class="line">              |      /----0      \----&apos;,&apos; 22 111001</div><div class="line">              |     |     |</div><div class="line">              |     |      \----&apos;i&apos; 45 11101</div><div class="line">              |     |</div><div class="line">               \----1            /----&apos;h&apos; 23 111100</div><div class="line">                    |           |</div><div class="line">                    |      /----0            /----&apos;B&apos; 5 11110100</div><div class="line">                    |     |     |      /----0</div><div class="line">                    |     |      \----1      \----&apos;Y&apos; 6 11110101</div><div class="line">                     \----1           |</div><div class="line">                          |            \----&apos;C&apos; 12 1111011</div><div class="line">                          |</div><div class="line">                           \----&apos;e&apos; 48 11111</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="压缩实现">
  <a href="#压缩实现" class="headerlink" title="压缩实现"></a>压缩实现</h2>
<p>知道了如何编码，那怎么应用到压缩上去呢？</p>
<h3 id="压缩">
  <a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3>
<ol>
  <li>把文件分割成一个个字节，统计各个字节（总共256个）的数量</li>
  <li>根据统计出来的权重，来构造哈夫曼树，得出哈夫曼编码</li>
  <li>一字节一字节的转换为哈夫曼编码，再保存到新的文件（压缩文件）里</li>
  <li>再把统计的结果，也存储到文件里，用来解压缩</li>
</ol>
<p><strong>注意</strong>：转换后数据不一定能被8整除，那么保存的结尾就要稍作处理</p>
<p>原文：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">b&apos;Copyr……</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>转换：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">| b&apos;C&apos;    | b&apos;o&apos; | b&apos;p&apos;   | b&apos;y&apos;    | b&apos;r&apos;  | ... |</div><div class="line">|---------|------|--------|---------|-------|-----|</div><div class="line">| 1111011 | 0010 | 001110 | 1011000 | 01010 | ... |</div><div class="line"></div><div class="line">11110110010001110101100001010……</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>分割成字节：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">| 1111 0110 | 0100 0111 | 0101 1000 | 0101 0…… |</div><div class="line">|-----------|-----------|-----------|----------|</div><div class="line">| 246       | 71        | 88        | ……       |</div><div class="line">| b&apos;\xf6&apos;   | b&apos;G&apos;      | b&apos;X&apos;      | ……       |</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>压缩结果：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">b&apos;\xf6GX……</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>这么短短的一段，从5字节压缩成3.6+字节大小</p>
<h3 id="解压">
  <a href="#解压" class="headerlink" title="解压"></a>解压</h3>
<ol>
  <li>读取压缩文件中的统计结果，构造哈夫曼树</li>
  <li>一比特一比特的用哈夫曼树索引，得到原本的字节，再保存到新文件中</li>
</ol>
<p>压缩文件字节流：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">b&apos;\xf6GX……</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>得到比特流：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">| b&apos;\xf6&apos;   | b&apos;G&apos;      | b&apos;X&apos;      | ……       |</div><div class="line">|-----------|-----------|-----------|----------|</div><div class="line">| 246       | 71        | 88        | ……       |</div><div class="line">| 1111 0110 | 0100 0111 | 0101 1000 | 0101 0…… |</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>根据哈夫曼树，索引出对应的值，<code>&#39;0&#39;</code>进入左子树，<code>&#39;1&#39;</code>进入右子树，直到子叶……</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">11110110010001110101100001010……</div><div class="line"></div><div class="line">| 1111011 | 0010 | 001110 | 1011000 | 01010 | ... |</div><div class="line">|---------|------|--------|---------|-------|-----|</div><div class="line">| b&apos;C&apos;    | b&apos;o&apos; | b&apos;p&apos;   | b&apos;y&apos;    | b&apos;r&apos;  | ... |</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>原文：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">b&apos;Copyr……</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="尾部处理">
  <a href="#尾部处理" class="headerlink" title="尾部处理"></a>尾部处理</h3>
<p>若结尾出现以下情况</p>
<ol>
  <li>
    <p>结尾长度小于一字节</p>
    <figure class="highlight plain">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
          </td>
          <td class="code">
            <pre><div class="line">    压缩           解压</div><div class="line"></div><div class="line">| 0010    |   | b&apos;\x02&apos;  |</div><div class="line">|---------|   |----------|</div><div class="line">| 2       |   | 2        |</div><div class="line">| b&apos;\x02&apos; |   | 00000010 |</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p>结尾长度等于一字节</p>
    <figure class="highlight plain">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
          </td>
          <td class="code">
            <pre><div class="line">    压缩           解压</div><div class="line"></div><div class="line">| 00000010 |  | b&apos;\x02&apos;  |</div><div class="line">|----------|  |----------|</div><div class="line">| 2        |  | 2        |</div><div class="line">| b&apos;\x02&apos;  |  | 00000010 |</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
</ol>
<p>为了避免尾部可能出现的错误，所以将对尾部进行处理：<strong>在尾部写入之前，写入尾部的长度数据</strong></p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">      压缩               解压</div><div class="line"></div><div class="line">| 0010        |   | b&apos;\x04\x02&apos;  |</div><div class="line">|-------------|   |--------------|</div><div class="line">| 2           |   | 2            |</div><div class="line">| b&apos;\x04\x02&apos; |   | 0010         |</div><div class="line"></div><div class="line">      压缩               解压</div><div class="line"></div><div class="line">| 00000010    |   | b&apos;\x08\x02&apos;  |</div><div class="line">|-------------|   |--------------|</div><div class="line">| 2           |   | 2            |</div><div class="line">| b&apos;\x08\x02&apos; |   | 00000010     |</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="存储字节统计结果">
  <a href="#存储字节统计结果" class="headerlink" title="存储字节统计结果"></a>存储字节统计结果</h3>
<p>字符（一字节）字节，字符以一字节来存，最多有256个字符。<br>还要存储出现次数的字节长度，用来读取。</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">| for                  | value         | bytes               |</div><div class="line">|----------------------|---------------|---------------------|</div><div class="line">| charNum              | 256 - 1 (max) | b&apos;\xff&apos;             |</div><div class="line">| Count&apos;s bytes length | 4             | b&apos;\x04              |</div><div class="line">| char                 | 0             | b&apos;\x00&apos;             |</div><div class="line">| char Count           | 255           | b&apos;\x00\x00\x00\xff&apos; |</div><div class="line">| char                 | 1             | b&apos;\x01&apos;             |</div><div class="line">| ...                  | ...           | ...                 |</div><div class="line"></div><div class="line">b&apos;\xff\x04\x00\x00\x00\x00\xff\x01...</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="测试">
  <a href="#测试" class="headerlink" title="测试"></a>测试</h3>
<p>拿<a href="/2017/09/24/自己来写压缩算法——哈夫曼算法/MIT.txt" title="MIT-LICENCE">MIT-LICENCE</a>文件来测试：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">| before      | after     |</div><div class="line">|-------------|-----------|</div><div class="line">| 1,072 bytes | 859 bytes |</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="代码">
  <a href="#代码" class="headerlink" title="代码"></a>代码</h3>
<script src="https://gist.github.com/linw1995/7e49f6d05276538d8675874c585ece5d.js"></script>
<p>GIST: <a href="https://gist.github.com/linw1995/7e49f6d05276538d8675874c585ece5d" target="_blank" rel="external">Huffman Encoding and Data Compression | linw1995</a></p>]]></content>
    
    <summary type="html">
    
      压缩算法究竟是怎么做到压缩的？本文就介绍一种简单的压缩算法，哈夫曼算法
    
    </summary>
    
      <category term="Algorithms" scheme="http://linw1995.com/categories/Algorithms/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Windows上程序员神器——Cmder</title>
    <link href="http://linw1995.com/2017/08/07/Windows%E4%B8%8A%E7%A8%8B%E5%BA%8F%E5%91%98%E7%A5%9E%E5%99%A8%E2%80%94%E2%80%94Cmder/"/>
    <id>http://linw1995.com/2017/08/07/Windows上程序员神器——Cmder/</id>
    <published>2017-08-07T15:43:12.000Z</published>
    <updated>2017-08-08T15:24:37.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">
  <a href="#前言" class="headerlink" title="前言"></a>前言</h2>
<p>在Windows系统上做开发，总是对其Terminal不满意。无论是CMD还是PowerShell，真是太丑了。<br>现在安利大家一款神器，除了外观好看以外，功能也是强劲的狠。</p>
<h2 id="特点">
  <a href="#特点" class="headerlink" title="特点"></a>特点</h2>
<ul>
  <li>便携，解压即可用</li>
  <li>自带git、ls、curl等命令</li>
  <li>可设置命令别名</li>
  <li>丰富的颜色主题（Solarized、Twilight、Ubuntu、xterm、Monokai，甚至接受自定）、可定制字体</li>
  <li>支持tab分页、同屏多端口（支持水平分割、垂直分割）</li>
  <li>支持自定terminal，无论是CMD、PowerShell、bash都可以，还可以注入环境变量</li>
</ul>
<h2 id="示例图">
  <a href="#示例图" class="headerlink" title="示例图"></a>示例图</h2><img src="/2017/08/07/Windows上程序员神器——Cmder/cmder-use-01.gif" alt="commad use" title="commad use"> <img src="/2017/08/07/Windows上程序员神器——Cmder/cmder-use-02.gif" alt="theme" title="theme">
<h2 id="安装">
  <a href="#安装" class="headerlink" title="安装"></a>安装</h2>
<ul>
  <li>
    <p>下载链接：<a href="http://cmder.net/" target="_blank" rel="external">Cmder.net</a><br> 分别有mini（6MB）和full（84MD）版本，都是portable的，解压即可使用。<br> 占用空间又小，所以直接放在u盘、云盘（像Onedrive、iCloud）里也行，达到多台设备同步设置的效果（我是把设置导出到gist上，更改就手动更新）。</p>
  </li>
  <li>
    <p>解压，双击Cmder.exe运行。</p>
  </li>
</ul>
<h2 id="配置">
  <a href="#配置" class="headerlink" title="配置"></a>配置</h2>
<h3 id="外观设置">
  <a href="#外观设置" class="headerlink" title="外观设置"></a>外观设置</h3>
<ul>
  <li>
    <p><strong>Font</strong><br>右键Tab栏空白处，弹出菜单选择<strong>Settings</strong>，映入眼帘的就是字体设置了。<br>建议使用字体<a href="http://input.fontbureau.com/" target="_blank" rel="external">Input Mono</a>、<a href="http://www.levien.com/type/myfonts/inconsolata.html" target="_blank" rel="external">Inconsolata</a>、Consolas、Courier New。<br>还可以加上中文字体，<strong>“Main font”</strong>设置下方的<strong>“Alternative font”</strong>添加CJK字体，在设置<strong>“Unicode ranges”</strong>成CJK的就好了。</p>
  </li>
  <li>
    <p><strong>Color Schemes</strong><br>同样是在Settings框中，左侧树形菜单中选择<strong>Features</strong>-&gt;<strong>Colors</strong>，就能来到Scheme设置界面。Cmder自带的Scheme很丰富，也可以通过自定Scheme，应用网络上简洁好看的风格。<br><a href="https://github.com/joonro/ConEmu-Color-Themes" target="_blank" rel="external">Github | joonro/ConEmu-Color-Themes</a>提供了当前流行的Scheme安装方式。</p>
  </li>
  <li>
    <p><strong>Quake Style</strong><br>开启后，Cmder就变成了下拉式。按住<code>ctrl + &#96;</code>Cmder就从屏幕上方弹出，焦点转移就收回（可修改成再次按住<code>ctrl + &#96;</code>收回）。开启Quake Style之后极客感很强 !( •̀ ω •́ )!</p>
  </li>
</ul>
<h3 id="终端设置">
  <a href="#终端设置" class="headerlink" title="终端设置"></a>终端设置</h3>
<ul>
  <li>
    <p><strong>Default Terminal</strong><br>在<strong>Startup</strong>置项框里就可以更改默认终端，选择Special named task，在下拉菜单中选择适合自己的终端。<br>什么？！找不到自己满意的，还以在<strong>Startup</strong>-&gt;<strong>Tasks</strong>中添加新的终端，及初始化脚本（用来执行一些命令，设置环境变量、命令别名、ssh等）。还可以为这些终端添加快捷键HotKey，方便快速打开。<br><strong>Startup</strong>-&gt;<strong>Environment</strong>，能在这里为所有Tasks作初始化设置。</p>
  </li>
  <li>
    <p><strong>Split window</strong></p> <img src="/2017/08/07/Windows上程序员神器——Cmder/ConEmu-Maximus5.png" alt="ConEmu" title="ConEmu">
    <ul>
      <li>按住<code>ctrl + shift + e</code>水平分屏</li>
      <li>按住<code>ctrl + shift + o</code>垂直分屏 （可以在热键设置中更改）</li>
      <li>点击<strong>Tab bar</strong>上的<code>[+]</code>，选择<strong>“New Console Dialog”</strong>，里有<strong>“New console split”</strong>选项，即可分屏出不同类型的Terminal了。</li>
    </ul>
  </li>
  <li>
    <p><strong>Integration</strong><br>在<strong>Integration</strong>中即可添加右键菜单项，推荐用<strong>“ConEmu Here”</strong>。按住<strong>“Register”</strong>即可添加，但以后卸载Cmder之前一定要记得<strong>“Unregister”</strong>一下。</p>
  </li>
  <li>
    <p><strong>HotKey</strong><br>在<strong>Keys &amp; Macro</strong>中即可，修改添加各种热键。在子设置项中，还可以更改复制方式。Cmder默认设置是左键划取文本后，就自动复制了，十分方便。</p>
  </li>
</ul>
<h3 id="VSCode集成终端">
  <a href="#VSCode集成终端" class="headerlink" title="VSCode集成终端"></a>VSCode集成终端</h3>
<p>什么Cmder还可以当作VSCode的集成终端！？！？不过有个小bug，已经有人提了issue咯，等bug解决我再向大家安利吧。</p>
<h2 id="Q-amp-A">
  <a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2>
<ul>
  <li>
    <p>哪里可以看到详细的使用文档？<br>右键<strong>Tab bar</strong>-&gt;<strong>Help</strong>-&gt;<strong>About/Help</strong>就可以看到咯。</p>
  </li>
  <li>
    <p>命令别名不起作用怎么办？<br>打开Windows里的Terminal，无论是CMD还是PowerShell都行。在其设置中勾选”使用旧版控制台”即可。<br>相关issue：<a href="https://github.com/cmderdev/cmder/issues/1257#issuecomment-285341670" target="_blank" rel="external">Aliases not working at all</a></p>
  </li>
  <li>
    <p>ls命令不支持中文<br>在设置界面<strong>Startup</strong>-&gt;<strong>Environment</strong>中的文本框下加入<code>set LANG=zh_CN.UTF-8</code>即可。<br>顺便把代码页切成utf-8的吧，会省心很多跟你讲。输入<code>chcp 65001</code>。</p>
  </li>
  <li>
    <p>想放弃Windows自带的Terminal怎么办？因为真是丑的受不了……<br>在设置界面<strong>Integration</strong>-&gt;<strong>Default term</strong>中有”Force ConEmu as default terminal for console applications”的选项。勾选之前别忘了看向上方的警告信息。</p>
  </li>
</ul>
<h2 id="未提及的">
  <a href="#未提及的" class="headerlink" title="未提及的"></a>未提及的</h2>
<ul>
  <li>
    <p><a href="http://joonro.github.io/blog/posts/powershell-customizations.html" target="_blank" rel="external">My PowerShell Customizations | Joon Ro</a></p>
  </li>
  <li>
    <p><a href="https://chocolatey.org/" target="_blank" rel="external">The package manager for Windows, Chocolatey - Software Management Automation</a></p>
  </li>
</ul>
<h2 id="附录-·-Color-Schemes">
  <a href="#附录-·-Color-Schemes" class="headerlink" title="附录 · Color Schemes"></a>附录 · Color Schemes</h2>
<blockquote>
  <p>Color Scheme名称带尖括号的是Cmder自带的<br>其余来自<a href="https://github.com/joonro/ConEmu-Color-Themes" target="_blank" rel="external">Github | joonro/ConEmu-Color-Themes</a></p>
</blockquote>
<p>
  <link rel="stylesheet" href="/css/post/Windows上程序员神器——Cmder.css">
</p>
<div class="lightbox-gallery">
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 0.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 1.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 2.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 3.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 4.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 5.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 6.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 7.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 8.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 9.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 10.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 11.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 12.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 13.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 14.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 15.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 16.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 17.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 18.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 19.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 20.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 21.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 22.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 23.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 24.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 25.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 26.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 27.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 28.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 29.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 30.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 31.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 32.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 33.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 34.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 35.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 36.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 37.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 38.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 39.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 40.png"></div>
  <div><img src="/2017/08/07/Windows上程序员神器——Cmder/theme 41.png"></div>
</div>]]></content>
    
    <summary type="html">
    
      在Windows系统上做开发，总是对其Terminal不满意。无论是CMD还是PowerShell，真是太丑了。现在安利大家一款神器，除了外观好看以外，功能也是强劲的狠。&lt;img src=&quot;/2017/08/07/Windows上程序员神器——Cmder/cmder.jpg&quot; alt=&quot;Cmder&quot; title=&quot;Cmder&quot;&gt;
    
    </summary>
    
      <category term="Others" scheme="http://linw1995.com/categories/Others/"/>
    
    
      <category term="tools" scheme="http://linw1995.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Python并发</title>
    <link href="http://linw1995.com/2017/07/16/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Python%E5%B9%B6%E5%8F%91/"/>
    <id>http://linw1995.com/2017/07/16/深入理解Python并发/</id>
    <published>2017-07-16T13:28:07.000Z</published>
    <updated>2017-07-22T18:14:31.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">
  <a href="#前言" class="headerlink" title="前言"></a>前言</h2>
<p>昨天（2017年7月15日）偶然看到这个视频，看完之后豁然开朗，忍不住要分享给大家。</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/MCs5OvhV9S4" frameborder="0" allowfullscreen></iframe></p>
<h2 id="并发Demo">
  <a href="#并发Demo" class="headerlink" title="并发Demo"></a>并发Demo</h2>
<p>视频中举了个例子，用socket写了个迷你服务，只有一个作用，计算Fibonacci……</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(addr, port)</span>:</span></div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.bind((addr, port))</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client, addr = sock.accept()</div><div class="line">        print(<span class="string">'Connection'</span>, addr)</div><div class="line">        handler(client)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        req = client.recv(<span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        n = int(req)</div><div class="line">        result = fib(n)</div><div class="line">        resp = str(result).encode(<span class="string">'ascii'</span>) + <span class="string">b'\n'</span></div><div class="line">        client.send(resp)</div><div class="line">    print(<span class="string">"Connection Closed"</span>)</div><div class="line"></div><div class="line"></div><div class="line">server(<span class="string">""</span>, <span class="number">25000</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>当然目前这个只是一个堵塞版本，可以用以下代码测试一下</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># nc.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">sock.connect((<span class="string">'localhost'</span>, <span class="number">25000</span>))</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    n = input()</div><div class="line">    sock.send(n.encode(<span class="string">'ascii'</span>))</div><div class="line">    resp = sock.recv(<span class="number">100</span>)</div><div class="line">    print(resp.decode(<span class="string">'ascii'</span>), end=<span class="string">''</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>该迷你服务一次只能处理一个请求，我们只需要稍微修改一下代码即可以改变现状</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(addr, port)</span>:</span></div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.bind((addr, port))</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client, addr = sock.accept()</div><div class="line">        print(<span class="string">'Connection'</span>, addr)</div><div class="line">        Thread(target=handler, args=(client,), daemon=<span class="keyword">True</span>).start()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        req = client.recv(<span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        n = int(req)</div><div class="line">        result = fib(n)</div><div class="line">        resp = str(result).encode(<span class="string">'ascii'</span>) + <span class="string">b'\n'</span></div><div class="line">        client.send(resp)</div><div class="line">    print(<span class="string">"Connection Closed"</span>)</div><div class="line"></div><div class="line"></div><div class="line">server(<span class="string">""</span>, <span class="number">25000</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>每次收到请求，就会开启一个新的线程来处理。用以下代码来测试其性能。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># perf.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"></div><div class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">sock.connect((<span class="string">'localhost'</span>, <span class="number">25000</span>))</div><div class="line"></div><div class="line">counter = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">monitor</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> counter</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        print(counter, <span class="string">'reqs/sec'</span>)</div><div class="line">        counter = <span class="number">0</span></div><div class="line"></div><div class="line"></div><div class="line">Thread(target=monitor, daemon=<span class="keyword">True</span>).start()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    sock.send(<span class="string">b'1'</span>)</div><div class="line">    resp = sock.recv(<span class="number">100</span>)</div><div class="line">    counter += <span class="number">1</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>每当多开启一个测试端，各个测试端每秒请求数量或多或少都会受到影响。而且当我们用nc.py作一个需要大量计算资源请求，比如 <code>fib(40)</code> ,结果更是惨不忍睹。若是我们把线程换成进程。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor <span class="keyword">as</span> Pool</div><div class="line"></div><div class="line">pool = Pool(<span class="number">10</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(addr, port)</span>:</span></div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.bind((addr, port))</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client, addr = sock.accept()</div><div class="line">        print(<span class="string">'Connection'</span>, addr)</div><div class="line">        Thread(target=handler, args=(client, ), daemon=<span class="keyword">True</span>).start()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        req = client.recv(<span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        n = int(req)</div><div class="line">        future = pool.submit(fib, n)</div><div class="line">        result = future.result()</div><div class="line">        resp = str(result).encode(<span class="string">'ascii'</span>) + <span class="string">b'\n'</span></div><div class="line">        client.send(resp)</div><div class="line">    print(<span class="string">"Connection Closed"</span>)</div><div class="line"></div><div class="line"><span class="comment"># 使用ProcessPoolExecutor必须用</span></div><div class="line"><span class="comment"># if __name__ == '__main__':</span></div><div class="line"><span class="comment">#     main()</span></div><div class="line"><span class="comment"># 因为子进程会导入__main__模块，若不用此方法避免子进程重复执行主进程的代码，</span></div><div class="line"><span class="comment"># 可能会导致一些奇怪的结果</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    server(<span class="string">""</span>, <span class="number">25000</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>当然，我们要使用 <strong>ProcessPoolExecutor</strong> 来执行 <strong>CPU密集型任务</strong> ；用 <strong>ThreadPoolExecutor</strong> 更适合 <strong>I/O密集型任务</strong> 。这样突然来了一个需要 <code>fib(40)</code> 的请求，也不会造成很大的影响。不过各个测试端的每秒请求数量，会比之前降了一个数量级，这是因为解释器与子进程沟通的消耗导致的。</p>
<h2 id="深入了解">
  <a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h2>
<p>视频来到高潮部分，David Beazley讲Python圈子里有个特别火的观点，就是用 <code>threading</code> 非常糟糕，不要用！所以他把代码恢复到原来的版本。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(addr, port)</span>:</span></div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.bind((addr, port))</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client, addr = sock.accept()</div><div class="line">        print(<span class="string">'Connection'</span>, addr)</div><div class="line">        handler(client)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        req = client.recv(<span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">        <span class="keyword">break</span></div><div class="line">        n = int(req)</div><div class="line">        result = fib(n)</div><div class="line">        resp = str(result).encode(<span class="string">'ascii'</span>) + <span class="string">b'\n'</span></div><div class="line">        client.send(resp)</div><div class="line">    print(<span class="string">"Connection Closed"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    server(<span class="string">""</span>, <span class="number">25000</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>如果不用 <code>threading</code> 模块，如何做到并发呢？用Python中的生成器特性，使用yield关键字。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line"><span class="meta">... </span>        <span class="keyword">yield</span> n</div><div class="line"><span class="meta">... </span>n -= <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>cd = countdown(<span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(cd)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> cd:</div><div class="line"><span class="meta">... </span>    print(i)</div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(cd)</div><div class="line">Traceback (most recent call last):</div><div class="line">    File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>当解释器运行到yield会返回结果，并挂起该函数，等待下次激活。利用这个特性，稍微修改一下代码</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> select</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"></div><div class="line">tasks = deque()</div><div class="line">recv_wait = dict() <span class="comment"># Mapping sockets -&gt; tasks (generators)</span></div><div class="line">send_wait = dict()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> any([tasks, recv_wait, send_wait]):</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> tasks:</div><div class="line">            <span class="comment"># 没有正在运行的task</span></div><div class="line">            <span class="comment"># 等待I/O操作</span></div><div class="line">            can_recv, can_send, _ = select.select(recv_wait, send_wait, [])</div><div class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> can_recv:</div><div class="line">                tasks.append(recv_wait.pop(sock))</div><div class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> can_send:</div><div class="line">                tasks.append(send_wait.pop(sock))</div><div class="line"></div><div class="line">        task = tasks.popleft()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            why, what = next(task)</div><div class="line">            <span class="keyword">if</span> why == <span class="string">'recv'</span>:</div><div class="line">                recv_wait[what] = task</div><div class="line">            <span class="keyword">elif</span> why == <span class="string">'send'</span>:</div><div class="line">                send_wait[what] = task</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">'需要参数!'</span>)</div><div class="line">        <span class="keyword">except</span> StopIteration:</div><div class="line">            print(<span class="string">'Task Done!'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(addr, port)</span>:</span></div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.bind((addr, port))</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">yield</span> <span class="string">'recv'</span>, sock</div><div class="line">        client, addr = sock.accept()</div><div class="line">        print(<span class="string">'Connection'</span>, addr)</div><div class="line">        tasks.append(handler(client)) <span class="comment"># 添加新任务</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">yield</span> <span class="string">'recv'</span>, client</div><div class="line">        req = client.recv(<span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        n = int(req)</div><div class="line">        result = fib(n)</div><div class="line">        resp = str(result).encode(<span class="string">'ascii'</span>) + <span class="string">b'\n'</span></div><div class="line">        <span class="keyword">yield</span> <span class="string">'send'</span>, client</div><div class="line">        client.send(resp)</div><div class="line">    print(<span class="string">"Connection Closed"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    tasks.append(server(<span class="string">""</span>, <span class="number">25000</span>)) <span class="comment"># 添加初始任务</span></div><div class="line">    run()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>在需要进行I/O操作的地方使用 <code>yield</code> ，挂起该函数，用 <code>select</code> 查看socket的I/O操作是否准备好。准备好就唤醒该函数，执行I/O操作。使用perf.py或者nc.py测试一下，发现我们成功地实现了并发，没用借助 <code>threading</code> 模块。但我们遇到CPU密集型任务，该代码的表现就乏善可陈。我们尝试用 <code>ProcessPoolExecutor</code> 来解决这个问题</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> select</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor <span class="keyword">as</span> Pool</div><div class="line"></div><div class="line">pool = Pool(<span class="number">10</span>)</div><div class="line">tasks = deque()</div><div class="line">recv_wait = dict() <span class="comment"># Mapping sockets -&gt; tasks (generators)</span></div><div class="line">send_wait = dict()</div><div class="line">future_wait = dict()</div><div class="line"></div><div class="line">future_notify, future_event = socket.socketpair()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">future_done</span><span class="params">(future)</span>:</span></div><div class="line">    tasks.append(future_wait.pop(future))</div><div class="line">    future_notify.send(<span class="string">b'x'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">future_monitor</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">yield</span> <span class="string">'recv'</span>, future_event</div><div class="line">        future_event.recv(<span class="number">100</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> any([tasks, recv_wait, send_wait]):</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> tasks:</div><div class="line">            <span class="comment"># 没有正在运行的task</span></div><div class="line">            <span class="comment"># 等待I/O操作</span></div><div class="line">            can_recv, can_send, _ = select.select(recv_wait, send_wait, [])</div><div class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> can_recv:</div><div class="line">                tasks.append(recv_wait.pop(sock))</div><div class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> can_send:</div><div class="line">                tasks.append(send_wait.pop(sock))</div><div class="line"></div><div class="line">        task = tasks.popleft()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            why, what = next(task)</div><div class="line">            <span class="keyword">if</span> why == <span class="string">'recv'</span>:</div><div class="line">                recv_wait[what] = task</div><div class="line">            <span class="keyword">elif</span> why == <span class="string">'send'</span>:</div><div class="line">                send_wait[what] = task</div><div class="line">            <span class="keyword">elif</span> why == <span class="string">'future'</span>:</div><div class="line">                future_wait[what] = task</div><div class="line">                what.add_done_callback(future_done)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">'需要参数!'</span>)</div><div class="line">        <span class="keyword">except</span> (StopIteration, ConnectionResetError):</div><div class="line">            print(<span class="string">'Task Done!'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(addr, port)</span>:</span></div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.bind((addr, port))</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">yield</span> <span class="string">'recv'</span>, sock</div><div class="line">        client, addr = sock.accept()</div><div class="line">        print(<span class="string">'Connection'</span>, addr)</div><div class="line">        tasks.append(handler(client))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">yield</span> <span class="string">'recv'</span>, client</div><div class="line">        req = client.recv(<span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        n = int(req)</div><div class="line">        future = pool.submit(fib, n)</div><div class="line">        <span class="keyword">yield</span> <span class="string">'future'</span>, future</div><div class="line">        result = future.result()</div><div class="line">        resp = str(result).encode(<span class="string">'ascii'</span>) + <span class="string">b'\n'</span></div><div class="line">        <span class="keyword">yield</span> <span class="string">'send'</span>, client</div><div class="line">        client.send(resp)</div><div class="line">        print(<span class="string">"Closed"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    tasks.append(server(<span class="string">""</span>, <span class="number">25000</span>))</div><div class="line">    tasks.append(future_monitor())</div><div class="line">    run()</div></pre>
      </td>
    </tr>
  </table>
  </figure>
  <p>因为future对象不是文件描述符，无法用 <code>select</code> 来查看任务是否完成。但有更好的方法，future对象支持添加callback函数。用 <code>socket.socketpair</code> 配合 <code>future.add_done_callback</code> 函数来解决这个问题。接下来有个小问题， <code>yield</code> 在代码中很突兀，有什么办法把它包装起来？！？</p>
  <figure class="highlight python">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="comment"># -*- co```ding: utf-8 -*-</span></div><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> select</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor <span class="keyword">as</span> Pool</div><div class="line"></div><div class="line">pool = Pool(<span class="number">10</span>)</div><div class="line">tasks = deque()</div><div class="line">recv_wait = dict() <span class="comment"># Mapping sockets -&gt; tasks (generators)</span></div><div class="line">send_wait = dict()</div><div class="line">future_wait = dict()</div><div class="line"></div><div class="line">future_notify, future_event = socket.socketpair()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">future_done</span><span class="params">(future)</span>:</span></div><div class="line">    tasks.append(future_wait.pop(future))</div><div class="line">    future_notify.send(<span class="string">b'x'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">future_monitor</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">yield</span> <span class="string">'recv'</span>, future_event</div><div class="line">        future_event.recv(<span class="number">100</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> any([tasks, recv_wait, send_wait]):</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> tasks:</div><div class="line">            <span class="comment"># 没有正在运行的task</span></div><div class="line">            <span class="comment"># 等待I/O操作</span></div><div class="line">            can_recv, can_send, _ = select.select(recv_wait, send_wait, [])</div><div class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> can_recv:</div><div class="line">                tasks.append(recv_wait.pop(sock))</div><div class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> can_send:</div><div class="line">                tasks.append(send_wait.pop(sock))</div><div class="line"></div><div class="line">        task = tasks.popleft()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            why, what = next(task)</div><div class="line">            <span class="keyword">if</span> why == <span class="string">'recv'</span>:</div><div class="line">                recv_wait[what] = task</div><div class="line">            <span class="keyword">elif</span> why == <span class="string">'send'</span>:</div><div class="line">                send_wait[what] = task</div><div class="line">            <span class="keyword">elif</span> why == <span class="string">'future'</span>:</div><div class="line">                future_wait[what] = task</div><div class="line">                what.add_done_callback(future_done)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">'需要参数!'</span>)</div><div class="line">        <span class="keyword">except</span> (StopIteration, ConnectionResetError):</div><div class="line">            print(<span class="string">'Task Done!'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AsyncSocket</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sock)</span>:</span></div><div class="line">        self.sock = sock</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recv</span><span class="params">(self, maxsize)</span>:</span></div><div class="line">        <span class="keyword">yield</span> <span class="string">'recv'</span>, self.sock</div><div class="line">        <span class="keyword">return</span> self.sock.recv(maxsize)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self, data)</span>:</span></div><div class="line">        <span class="keyword">yield</span> <span class="string">'send'</span>, self.sock</div><div class="line">        <span class="keyword">return</span> self.sock.send(data)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accept</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">yield</span> <span class="string">'recv'</span>, self.sock</div><div class="line">        client, addr = self.sock.accept()</div><div class="line">        <span class="keyword">return</span> AsyncSocket(client), addr</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></div><div class="line">        <span class="keyword">return</span> getattr(self.sock, name)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">server</span><span class="params">(addr, port)</span>:</span></div><div class="line">    sock = AsyncSocket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))</div><div class="line">    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">    sock.bind((addr, port))</div><div class="line">    sock.listen(<span class="number">5</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        client, addr = <span class="keyword">yield</span> <span class="keyword">from</span> sock.accept()</div><div class="line">        print(<span class="string">'Connection'</span>, addr)</div><div class="line">        tasks.append(handler(client))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(client)</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        req = <span class="keyword">yield</span> <span class="keyword">from</span> client.recv(<span class="number">100</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        n = int(req)</div><div class="line">        future = pool.submit(fib, n)</div><div class="line">        <span class="keyword">yield</span> <span class="string">'future'</span>, future</div><div class="line">        result = future.result()</div><div class="line">        resp = str(result).encode(<span class="string">'ascii'</span>) + <span class="string">b'\n'</span></div><div class="line">        <span class="keyword">yield</span> <span class="keyword">from</span> client.send(resp)</div><div class="line">    print(<span class="string">"Connection Closed"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    tasks.append(server(<span class="string">""</span>, <span class="number">25000</span>))</div><div class="line">    tasks.append(future_monitor())</div><div class="line">    run()</div></pre>
        </td>
      </tr>
    </table>
  </figure>
  <p><code>yield from</code> 是用来代理子生成器的，一种简单方式来控制子生成器的行为。在Python3.5之后，这种写法就可以用更简单的 <code>async/await</code> 来代替。</p>
  <h2 id="async-await">
    <a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2>
  <p>看了这个视频后，就看了pycon上关于Asynchronous的视频。研究了一下3.5后的协程语法，把代码修改成以下的样子。</p>
  <figure class="highlight python">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># server.py</span></div><div class="line"><span class="keyword">import</span> asyncio</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor <span class="keyword">as</span> Executor</div><div class="line"></div><div class="line">logger = logging.getLogger(<span class="string">'SERVER'</span>)</div><div class="line">logging.basicConfig(stream=sys.stdout, level=logging.INFO)</div><div class="line">executor = Executor(<span class="number">4</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n: int)</span> -&gt; int:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">handler</span><span class="params">(reader: asyncio.StreamReader, writer: asyncio.StreamWriter)</span>:</span></div><div class="line">    addr = writer.get_extra_info(<span class="string">'peername'</span>)</div><div class="line">    logger.info(<span class="string">'Connection&lt;%s:%d&gt; Created'</span>, *addr)</div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        req = <span class="keyword">await</span> reader.readline()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req.strip():</div><div class="line">            <span class="keyword">break</span></div><div class="line">        logger.debug(<span class="string">'Connection&lt;%s:%d&gt; Recv %r'</span>, *addr, req)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            n = int(req)</div><div class="line">            future = loop.run_in_executor(executor, fib, n)</div><div class="line">            result = <span class="keyword">await</span> asyncio.gather(future, return_exceptions=<span class="keyword">True</span>)</div><div class="line">            <span class="keyword">if</span> isinstance(result, Exception):</div><div class="line">                <span class="keyword">break</span></div><div class="line">            resp = str(result[<span class="number">0</span>]).encode(<span class="string">'ascii'</span>) + <span class="string">b'\n'</span></div><div class="line">            logger.debug(<span class="string">'Connection&lt;%s:%d&gt; Send %r'</span>, *addr, resp)</div><div class="line">            writer.write(resp)</div><div class="line">            <span class="keyword">await</span> writer.drain()</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            writer.write(<span class="string">b'[Error]\n'</span>)</div><div class="line">            <span class="keyword">await</span> writer.drain()</div><div class="line">            logger.exception(e)</div><div class="line">            <span class="keyword">continue</span></div><div class="line">    writer.close()</div><div class="line">    logger.info(<span class="string">'Connection&lt;%s:%d&gt; Done'</span>, *addr)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Server</span><span class="params">(host: str, port: int)</span>:</span></div><div class="line">    loop = asyncio.get_event_loop()</div><div class="line">    coro = asyncio.start_server(handler, host, port, loop=loop)</div><div class="line">    server = loop.run_until_complete(coro)</div><div class="line"></div><div class="line">    print(<span class="string">'Serving on http://%s:%d'</span> % (host, port))</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        loop.run_forever()</div><div class="line">    <span class="keyword">finally</span>:</div><div class="line">        executor.shutdown()</div><div class="line">        server.close()</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            loop.run_until_complete(server.wait_closed())</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">        loop.close()</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    Server(<span class="string">'localhost'</span>, <span class="number">12345</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre>
        </td>
      </tr>
    </table>
  </figure>
  <p>是不是看起简洁了许多？刚学体会也不是很深，不是很了解。但觉得代码可读性变好了。</p>
  <h2 id="小结">
    <a href="#小结" class="headerlink" title="小结"></a>小结</h2>
  <table>
    <thead>
      <tr>
        <th>CPU密集型任务</th>
        <th>IO密集型任务</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><code>multiprocessing</code></td>
        <td><code>threading</code></td>
      </tr>
      <tr>
        <td><code>concurrent.futures.ProcessPoolExecutor</code></td>
        <td><code>concurrent.futures.ThreadPoolExecutor</code></td>
      </tr>
      <tr>
        <td></td>
        <td><code>async / await</code></td>
      </tr>
    </tbody>
  </table>
  <p>以上关于<strong>Fibonacci</strong>的例子是为了更好地理解并发，不是一个很好的算法。</p>
  <figure class="highlight python">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></div><div class="line">    a , b = <span class="number">1</span>, <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</div><div class="line">        a, b = b, a + b</div><div class="line">    <span class="keyword">return</span> a</div></pre>
        </td>
      </tr>
    </table>
  </figure>
  <p>使用以上版本大大加快了<code>fib</code>的计算速度，就没必要用多进程了。<br>其实在多线程中最好不要开多进程，因为可能会出现死锁，导致程序出现不可预知的错误。因此，必须慎重对待多进程和多线程混搭使用。</p>
  <h2 id="参考链接">
    <a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>
  <ul>
    <li><a href="https://docs.python.org/dev/library/concurrent.futures.html#processpoolexecutor-example" target="_blank" rel="external">17.4.3. ProcessPoolExecutor | Python Docs</a></li>
    <li><a href="http://masnun.com/2016/03/29/python-a-quick-introduction-to-the-concurrent-futures-module.html" target="_blank" rel="external">PYTHON: A QUICK INTRODUCTION TO THE CONCURRENT.FUTURES MODULE</a></li>
    <li><a href="https://docs.python.org/3/reference/expressions.html?highlight=yield#yield-expressions" target="_blank" rel="external">6.2.9. Yield expressions | Python Docs</a></li>
    <li><a href="http://blog.theerrorlog.com/yield-from-in-python-3.html" target="_blank" rel="external">Python3中的yield from语法</a></li>
    <li><a href="https://www.python.org/dev/peps/pep-0380/" target="_blank" rel="external">PEP 380 — Syntax for Delegating to a Subgenerator</a></li>
  </ul>
  <h2 id="扩展阅读">
    <a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2>
  <ul>
    <li>
      <p>Pycon Montreal, David&#39;s talk所出现的所有代码<br> <a href="https://github.com/codeAshu/concurrency" target="_blank" rel="external">codeAshu/concurrency | GitHub</a></p>
    </li>
    <li>
      <p>协程语法async与await<br> <a href="https://www.python.org/dev/peps/pep-0492/" target="_blank" rel="external">PEP 492 — Coroutines with async and await syntax</a></p>
    </li>
    <li>
      <p>Python异步入门指南<br> <a href="https://www.youtube.com/watch?v=Bv25Dwe84g0" target="_blank" rel="external">Thinking about Concurrency, Raymond Hettinger, Python core developer | PyCon Russia 2016</a><br> <a href="https://youtu.be/iG6fr81xHKA" target="_blank" rel="external">Miguel Grinberg Asynchronous Python for the Complete Beginner PyCon 2017</a></p>
    </li>
  </ul>]]></content>
    
    <summary type="html">
    
      昨天（2017年7月15日）偶然看到这个视频，看完之后豁然开朗，忍不住要分享给大家。
    
    </summary>
    
      <category term="Python" scheme="http://linw1995.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
      <category term="并发" scheme="http://linw1995.com/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>用golang给图片打水印</title>
    <link href="http://linw1995.com/2017/06/25/%E7%94%A8golang%E7%BB%99%E5%9B%BE%E7%89%87%E6%89%93%E6%B0%B4%E5%8D%B0/"/>
    <id>http://linw1995.com/2017/06/25/用golang给图片打水印/</id>
    <published>2017-06-25T06:14:39.000Z</published>
    <updated>2017-06-25T08:40:32.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">
  <a href="#前言" class="headerlink" title="前言"></a>前言</h2>
<p>大前天上班的时候，坐在旁边的同事需要一批有水印的图片来测试模型。然后我就主动站出来……<br>他问我怎么加，我说用golang可以（为啥我不用更容易实现的Python呢……可能是为了装逼）。</p>
<h2 id="代码">
  <a href="#代码" class="headerlink" title="代码"></a>代码</h2>
<blockquote> <a href="https://gist.github.com/linw1995/41e103f29e7dd97679c577a6f4830be8" target="_blank" rel="external">WaterMark.go | Gist</a> </blockquote>
<h2 id="使用效果">
  <a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h2><img src="/2017/06/25/用golang给图片打水印/1.jpg" alt="前" title="前"> <img src="/2017/06/25/用golang给图片打水印/1_marked.jpg" alt="后" title="后">]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/06/25/用golang给图片打水印/1_marked.jpg&quot; alt=&quot;用golang给图片打水印&quot; title=&quot;用golang给图片打水印&quot; width=&quot;30%&quot;&gt;
    
    </summary>
    
      <category term="Go" scheme="http://linw1995.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://linw1995.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>iOS字体安装和使用</title>
    <link href="http://linw1995.com/2017/06/16/iOS%E5%AD%97%E4%BD%93%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://linw1995.com/2017/06/16/iOS字体安装和使用/</id>
    <published>2017-06-16T13:19:03.000Z</published>
    <updated>2017-06-16T13:34:24.580Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">
  <a href="#前言" class="headerlink" title="前言"></a>前言</h2>
<p>自7.0版本起iOS系统就支持字体文件的安装，以配置描述文件的形式储存在系统中。安装完成后即可通过各种App使用该字体。</p>
<h2 id="代码">
  <a href="#代码" class="headerlink" title="代码"></a>代码</h2>
<blockquote> <a href="https://gist.github.com/linw1995/7b1b8e88159f18ed18f46629e35ba423" target="_blank" rel="external">Packaging fonts in configuration profiles for installing on iOS | Gist</a> </blockquote>
<h2 id="使用">
  <a href="#使用" class="headerlink" title="使用"></a>使用</h2>
<p>先下载代码重命名为<code>packagingfonts.py</code>，和需要安装的字体文件（.ttf或.otf格式）放在同个目录下</p>
<p>贡献几个美渣渣的字体来源</p>
<ul>
  <li><a href="https://fonts.google.com/" target="_blank" rel="external">Google Fonts</a></li>
  <li><a href="https://www.google.com/get/noto/" target="_blank" rel="external">Google Noto Fonts</a></li>
  <li><a href="https://www.zhihu.com/question/20727176" target="_blank" rel="external">有哪些值得推荐的中文字体？ | 知乎</a> </li>
</ul>
<p>在<strong>CMD</strong>中运行代码</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">python packagingfonts.py SentyMarukoPro.ttf NotoSans-Regular.ttf</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>目录下就会多出两个配置描述文件</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">NotoSans-Regular.ttf.mobileconfig</div><div class="line">SentyMarukoPro.ttf.mobileconfig</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>可这个描述文件需要用<strong>Safari</strong>打开才行。<br>把计算机和iOS设备连接到同个Wifi上，在<strong>CMD</strong>中输入以下命令</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">&gt;&gt;&gt; python -m http.server -b 192.168.137.1</div><div class="line">Serving HTTP on 192.168.137.1 port 8000 (http://192.168.137.1:8000/) ...</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>然后用<strong>Safari</strong>访问该地址，选择相应的设备描述文件安装字体即可。</p> <img src="/2017/06/16/iOS字体安装和使用/IMG_0695.PNG" alt="Pages" title="Pages">
<h2 id="参考">
  <a href="#参考" class="headerlink" title="参考"></a>参考</h2>
<blockquote class="pullquote">
  <ul>
    <li><a href="https://sspai.com/post/36259" target="_blank" rel="external">Workflow：Google Fonts字体下载 &amp; iOS字体安装和使用 | 少数派</a></li>
    <li><a href="https://developer.apple.com/library/content/featuredarticles/iPhoneConfigurationProfileRef/Introduction/Introduction.html#//apple_ref/doc/uid/TP40010206-CH1-SW43" target="_blank" rel="external">Font Payload | Configuration Profile Reference</a></li>
    <li><a href="https://gist.github.com/linw1995/7b1b8e88159f18ed18f46629e35ba423" target="_blank" rel="external">Packaging fonts in configuration profiles for installing on iOS | Gist</a></li>
  </ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      利用iOS配置描述文件安装和使用字体
    
    </summary>
    
      <category term="Others" scheme="http://linw1995.com/categories/Others/"/>
    
    
      <category term="iOS" scheme="http://linw1995.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Use go to manipulate gif</title>
    <link href="http://linw1995.com/2017/06/06/Use-go-to-manipulate-gif/"/>
    <id>http://linw1995.com/2017/06/06/Use-go-to-manipulate-gif/</id>
    <published>2017-06-06T05:33:08.000Z</published>
    <updated>2017-07-05T14:59:59.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单介绍下image-gif包">
  <a href="#简单介绍下image-gif包" class="headerlink" title="简单介绍下image/gif包"></a>简单介绍下image/gif包</h2>
<figure class="highlight go">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">type</span> GIF <span class="keyword">struct</span> &#123;</div><div class="line">        Image           []*image.Paletted <span class="comment">// 一组连续的图片</span></div><div class="line">        Delay           []<span class="keyword">int</span> <span class="comment">// 每张图片间的时间间隔，100为一秒</span></div><div class="line">        LoopCount       <span class="keyword">int</span> <span class="comment">// 循环次数</span></div><div class="line">        <span class="comment">// 每次切换图片所使用的处理方式，例如清空画布、去除背景、层叠</span></div><div class="line">        Disposal        []<span class="keyword">byte</span></div><div class="line">        <span class="comment">// 图片设置 存放图片高度、宽度等信息</span></div><div class="line">        Config          image.Config</div><div class="line">        <span class="comment">// 背景默认颜色在palette中的位置， 当使用DisposalBackground处理方式时使用。</span></div><div class="line">        BackgroundIndex <span class="keyword">byte</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">        DisposalNone       = <span class="number">0x01</span></div><div class="line">        DisposalBackground = <span class="number">0x02</span></div><div class="line">        DisposalPrevious   = <span class="number">0x03</span></div><div class="line">)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li><code>func DecodeAll(r io.Reader) (*GIF, error)</code> DecodeAll从r中读取一个GIF图像，然后返回一个GIF对象</li>
  <li><code>func DecodeConfig(r io.Reader) (image.Config, error)</code> DecodeConfig从r中读取出GIF图像的全局颜色模型和尺寸，无需解码整个图像</li>
  <li><code>func EncodeAll(w io.Writer, g *GIF) error</code> EncodeAll把GIF图像写入w中</li>
</ul>
<h2 id="实例">
  <a href="#实例" class="headerlink" title="实例"></a>实例</h2><img src="/2017/06/06/Use-go-to-manipulate-gif/rgb.gif" alt="rgb" title="rgb">
<figure class="highlight go">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">        <span class="string">"image"</span></div><div class="line">        <span class="string">"image/color"</span></div><div class="line">        <span class="string">"image/color/palette"</span></div><div class="line">        <span class="string">"image/gif"</span></div><div class="line">        <span class="string">"math"</span></div><div class="line">        <span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</div><div class="line">        X, Y, R <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Circle)</span> <span class="title">Brightness</span><span class="params">(x, y <span class="keyword">float64</span>)</span> <span class="title">uint8</span></span> &#123;</div><div class="line">        <span class="keyword">var</span> dx, dy <span class="keyword">float64</span> = c.X - x, c.Y - y</div><div class="line">        d := math.Sqrt(dx*dx+dy*dy) / c.R</div><div class="line">        <span class="keyword">if</span> d &gt; <span class="number">1</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">255</span></div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">const</span> (</div><div class="line">                w, h   <span class="keyword">int</span>     = <span class="number">256</span>, <span class="number">256</span></div><div class="line">                R      <span class="keyword">float64</span> = <span class="number">50</span></div><div class="line">                <span class="comment">// 大约一秒30帧</span></div><div class="line">                frameN <span class="keyword">int</span>     = <span class="number">30</span></div><div class="line">                delay  <span class="keyword">int</span>     = <span class="number">100</span> / frameN</div><div class="line">        )</div><div class="line">        <span class="comment">// 216色 + 透明</span></div><div class="line">        <span class="keyword">var</span> palette = <span class="built_in">append</span>(palette.WebSafe, color.Transparent)</div><div class="line">        <span class="keyword">var</span> images []*image.Paletted</div><div class="line">        <span class="keyword">var</span> delays []<span class="keyword">int</span></div><div class="line">        <span class="keyword">var</span> disposals []<span class="keyword">byte</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> hw, hh <span class="keyword">float64</span> = <span class="keyword">float64</span>(w / <span class="number">2</span>), <span class="keyword">float64</span>(h / <span class="number">2</span>)</div><div class="line">        circles := []*Circle&#123;&amp;Circle&#123;&#125;, &amp;Circle&#123;&#125;, &amp;Circle&#123;&#125;&#125;</div><div class="line">        <span class="keyword">for</span> step := <span class="number">0</span>; step &lt; frameN; step++ &#123;</div><div class="line">                img := image.NewPaletted(image.Rect(<span class="number">0</span>, <span class="number">0</span>, w, h), palette)</div><div class="line">                images = <span class="built_in">append</span>(images, img)</div><div class="line">                delays = <span class="built_in">append</span>(delays, delay)</div><div class="line">                disposals = <span class="built_in">append</span>(disposals, gif.DisposalPrevious)</div><div class="line"></div><div class="line">                θ := <span class="number">2.0</span> * math.Pi / <span class="keyword">float64</span>(frameN) * <span class="keyword">float64</span>(step)</div><div class="line">                <span class="keyword">for</span> i, circle := <span class="keyword">range</span> circles &#123;</div><div class="line">                        θ<span class="number">0</span> := <span class="number">2</span> * math.Pi / <span class="number">3</span> * <span class="keyword">float64</span>(i)</div><div class="line">                        circle.X = hw - <span class="number">30</span>*math.Sin(θ<span class="number">0</span>) - <span class="number">30</span>*math.Sin(θ<span class="number">0</span>+θ)</div><div class="line">                        circle.Y = hh - <span class="number">30</span>*math.Cos(θ<span class="number">0</span>) - <span class="number">30</span>*math.Cos(θ<span class="number">0</span>+θ)</div><div class="line">                        circle.R = R</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">for</span> x := <span class="number">0</span>; x &lt; w; x++ &#123;</div><div class="line">                        <span class="keyword">for</span> y := <span class="number">0</span>; y &lt; h; y++ &#123;</div><div class="line">                                cr := circles[<span class="number">0</span>].Brightness(<span class="keyword">float64</span>(x), <span class="keyword">float64</span>(y))</div><div class="line">                                cg := circles[<span class="number">1</span>].Brightness(<span class="keyword">float64</span>(x), <span class="keyword">float64</span>(y))</div><div class="line">                                cb := circles[<span class="number">2</span>].Brightness(<span class="keyword">float64</span>(x), <span class="keyword">float64</span>(y))</div><div class="line">                                <span class="keyword">if</span> cr|cg|cb &gt; <span class="number">0x00</span> &#123;</div><div class="line">                                        img.Set(x, y, color.RGBA&#123;cr, cg, cb, <span class="number">255</span>&#125;)</div><div class="line">                                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                        img.Set(x, y, color.Transparent)</div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把GIF写入文件rgb.gif</span></div><div class="line">        f, err := os.Create(<span class="string">"rgb.gif"</span>)</div><div class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                <span class="built_in">panic</span>(err)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">defer</span> f.Close()</div><div class="line">        gif.EncodeAll(f, &amp;gif.GIF&#123;</div><div class="line">                Image:    images,</div><div class="line">                Delay:    delays,</div><div class="line">                Disposal: disposals,</div><div class="line">        &#125;)</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<blockquote> <a href="https://gist.github.com/linw1995/820b05ac3fbab34937635d30a61740fb#file-rgb-go" target="_blank" rel="external">rgb.go | Gist</a> </blockquote>
<h2 id="多张图片合成GIF">
  <a href="#多张图片合成GIF" class="headerlink" title="多张图片合成GIF"></a>多张图片合成GIF</h2>
<p>若是我们要把多张图片(png, jpeg)转变成<strong>GIF</strong>, 该怎么做呢</p> <img src="/2017/06/06/Use-go-to-manipulate-gif/inputs.png" alt="Inputs" title="Inputs">
<p>比如把以上图片做成动图</p> <img src="/2017/06/06/Use-go-to-manipulate-gif/scriptK.gif" alt="Output" title="Output">
<figure class="highlight go">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">        <span class="string">"fmt"</span></div><div class="line">        <span class="string">"os"</span></div><div class="line">        <span class="string">"regexp"</span></div><div class="line"></div><div class="line">        <span class="string">"image"</span></div><div class="line">        <span class="string">"image/color"</span></div><div class="line">        <span class="string">"image/color/palette"</span></div><div class="line">        <span class="string">"image/draw"</span></div><div class="line">        <span class="string">"image/gif"</span></div><div class="line">        _ <span class="string">"image/png"</span></div><div class="line">        _ <span class="string">"image/jpeg"</span></div><div class="line">        <span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</div><div class="line">                <span class="built_in">panic</span>(fmt.Errorf(<span class="string">"len(os.Args) less than 2"</span>))</div><div class="line">        &#125;</div><div class="line">        format := fmt.Sprintf(<span class="string">"%%0%dd"</span>, <span class="built_in">len</span>(<span class="keyword">string</span>(<span class="built_in">len</span>(os.Args)))+<span class="number">1</span>)</div><div class="line">        <span class="comment">// 216色 + 透明</span></div><div class="line">        palette := <span class="built_in">append</span>(palette.WebSafe, color.Transparent)</div><div class="line">        <span class="keyword">for</span> i, fnFmt := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</div><div class="line">                pattern, err := regexp.Compile(fnFmt)</div><div class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                        <span class="built_in">panic</span>(err)</div><div class="line">                &#125;</div><div class="line">                files, _ := ioutil.ReadDir(<span class="string">"./"</span>)</div><div class="line">                outGif := &amp;gif.GIF&#123;&#125;</div><div class="line">                <span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</div><div class="line">                        <span class="keyword">if</span> pattern.MatchString(file.Name()) &#123;</div><div class="line">                                fmt.Print(<span class="string">"\r"</span>, file.Name())</div><div class="line">                                f, err := os.Open(file.Name())</div><div class="line">                                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                                        <span class="built_in">panic</span>(err)</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">defer</span> f.Close()</div><div class="line"></div><div class="line">                                img, _, err := image.Decode(f)</div><div class="line">                                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                                        <span class="built_in">panic</span>(err)</div><div class="line">                                &#125;</div><div class="line">                                <span class="comment">// 图片格式转换</span></div><div class="line">                                bounds := img.Bounds()</div><div class="line">                                palettedImage := image.NewPaletted(bounds, palette)</div><div class="line">                                draw.Draw(palettedImage, bounds, img, image.ZP, draw.Src)</div><div class="line"></div><div class="line">                                outGif.Image = <span class="built_in">append</span>(outGif.Image, palettedImage)</div><div class="line">                                outGif.Delay = <span class="built_in">append</span>(outGif.Delay, <span class="number">1</span>)</div><div class="line">                                <span class="comment">// outGif.Disposal = append(outGif.Disposal, gif.DisposalPrevious)</span></div><div class="line">                        &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 把GIF写入文件rgb.gif</span></div><div class="line">                f, err := os.Create(fmt.Sprintf(format, i) + <span class="string">".gif"</span>)</div><div class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                        <span class="built_in">panic</span>(err)</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">defer</span> f.Close()</div><div class="line">                gif.EncodeAll(f, outGif)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<blockquote> <a href="https://gist.github.com/linw1995/820b05ac3fbab34937635d30a61740fb#file-img2gif-go" target="_blank" rel="external">img2gif.go | Gist</a> </blockquote>
<h2 id="GIF拆分成一张张图片">
  <a href="#GIF拆分成一张张图片" class="headerlink" title="GIF拆分成一张张图片"></a>GIF拆分成一张张图片</h2>
<figure class="highlight go">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">        <span class="string">"fmt"</span></div><div class="line">        <span class="string">"image"</span></div><div class="line">        <span class="string">"image/draw"</span></div><div class="line">        <span class="string">"image/gif"</span></div><div class="line">        <span class="string">"image/png"</span></div><div class="line">        <span class="string">"os"</span></div><div class="line">        <span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(os.Args) == <span class="number">1</span> &#123;</div><div class="line">                <span class="built_in">panic</span>(fmt.Errorf(<span class="string">"len(os.Args) less than 2"</span>))</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> _, fn := <span class="keyword">range</span> os.Args[<span class="number">1</span>:] &#123;</div><div class="line">                f, err := os.Open(fn)</div><div class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                        <span class="built_in">panic</span>(err)</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">defer</span> f.Close()</div><div class="line"></div><div class="line">                inGif, err := gif.DecodeAll(f)</div><div class="line">                <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                        <span class="built_in">panic</span>(err)</div><div class="line">                &#125;</div><div class="line">                config, _ := gif.DecodeConfig(f)</div><div class="line">                \\ 获取GIF的高宽</div><div class="line">                rect := image.Rect(<span class="number">0</span>, <span class="number">0</span>, config.Width, config.Height)</div><div class="line">                <span class="keyword">if</span> rect.Min == rect.Max &#123;</div><div class="line">                        <span class="keyword">var</span> max image.Point</div><div class="line">                        <span class="keyword">for</span> _, frame := <span class="keyword">range</span> inGif.Image &#123;</div><div class="line">                                maxF := frame.Bounds().Max</div><div class="line">                                <span class="keyword">if</span> max.X &lt; maxF.X &#123;</div><div class="line">                                        max.X = maxF.X</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> max.Y &lt; maxF.Y &#123;</div><div class="line">                                        max.Y = maxF.Y</div><div class="line">                                &#125;</div><div class="line">                        &#125;</div><div class="line">                        rect.Max = max</div><div class="line">                &#125;</div><div class="line">                format := fmt.Sprintf(<span class="string">"%%0%dd"</span>, <span class="built_in">len</span>(<span class="keyword">string</span>(<span class="built_in">len</span>(inGif.Image)))+<span class="number">1</span>)</div><div class="line">                <span class="keyword">for</span> i, srcimg := <span class="keyword">range</span> inGif.Image &#123;</div><div class="line">                        img := image.NewRGBA(rect)</div><div class="line">                        subfn := strings.Split(fn, <span class="string">"."</span>)[<span class="number">0</span>] + fmt.Sprintf(format, i) + <span class="string">".png"</span></div><div class="line">                        f, err := os.Create(subfn)</div><div class="line">                        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">                                <span class="built_in">panic</span>(err)</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">defer</span> f.Close(</div><div class="line">                        draw.Draw(img, srcimg.Bounds(), srcimg, srcimg.Rect.Min, draw.Src)</div><div class="line">                        fmt.Printf(<span class="string">"\r%s"</span>, subfn)</div><div class="line">                        png.Encode(f, img)</div><div class="line">                &#125;</div><div class="line">                fmt.Println(<span class="string">"\r"</span>, fn)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<blockquote> <a href="https://gist.github.com/linw1995/820b05ac3fbab34937635d30a61740fb#file-gif2png-go" target="_blank" rel="external">gif2png.go | Gist</a> </blockquote>
<h2 id="代码解析">
  <a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2>
<ul>
  <li><code>func Draw(dst Image, r image.Rectangle, src image.Image, sp image.Point, op Op)</code><br>是<code>&quot;image/draw&quot;</code>包中的一个函数，作用是把scr图以sp点起点开始的区域，根据op修改后，覆盖到dst图的r区域上。<br>在以上的代码中作用是图像格式转换，GIF拆分子图。</li>
  <li><code>draw.Src</code> 是<code>&quot;image/draw&quot;</code>包中的一个常量，代表操作：源图像透过遮罩后，替换掉目标图像。<br><code>draw.Over</code> 代表操作：源图像透过遮罩后，覆盖在目标图像上（类似图层）。</li>
  <li><code>image.ZP</code> 为<code>&quot;image&quot;</code>包中的一个常量，代表图片原点位置</li>
</ul>
<h2 id="Gallery">
  <a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h2>
<p>无聊时随便搞得几个动图</p> <img src="/2017/06/06/Use-go-to-manipulate-gif/AnimationExample01.gif" alt="&nbsp;" title="&nbsp;"> <img src="/2017/06/06/Use-go-to-manipulate-gif/AnimationExample02.gif" alt="&nbsp;" title="&nbsp;">
<h2 id="参考">
  <a href="#参考" class="headerlink" title="参考"></a>参考</h2>
<blockquote class="pullquote">
  <ul>
    <li><a href="https://blog.golang.org/go-imagedraw-package" target="_blank" rel="external">The Go image/draw package | The Go Blog</a></li>
  </ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/06/06/Use-go-to-manipulate-gif/rgb.gif&quot; alt=&quot;用Go制作动图GIF&quot; title=&quot;用Go制作动图GIF&quot;&gt;
    
    </summary>
    
      <category term="Go" scheme="http://linw1995.com/categories/Go/"/>
    
    
      <category term="Go" scheme="http://linw1995.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>蒙特卡洛方法及应用</title>
    <link href="http://linw1995.com/2017/05/21/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%96%B9%E6%B3%95%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <id>http://linw1995.com/2017/05/21/蒙特卡洛方法及应用/</id>
    <published>2017-05-20T19:03:20.000Z</published>
    <updated>2017-06-01T14:42:55.878Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
  <p>蒙特卡洛方法（英语：Monte Carlo method），也称统计模拟方法，是1940年代中期由于科学技术的发展和电子计算机的发明，而提出的一种以概率统计理论为指导的数值计算方法。是指使用随机数（或更常见的伪随机数）来解决很多计算问题的方法。<br>20世纪40年代，在冯·诺伊曼，斯塔尼斯拉夫·乌拉姆和尼古拉斯·梅特罗波利斯在洛斯阿拉莫斯国家实验室为核武器计划工作时，发明了蒙特卡洛方法。因为乌拉姆的叔叔经常在摩纳哥的蒙特卡洛赌场输钱得名，而蒙特卡罗方法正是以概率为基础的方法。<br>与它对应的是确定性算法。<br>蒙特卡洛方法在金融工程学，宏观经济学，生物医学，计算物理学（如粒子输运计算、量子热力学计算、空气动力学计算）等领域应用广泛。</p>
  <footer><strong>蒙特卡罗方法</strong><cite><a href="https://zh.wikipedia.org/wiki/%E8%92%99%E5%9C%B0%E5%8D%A1%E7%BE%85%E6%96%B9%E6%B3%95#firstHeading" target="_blank" rel="external">Wikipedia</a></cite></footer>
</blockquote>
<h2 id="基本思想">
  <a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2>
<p>把所求解的问题转换为某种随机分布的特征数，例如随机事件出现的概率，或者随机变量的期望值。通过随机抽样的方法，以随机事件出现的频率估计其概率，或者一抽样的数字特征估算随机变量的数学特征，并将其作为问题的解。</p>
<h2 id="应用">
  <a href="#应用" class="headerlink" title="应用"></a>应用</h2>
<h3 id="求解圆周率">
  <a href="#求解圆周率" class="headerlink" title="求解圆周率"></a>求解圆周率</h3><img src="/2017/05/21/蒙特卡洛方法及应用/pi.gif" alt="圆周率求解" title="圆周率求解">
<p>圆形的面积为$A_s=\pi r^2$，正方形的面积为$A_q=(2r)^2$, 则产生一对随机数$(x_i, y_i)$落在圆内的概率为：<br>$$<br>p=\frac{A_s}{A_q}=\frac{\pi r^2}{(2r)^2}=\frac{\pi}{4}<br>$$<br>只要不断产生一对对随机数$(x_i, y_i)$，由于<strong>大数法则（Law of large numbers）</strong>，能以随机事件（落在圆内）出现的频率估计其概率，再求解$\pi$。</p>
<img src="/2017/05/21/蒙特卡洛方法及应用/pi.png" alt="误差与随机抽样次数的关系" title="误差与随机抽样次数的关系">
<blockquote>
  <p>代码<br><a href="https://gist.github.com/linw1995/28d70604f8d430177fd0496ae15eb763" target="_blank" rel="external">Gist | Monte Carlo method applied to approximating the value of π.</a></p>
</blockquote>
<h3 id="计算定积分">
  <a href="#计算定积分" class="headerlink" title="计算定积分"></a>计算定积分</h3>
<p>假设我们要求解$f(x)=x^2$在$[0, 2]$间的积分，即下图函数曲线与$x$轴围成的面积</p> <img src="/2017/05/21/蒙特卡洛方法及应用/x2.png" alt="$f(x)=x^2$在$[0, 2]$间的积分" title="$f(x)=x^2$在$[0, 2]$间的积分">
<p>其实，求解圆周率其实是在求函数$f(x)=\sqrt{1 - x^2}$在区间$[0, 1]$上的积分。</p>
<h4 id="偶然命中法">
  <a href="#偶然命中法" class="headerlink" title="偶然命中法"></a>偶然命中法</h4>
<p>像求解圆周率那样，只要求解出一对随机数$(x_i,y_i),x_i\in[0,2],y_i\in[0,4]$落在曲线下方的概率，即可求出$f(x)=x^2$在$[0, 2]$间的积分结果。<br>$$H(x, y)=\begin{cases}<br>1\qquad&amp;if\quad y \le f(x) \\<br>0 &amp;else<br>\end{cases}\\<br>F_n=A \frac{1}{n} \sum^{n}_{i=1} H(x_i,y_i) = h(b-a) \frac{1}{n}\sum^{n}_{i=1}
  H(x_i,y_i)<br>$$</p>
<h4 id="抽样平均法">
  <a href="#抽样平均法" class="headerlink" title="抽样平均法"></a>抽样平均法</h4>
<p>还有另外一种蒙特卡罗积分方法是基于计算的平均值理论，即函数的积分结果取决被积函数$f(x)$在$a\le x\le b$的平均值。为了确定这个平均值，用随机的$x_i$来取代规律的$x_i$，抽样平均值方法的积分估计值$F_n$为：<br>$$<br>F_n=(b-a)\left\lt f\right\gt=\frac{b-a}{n}\sum^n_{i=1}f(x_i)<br>$$</p>
<h4 id="计算高维定积分">
  <a href="#计算高维定积分" class="headerlink" title="计算高维定积分"></a>计算高维定积分</h4>
<p>高维定积分的解析解<br>$\displaystyle \quad<br>I = \int_{ \Omega } f(\overline{x}) d\overline{x}<br>$<br>其中$\Omega$，是$\mathbb{ R }^m$的子集，拥有体积<br>$\displaystyle \quad<br>V = \int_{ \Omega } d\overline{x}<br>$<br>一般的MC方式是从$\Omega$的均匀分布中获取长度为$N$的随机数序列<br>$\displaystyle
  \quad<br>\overline{x_1},\overline{x_2},\cdots,\overline{x_N} \in \Omega<br>$<br>$N$越大，$I$的值就能被越精确地估计出来<br>$\displaystyle \quad<br>I \approx Q_N \equiv V\left\lt f \right\gt = V \frac{1}{N} \sum^N_{i=1} f(\overline{x_i})<br>$<br>由于<strong>大数法则（Law of large numbers）</strong>，则<br>$\displaystyle
  \quad<br>\lim_{N \to \infty} Q_N = I<br>$</p>
<blockquote>
  <p>高维定积分可参考<a href="#误差分析">误差分析</a></p>
</blockquote>
<p>所以用蒙特卡罗方法计算高维定积分是可行</p>
<h3 id="调制随机数-Metropolis–Hastings算法">
  <a href="#调制随机数-Metropolis–Hastings算法" class="headerlink" title="调制随机数(Metropolis–Hastings算法)"></a>调制随机数(Metropolis–Hastings算法)</h3>
<p>在1953年Nicholas Metropolis, Arianna W. Rosenbluth, Marshall N. Rosenbluth, Augusta H. Teller, 和 Edward Teller提出了产生任意的非均匀分布的另外一个方法。在1970年被 W. K. Hastings 扩展到更普遍的情况，所以该算法被称作<strong>Metropolis–Hastings采样算法</strong>。该算法整个过程形成一个马尔科夫链(MCMC)。</p>
<p>我们常见的概率分布，无论是连续还是离散的分布，都可以基于均匀分布的样本来生成。无论是正态分布、指数分布等等，都可以用数学变换来得到。可当$p(x)$的形式很复杂，或者$p(x)$是一个高维的分布的时候，就很难生成符合该分布的样本了。<strong>而Metropolis-Hastings采样算法解决了这个问题，给定一个概率分布函数，即可生成符合这一概率分布的样本。</strong></p>
<p>要想明白<strong>Metropolis–Hastings采样算法</strong>，就想要明白<strong>马尔可夫链（Markov Chain）</strong>及<strong>马尔可夫收敛定理（Markov Convergence Theore）</strong>。</p>
<h4 id="马尔可夫链（Markov-Chain）">
  <a href="#马尔可夫链（Markov-Chain）" class="headerlink" title="马尔可夫链（Markov Chain）"></a>马尔可夫链（Markov Chain）</h4>
<p>先举个简单的例子，马拉松比赛跑者众多，几万人跑步。假设一万个人一起出发，分为三个梯队，第一梯队1k个人，第二2k个人，第三7k个人。<br>这三个梯队间的转移概率如下<br>$$<br>\begin{array}{c|ccc}<br>状态 &amp; 第一梯队 &amp; 第二梯队 &amp; 第三梯队 \\<br>\hline<br>第一梯队 &amp; 0.65 &amp; 0.30 &amp; 0.05 \\<br>第二梯队 &amp; 0.15 &amp; 0.60 &amp; 0.25
  \\<br>第三梯队 &amp; 0.20 &amp; 0.10 &amp; 0.70<br>\end{array}<br>$$<br>使用矩阵来表示，概率转移矩阵如下：<br>$$<br>P = \begin{bmatrix}<br>0.65 &amp; 0.30 &amp; 0.05 \\<br>0.15 &amp; 0.60 &amp; 0.25 \\<br>0.30 &amp; 0.40 &amp; 0.30 \\<br>\end{bmatrix}<br>$$<br>假如这一刻的梯队分布为$\pi_0=\begin{bmatrix}\pi_0(0)&amp;\pi_0(1)&amp;\pi_0(2)\end{bmatrix}$，那么下一刻的分布矩阵将是$\pi_1=\pi_0P$，下下一刻的分布矩阵将是$\pi_2=\pi_1P=\pi_0P^2$，…，第$n$刻的分布矩阵将是$\pi_n=\pi_0P^n$。</p>
<p>初始分布矩阵为$\pi_0=\begin{bmatrix}1.00k&amp;2.00k&amp;7.00k\end{bmatrix}$，则可以计算前n刻的分布情况<br>$$<br>\begin{array}{c|ccc}<br>第n刻 &amp; 第一梯队 &amp; 第二梯队 &amp; 第三梯队 \\<br>\hline<br>0 &amp; 1.00k &amp; 2.00k &amp; 7.00k \\<br>1 &amp; 3.05k &amp; 4.30k &amp; 2.65k
  \\<br>2 &amp; 3.42k &amp; 4.55k &amp; 2.02k \\<br>3 &amp; 3.51k &amp; 4.57k &amp; 1.92k \\<br>4 &amp; 3.54k &amp; 4.56k &amp; 1.89k \\<br>5 &amp; 3.56k &amp; 4.56k &amp; 1.89k \\<br>6 &amp; 3.56k &amp; 4.56k &amp; 1.88k \\<br>7 &amp; 3.56k &amp; 4.56k
  &amp; 1.88k \\<br>8 &amp; 3.56k &amp; 4.55k &amp; 1.88k \\<br>\dots &amp; \dots &amp; \dots &amp; \dots<br>\end{array}<br>$$<br>可以发现从第7刻开始，分布矩阵几乎就稳定不变了。这是怎么回事？换个初始分布矩阵$\pi_0=\begin{bmatrix}3.00k&amp;4.00k&amp;3.00k\end{bmatrix}$试试<br>$$<br>\begin{array}{c|ccc}<br>第n刻
  &amp; 第一梯队 &amp; 第二梯队 &amp; 第三梯队 \\<br>\hline<br>0 &amp; 3.00k &amp; 4.00k &amp; 3.00k \\<br>1 &amp; 3.45k &amp; 4.50k &amp; 2.05k \\<br>2 &amp; 3.53k &amp; 4.55k &amp; 1.91k \\<br>3 &amp; 3.55k &amp; 4.56k &amp; 1.89k \\<br>4 &amp; 3.56k &amp; 4.56k
  &amp; 1.88k \\<br>5 &amp; 3.56k &amp; 4.56k &amp; 1.88k \\<br>6 &amp; 3.56k &amp; 4.55k &amp; 1.88k \\<br>\dots &amp; \dots &amp; \dots &amp; \dots<br>\end{array}<br>$$<br>这次在第6刻就开始稳定不变了，而且两次给定不同的初始分布矩阵，最终都收敛到概率分布$\pi \times 10k=\begin{bmatrix}0.356&amp;0.455&amp;0.188\end{bmatrix}
  \times 10k$, 而且第二次收敛的速度更快，这是为什么呢？这说明收敛的行为和初始分布$\pi_0$无关，而与概率转移矩阵$P$决定的。第二次收敛更快是因为初始分布比第一次更接近收敛后的分布矩阵。<br>$$<br>P^5 = P^6 = \cdots = P^n= \begin{bmatrix}<br>0.356 &amp; 0.455 &amp; 0.188 \\<br>0.356 &amp; 0.455 &amp; 0.188 \\<br>0.356 &amp; 0.455 &amp;
  0.188 \\<br>\end{bmatrix}<br>$$<br>显而易见，当$n$足够大时，转移矩阵的每一行都会收敛到$\pi=\begin{bmatrix}0.356 &amp; 0.455 &amp; 0.188\end{bmatrix}$。</p>
<h4 id="马尔可夫收敛定理（Markov-Convergence-Theore）">
  <a href="#马尔可夫收敛定理（Markov-Convergence-Theore）" class="headerlink" title="马尔可夫收敛定理（Markov Convergence Theore）"></a>马尔可夫收敛定理（Markov Convergence Theore）</h4>
<p>如果一个非周期马氏链具有转移概率矩阵$P$，且它的任何两个状态是联通的，那么$\displaystyle \lim_{n\to\infty}P^n_{ij}$存在且与$i$无关，即$\displaystyle \lim_{n\to\infty}P^n_{ij}=\pi(j)$</p>
<ol>
  <li>$\displaystyle<br> \lim_{n \rightarrow \infty} P^n =\begin{bmatrix}<br> \pi(0) &amp; \pi(1) &amp; \cdots &amp; \pi(j) &amp; \cdots \\<br> \pi(0) &amp; \pi(1) &amp; \cdots &amp; \pi(j) &amp; \cdots \\<br> \cdots &amp; \cdots &amp; \cdots &amp; \cdots
    &amp; \cdots \\<br> \pi(0) &amp; \pi(1) &amp; \cdots &amp; \pi(j) &amp; \cdots \\<br> \cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots \\<br> \end{bmatrix}<br> $</li>
  <li>$\displaystyle \pi(j) = \sum_{i=0}^{\infty}\pi(i)P_{ij}$</li>
  <li>$\pi$是方程$\pi P=\pi$的唯一非负解</li>
</ol>
<p>其中，$$<br>\pi = \begin{bmatrix}\pi(0) &amp; \pi(1) &amp; \cdots &amp; \pi(j) &amp; \cdots\end{bmatrix}, \quad \sum_{i=0}^{\infty} \pi_i = 1<br>$$$\pi$称为马氏链的平稳分布。</p>
<p><strong>所有MCMC(Markov Chain Monte Carlo)方法都是以这个收敛定理作为理论基础的。</strong>下列是对定理内容的一些解释说明：</p>
<ol>
  <li>该定理中马氏链的状态不要求有限，可以是无穷多个的。</li>
  <li>两个状态$i,j$是联通的，并非指直接一步即可从$i$转移到$j$($P_{ij}\gt0$)，而是值$i$与$j$之间可以通过有限步$n$转移到达($P_{ij}^n\gt0$)。<br> 马氏链的任何两个状态<strong>联通</strong>是指存在一个$n$，使得$\forall i,\forall j,\quad P^n_{ij} \gt 0$。</li>
  <li>我们用$X_i$表示在马氏链上跳转第$i$步后所处的状态，如果$\displaystyle \lim_{n\to\infty}P^n_{ij}=\pi(j)$存在，即可证明以上定理的第二个结论。<br> $<br> \begin{align}<br> P(X_{n+1}=j)&amp;=\sum^\infty_{i=0}P(X_n=i)P(X_{n+1}=j\mid X_n=i) \\<br> &amp;=\sum^\infty_{i=0}P(X_n=i)P_{ij}<br> \end{align}<br>    $<br> 两边同时对$n$取极限可得，$\displaystyle \pi(j) = \sum_{i=0}^{\infty}\pi(i)P_{ij}$。</li>
</ol>
<p><strong>可以利用MC的平稳分布，来生成符合某些难以生成的概率分布的随机数。</strong>从初始概率分布$\pi_0$出发，每一次在马氏链上做状态转移时，记$X_i$的概率分布为$\pi_i$，则有：<br>$$<br>\begin{align}<br>&amp;X_0\sim\pi_0(x) \\<br>&amp;X_i\sim\pi_i(x), \quad \pi_i(x)=\pi_{i-1}(x)P=\pi_0(x)P^n<br>\end{align}<br>$$<br>由于<strong>马尔可夫收敛定理（Markov Convergence Theore）</strong>，概率分布$\pi_i(x)$将收敛到平稳分布$\pi(x)$。假设到第$n$的时候马氏链收敛，则有：<br>$$<br>\begin{align}<br>X_0
  &amp; \sim \pi_0(x) \\<br>X_1 &amp; \sim \pi_1(x) \\<br>&amp; \cdots \\<br>X_n &amp; \sim \pi_n(x)=\pi(x) \\<br>X_{n+1} &amp; \sim \pi(x) \\<br>X_{n+2}&amp; \sim \pi(x) \\<br>&amp; \cdots<br>\end{align}<br>$$<br>所以$X_n,X_{n+1},X_{n+2},\cdots \sim \pi(x)$都是同分布的随机变量,
  当然他们并不独立。如果我们从一个具体的初始状态$x_0$开始,沿着马氏链按照概率转移矩阵做跳转，那么我们得到一个转移序列$x_0, x_1, x_2, \cdots x_n, x_{n+1}\cdots$，由于马氏链的收敛行为，$x_n, x_{n+1},\cdots$都将是平稳分布$\pi(x)$的样本。</p>
<h4 id="Metropolis-Hastings采样算法">
  <a href="#Metropolis-Hastings采样算法" class="headerlink" title="Metropolis-Hastings采样算法"></a>Metropolis-Hastings采样算法</h4>
<p>结合蒙特卡罗方法，构造概率转移矩阵，使得马尔可夫链的平稳分布恰好符合我们想要的分布$P(x)$。这个方式被称作<strong>马尔科夫蒙特卡洛（MCMC|Markov Chain Monte Carlo）方法</strong>，而<strong>Metropolis-Hastings采样算法</strong>为其中的一种常用的改进算法。</p>
<p>如果非周期马氏链的转移矩阵$P$和分布$\pi(x)$满足<br>$$<br>\pi(i)P_{ij}=\pi(j)P_{ji},\quad \forall i,\forall j \tag{一}\label{0}<br>$$<br>则$\pi(x)$是马氏链的平稳分布，上式被称为<strong>细致平稳条件(detailed balance condition)</strong>。</p>
<p>其实这个定理是显而易见的，因为<strong>细致平稳条件</strong>$\eqref{0}$的物理含义就是，对于任何两个状态$i,j$，从$i$转移出去到$j$而丢失的的概率质量，恰好会被从$j$转移回$i$的概率质量补充回来，所以状态$i$上的概率质量$\pi(i)$是稳定的，即$\pi(x)$是马氏链的平稳分布。</p>
<p>由<strong>细致平稳条件</strong>$\eqref{0}$可得<br>$$<br>\begin{align}<br>&amp; \sum_{i=1}^\infty \pi(i)P_{ij} = \sum_{i=1}^\infty \pi(j)P_{ji}<br>= \pi(j) \sum_{i=1}^\infty P_{ji} = \pi(j) \\<br> \implies \quad &amp;\pi P = \pi<br>\end{align}<br>$$<br>由于$\pi$是方程$\pi
  P=\pi$的解，所以$\pi$是平稳分布。</p>
<p>假设我们已经有一个转移矩阵为$Q$的马氏链，显然未收敛时，有<br>$$<br>p(i)q(i,j)\neq p(j)q(j,i)<br>$$<br>其中$q(i,j)$表示从状态$i$转移到状态$j$的概率，也可写作$q(j|i)$或者$q(i\to j)$。<br>上式不满足<strong>细致平稳条件</strong>$\eqref{0}$，所以$p(x)$不可能是这个马氏链的平稳分布。如果我们对马氏链进行改造，使得<strong>细致平稳条件</strong>$\eqref{0}$成立？尝试引入一个$\alpha(i,j)$，使得两边相等<br>$$<br>p(i)q(i,j)\alpha(i,j)=p(j)q(j,i)\alpha(j,i)
  \tag{二}\label{1}<br>$$<br>我们称$\alpha(i,j)$为接受率，按照对称性，得<br>$$<br>\alpha(i,j)= p(j) q(j,i) \\<br>\alpha(j,i) = p(i) q(i,j)<br>$$<br>所以$\eqref{1}$就成立了，所以有<br>$$<br>p(i) \underbrace{q(i,j)\alpha(i,j)}_{Q’(i,j)}<br>= p(j) \underbrace{q(j,i)\alpha(j,i)}_{Q’(j,i)}
  \tag{三}\label{2}<br>$$<br>这样就把原来的转移矩阵$Q$的马氏链，改造成一个具有新的转移矩阵$Q’$的马氏链,而$Q’$恰好满足<strong>细致平稳条件</strong>$\eqref{0}$，这样$p(x)$就是这个马氏链$Q’$的平稳分布。<br>$$<br>\require{AMScd}<br>\begin{CD}<br>\cdots @&gt;&gt;&gt; x_i @&gt;q(i,j)&gt;&gt; x_j @&gt;&gt;&gt; \cdots
  \\<br>\\<br>@. \begin{matrix}1-\alpha(i,j) \\ 拒绝转移\end{matrix} @. \begin{matrix}\alpha(i,j) \\ 接受转移\end{matrix}<br>\end{CD}<br>$$<br>接受率可以这么理解，当马氏链从状态$i$以$q(i,j)$的概率跳转到状态$j$时，以$\alpha(i,j)$的概率去接受这个转移，那么马氏链新的转移概率为两者的乘积$q(i,j)\alpha(i,j)$。</p>
<p>假设我们已经拥有了一个转移矩阵$Q$，把上面的过程整理一下，我们就得到了如下的用于产生符合概率分布$p(x)$的随机数算法。<br>$$<br>\begin{array}{l}<br>MCMC 采样算法 \\<br>\hline<br>1. 初始化马氏链初始状态X_0=x_0 \\<br>2. 对于t=0,1,2,\cdots，循环以下过程进行采样 \\<br>\qquad \bullet \quad 第t个时刻马氏链状态为X_t=x_t，采样y\sim q(x,x_t) \\<br>\qquad
  \bullet \quad 从均匀分布采样u\sim Uniform(0,1) \\<br>\qquad \bullet \quad 如果u \lt \alpha(x_t,y) = p(y)q(x_t,y)则接受转移x_t \to y,即X_{t+1} = y \\<br>\qquad \bullet \quad 否则不接受转移，即X_{t+1}=x_t \\<br>\end{array}<br>$$<br>上述过程中$p(x)$，$q(x,y)$说的都是离散的情况，实际上即便是连续的，以上算法仍然有效。</p>
<p>以上MCMC采样算法还有个小问题，转移过程中若是$\alpha(i,j)$偏小（毕竟是两个分布$p(x)$和$q(x,y)$的乘积），而$u \sim Uniform(0,1)$难以小于$\alpha(i,j)$，这样算法过程中马氏链容易原地踏步，拒绝大量转移，这使得收敛到平稳分布$p(x)$的速度太慢。那如何提高接受率，加快收敛速度？</p>
<p>假设$\alpha(i,j)=0.1,\alpha(j,i)=0.2$，此时满足<strong>细致平稳条件</strong>$\eqref{0}$，于是<br>$$<br>p(i)q(i,j)\times 0.1 = p(j)q(j,i) \times 0.2<br>$$<br>上式两边同时扩大5倍<br>$$<br>p(i)q(i,j)\times 0.5 = p(j)q(j,i) \times 1<br>$$<br>这样我们把$\alpha(j,i)$提高到$1$，那么从状态$i$到$j$必然会转移，而且<strong>细致平稳条件</strong>$\eqref{0}$没有被打破！这启发我们可以把<strong>细致平稳条件</strong>$\eqref{2}$式中的$\alpha(i,j)$，$\alpha(j,i)$同比例放大，使得两者中最大一个放大到$1$，这样我们就提高了算法中转移的接受率，加快收敛速度。<br>$$<br>\alpha(i,j)
  = \min \left\{ \frac{p(j)q(j,i)}{p(i)q(i,j)} , 1 \right\}<br>$$<br>于是对上述MCMC采样算法改造，我们就得到了<strong>Metropolis-Hastings算法</strong><br>$$<br>\begin{array}{l}<br>\text{Metropolis-Hastings 采样算法} \\<br>\hline<br>1. 初始化马氏链初始状态X_0=x_0 \\<br>2. 对于t=0,1,2,\cdots，循环以下过程进行采样
  \\<br>\qquad \bullet \quad 第t个时刻马氏链状态为X_t=x_t，采样y\sim q(x,x_t) \\<br>\qquad \bullet \quad 从均匀分布采样u\sim Uniform(0,1) \\<br>\qquad \bullet \quad 如果u \lt \alpha(x_t,y) = \min\left\{\frac{p(j)q(j,i)}{p(i)q(i,j)},1\right\}则接受转移x_t \to y,即X_{t+1} = y \\<br>\qquad
  \bullet \quad 否则不接受转移，即X_{t+1}=x_t \\<br>\end{array}<br>$$</p>
<blockquote>
  <p>代码<br><a href="https://gist.github.com/linw1995/b078c9cebd7f01aa7bfb46de8c6a8a04" target="_blank" rel="external">Gist | Metropolis-Hasting Algorithm</a></p>
</blockquote> <img src="/2017/05/21/蒙特卡洛方法及应用/normal-distribution.png" alt="正态分布" title="正态分布"> <img src="/2017/05/21/蒙特卡洛方法及应用/two-dimemsion-somekind-distribution.png" alt="某种二维分布" title="某种二维分布">
<h2 id="误差分析">
  <a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h2>
<p>蒙特卡罗方法，只是用随机数来解决很多问题的方法统称。无法提出一个对所有蒙特卡罗方法进行误差分析的方法，只能具体问题具体分析。</p>
<p>比如用MC方法求解$\pi$的数值，用计算定积分的方式计算，也就是计算函数$f(x)=\sqrt{1 - x^2}$在区间$[0, 1]$上的积分。对于一次实验产生的$10^4$随机数的序列，用抽样平均法$\displaystyle F_N=V \frac{1}{N} \sum ^N _{i=1} f(x_i)=V\left\lt f \right\gt$可得$F_N=3.1489$。与准确结果比较，可以发现，这次试验结果误差大约是$0.0073$。</p>
<p>当然这只是一次实验的误差，没有什么说服力，若是计算随机数序列整体结果的方差<br>$$<br>\operatorname{Var}(f)=\sigma_N^2 = \left\lt f^2 \right\gt - \left\lt f \right\gt^2 \\<br>其中，\left\lt f \right\gt = \frac{1}{N}\sum^N_{i=1}f(x_i)，\left\lt f^2 \right\gt = \frac{1}{N}\sum^N_{i=1}f^2(x_i)$$<br>那么积分结果的方差为:<br>$$\operatorname{Var}(F)=\sigma^2=
  \frac{V^2}{N^2} \sum ^N _{i=1} \operatorname{Var}(f)=V^2 \frac{\sigma_N^2}{N}<br>$$<br>按照上式计算，结果如下方左图所示<br>$$<br>\begin{array}{c|ccc}<br>n &amp; \sigma &amp; \sigma_N &amp; F_N &amp; | F_n - \pi | \\<br>\hline<br>10^1 &amp; 1.0407 \times 10^{-1} &amp;
  8.2278 \times 10^{-2} &amp; 3.339699 &amp; 0.198106 \\<br>10^2 &amp; 1.7298 \times 10^{-2} &amp; 4.3244 \times 10^{-2} &amp; 3.190591 &amp; 0.048999 \\<br>10^3 &amp; 2.0576 \times 10^{-3} &amp; 1.6267 \times 10^{-2} &amp; 3.175076 &amp; 0.033483 \\<br>10^4
  &amp; 2.2095 \times 10^{-4} &amp; 5.5236 \times 10^{-3} &amp; 3.155933 &amp; 0.014341 \\<br>10^5 &amp; 2.5398 \times 10^{-5} &amp; 2.0079 \times 10^{-3} &amp; 3.145450 &amp; 0.003858 \\<br>10^6 &amp; 3.4241 \times 10^{-6} &amp; 8.5602 \times 10^{-4}
  &amp; 3.142984 &amp; 0.001391 \\<br>10^7 &amp; 4.9500 \times 10^{-7} &amp; 3.9133 \times 10^{-4} &amp; 3.141403 &amp; 0.000189 \\<br>10^8 &amp; 5.0821 \times 10^{-8} &amp; 1.2705 \times 10^{-4} &amp; 3.141461 &amp; 0.000132 \\<br>10^9 &amp; 5.0482 \times
  10^{-9} &amp; 3.9909 \times 10^{-5} &amp; 3.141595 &amp; 0.000002 \\<br>\cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots<br>\end{array}<br>$$</p>
<p>可以很明显地看出，$\sigma$随着$N$的增大而减少。除了一味的增加$N$来降低误差，还有别的什么方法吗？接下来讲的两种方法从一定程度上降低了误差。</p>
<h3 id="递归分层抽样（Recursive-stratified-sampling）">
  <a href="#递归分层抽样（Recursive-stratified-sampling）" class="headerlink" title="递归分层抽样（Recursive stratified sampling）"></a>递归分层抽样（Recursive stratified sampling）</h3>
<p>递归分层抽样过程的是：在每个递归步骤中，使用普通蒙特卡罗算法估计积分和误差。当如果误差估计大于所需精度，则其积分区域被分割为子集，并且把算法重新应用于子集中。<br>分层采样算法将采样点集中在函数方差最大的区域，从而减小大差异，使抽样更有效。该思路最热门的实现是<strong>MISER算法</strong>。</p> <img src="/2017/05/21/蒙特卡洛方法及应用/miser.png" alt="$利用MISER\ Monte\ Carlo求解\pi$" title="$利用MISER\ Monte\ Carlo求解\pi$">
<p>上图是用<strong>MISER算法</strong>求解$\pi$的采样点分布图。可以看出采样点形成了弧状轮廓。<br>$$<br>H(x, y)=\begin{cases}1, \quad &amp;if\ x^2+y^2 \le 1 \\0, &amp;else \end{cases}\quad x,y\in [0,1) \\<br>F_n=A \frac{1}{n} \sum^{n}_{i=1} H(x_i,y_i) = \frac{1}{n}\sum^{n}_{i=1} H(x_i,y_i)<br>$$<br>这是因为在曲线$y=\sqrt{1-x^2}$附近是方差最大的区域，所以采样点几乎都集中在此曲线附近。</p>
<p>$$<br>\begin{array}{c|cccc}<br>n &amp; n_{Real} &amp; \sigma &amp; \sigma_N &amp; F_N &amp; | F_n - \pi | \\<br>\hline<br>10^{3} &amp; 523 &amp; 5.1189 \times 10^{-3} &amp; 4.0468 \times 10^{-2} &amp; 3.195360 &amp; 0.053767 \\<br>10^{4} &amp; 2757 &amp;
  2.2615 \times 10^{-4} &amp; 5.6537 \times 10^{-3} &amp; 3.140075 &amp; 0.001518 \\<br>10^{5} &amp; 15964 &amp; 1.2168 \times 10^{-5} &amp; 9.6193 \times 10^{-4} &amp; 3.140571 &amp; 0.001022 \\<br>10^{6} &amp; 92098 &amp; 2.2333 \times 10^{-7} &amp;
  5.5832 \times 10^{-5} &amp; 3.141635 &amp; 0.000042 \\<br>10^{7} &amp; 522175 &amp; 7.3403 \times 10^{-8} &amp; 5.8030 \times 10^{-5} &amp; 3.141666 &amp; 0.000073 \\<br>10^{8} &amp; 2969563 &amp; 3.7979 \times 10^{-10} &amp; 9.4949 \times 10^{-7} &amp;
  3.141599 &amp; 0.000006 \\<br>\cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots &amp; \cdots<br>\end{array}<br>$$</p>
<p>对比之前获得的结果，发现<strong>MISER算法</strong>能用更少的采样点获取到更小的$\sigma$。这样既提高了精度，又减少了所需要的计算时间。</p>
<blockquote>
  <p>代码<br><a href="https://gist.github.com/linw1995/28d70604f8d430177fd0496ae15eb763" target="_blank" rel="external">Gist | Monte Carlo method applied to approximating the value of π.</a></p>
</blockquote>
<h3 id="重要抽样法（Importance-sampling）">
  <a href="#重要抽样法（Importance-sampling）" class="headerlink" title="重要抽样法（Importance sampling）"></a>重要抽样法（Importance sampling）</h3>
<p>重要抽样法是一个能很好地提高蒙特卡罗积分算法精度的方法，即减少方差$\sigma^2$值。<br>做法是，在积分函数中引入一个整函数$p(x)$，则其应满足<br>$$<br>\int^b_{b} p(x)dx = 1<br>$$<br>那么积分函数转变成<br>$$<br>I = \int^a_{b}\left[\frac{f(x)}{p(x)}\right]p(x)dx<br>$$<br>那么积分的估计值$F_n$为<br>$$<br>F_n=\frac{1}{n}\sum^n_{i=1}\frac{f(x_i)}{p(x_i)}<br>$$<br>对于均匀分布的情况$p(x)=\frac{1}{b-a}$<br>$$<br>F_n=\frac{b-a}{n}\sum^n_{i=1}f(x_i)<br>$$<br>这就是一般的蒙特卡罗积分方式，而我们的目的是选择一个$p(x)$使得被积分函数$\frac{f(x)}{p(x)}$的方差最小。<br>比如，我们要求$\displaystyle
  \int^1_0 e^{-x^2} dx$，比较合理的选择是$p(x)=Ae^{-x}$，其中$A$为归一化常数。</p>
<p>$$<br>\begin{array}{ccc}<br>p(x)=\frac{1}{b-a}=1 &amp; \quad &amp; p(x)=Ae^{-x}<br>\\<br>\begin{array}{c|cc}<br>n &amp; \sigma &amp; \sigma_N \\<br>\hline<br>10^{1} &amp; 3.6575 \times 10^{-2} &amp; 1.1566 \times 10^{-1} \\<br>10^{2} &amp; 4.0660 \times
  10^{-3} &amp; 4.0660 \times 10^{-2} \\<br>10^{3} &amp; 4.4666 \times 10^{-4} &amp; 1.4125 \times 10^{-2} \\<br>10^{4} &amp; 4.6555 \times 10^{-5} &amp; 4.6555 \times 10^{-3} \\<br>10^{5} &amp; 7.1814 \times 10^{-6} &amp; 2.2710 \times 10^{-3} \\<br>10^{6}
  &amp; 1.0165 \times 10^{-6} &amp; 1.0165 \times 10^{-3} \\<br>10^{7} &amp; 1.0675 \times 10^{-7} &amp; 3.3759 \times 10^{-4} \\<br>10^{8} &amp; 1.1489 \times 10^{-8} &amp; 1.1489 \times 10^{-4} \\<br>10^{9} &amp; 1.1608 \times 10^{-9} &amp; 3.6709 \times
  10^{-5} \\<br>\cdots &amp; \cdots &amp; \cdots<br>\end{array}<br>&amp;<br>\quad<br>&amp;<br>\begin{array}{c|cc}<br>n &amp; \sigma &amp; \sigma_N \\<br>\hline<br>10^{1} &amp; 7.4557 \times 10^{-3} &amp; 2.3577 \times 10^{-2} \\<br>10^{2} &amp; 1.0579
  \times 10^{-3} &amp; 1.0579 \times 10^{-2} \\<br>10^{3} &amp; 1.1004 \times 10^{-4} &amp; 3.4796 \times 10^{-3} \\<br>10^{4} &amp; 1.1655 \times 10^{-5} &amp; 1.1655 \times 10^{-3} \\<br>10^{5} &amp; 1.4812 \times 10^{-6} &amp; 4.6840 \times 10^{-4}
  \\<br>10^{6} &amp; 1.6222 \times 10^{-7} &amp; 1.6222 \times 10^{-4} \\<br>10^{7} &amp; 1.7185 \times 10^{-8} &amp; 5.4343 \times 10^{-5} \\<br>10^{8} &amp; 1.9564 \times 10^{-9} &amp; 1.9564 \times 10^{-5} \\<br>10^{9} &amp; 9.7523 \times 10^{-10}
  &amp; 3.0840 \times 10^{-5} \\<br>\cdots &amp; \cdots &amp; \cdots<br>\end{array}<br>\end{array}<br>$$<br>虽然使用非均匀分布$p(x)$加大计算消耗，但提高了精度。在实际使用中要权衡二者，再考虑是否使用。</p>
<h2 id="蒙特卡洛方法的其它应用">
  <a href="#蒙特卡洛方法的其它应用" class="headerlink" title="蒙特卡洛方法的其它应用"></a>蒙特卡洛方法的其它应用</h2>
<p>最近<strong>柯洁</strong>对战<strong>AlphaGo</strong>输了，人类在围棋上终究输给了机器。有点小难过，可能我是人类吧 :)<br><strong>AlphaGo</strong>的背后就是使用了<strong>蒙特卡洛树搜索（英语：Monte Carlo tree search；简称：MCTS）</strong>和深度学习。蒙特卡洛树搜索也被用于其他棋盘游戏程序，如六贯棋、三宝棋、亚马逊棋和印度斗兽棋；即时电子游戏，如《吃豆小姐》、《神鬼寓言:传奇》、《罗马II：全面战争》；不确定性游戏，如斯卡特、扑克、万智牌、卡坦岛。</p>
<blockquote>
  <p>最后用<strong>miser</strong>画了个蝙蝠镖的图，哈哈真好看<br><img src="/2017/05/21/蒙特卡洛方法及应用/batman.png" alt="蝙蝠镖" title="蝙蝠镖"></p>
</blockquote>
<h2 id="参考">
  <a href="#参考" class="headerlink" title="参考"></a>参考</h2>
<blockquote class="pullquote">
  <ul>
    <li><a href="https://youtu.be/AyBNnkYrSWY" target="_blank" rel="external">What is Monte Carlo? | YouTube</a></li>
    <li><a href="https://en.wikipedia.org/wiki/Monte_Carlo_method" target="_blank" rel="external">Monte Carlo method | Wikipedia</a></li>
    <li><a href="https://en.wikipedia.org/wiki/Monte_Carlo_integration" target="_blank" rel="external">Monte Carlo integration | Wikipedia</a></li>
    <li><a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm" target="_blank" rel="external">Metropolis–Hastings algorithm | Wikipedia</a></li>
    <li><a href="http://cos.name/2013/01/lda-math-mcmc-and-gibbs-sampling/" target="_blank" rel="external">LDA-math-MCMC 和 Gibbs Sampling | 统计之都</a></li>
    <li>Rickjin靳志辉，LDA数学八卦，0.4 MCMC⁄Gibbs Sampling</li>
    <li><a href="http://www.aip.de/groups/soe/local/numres/bookcpdf/c7-8.pdf" title="Recursive Stratified Sampling | WilliamH, Press. NUMERICAL RECIPES-The Art of Scientific Computing Third Edition[M]. Cambridge:Cambridge University Press, 2007. 323-328" target="_blank" rel="external">Recursive Stratified Sampling | WilliamH, Press. NUMERICAL RECIPES-The Art of Scientific Computing Third Edition[M]. Cambridge:Cambridge University Press, 2007. 323-328</a></li>
    <li><a href="https://zh.wikipedia.org/wiki/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%A0%91%E6%90%9C%E7%B4%A2" target="_blank" rel="external">蒙特卡洛树搜索 | Wikipedia</a></li>
  </ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      使用随机数来解决问题
    
    </summary>
    
      <category term="Algorithms" scheme="http://linw1995.com/categories/Algorithms/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
      <category term="Go" scheme="http://linw1995.com/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>分享 No One But You - Doug Paisley</title>
    <link href="http://linw1995.com/2017/05/11/%E5%88%86%E4%BA%AB-No-One-But-You-Doug-Paisley/"/>
    <id>http://linw1995.com/2017/05/11/分享-No-One-But-You-Doug-Paisley/</id>
    <published>2017-05-11T13:17:39.000Z</published>
    <updated>2017-05-11T13:20:06.577Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/v8-X-1wZfos" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=no border=0 marginwidth=0 marginheight=0 width=100% height=86 src=//music.163.com/outchain/player?type=2&amp;id=19673369&amp;auto=0&amp;height=66&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="Share" scheme="http://linw1995.com/categories/Share/"/>
    
    
      <category term="Music" scheme="http://linw1995.com/tags/Music/"/>
    
      <category term="YouTube" scheme="http://linw1995.com/tags/YouTube/"/>
    
  </entry>
  
  <entry>
    <title>伪随机数</title>
    <link href="http://linw1995.com/2017/05/05/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <id>http://linw1995.com/2017/05/05/伪随机数/</id>
    <published>2017-05-05T14:42:12.000Z</published>
    <updated>2017-06-01T14:10:54.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序">
  <a href="#序" class="headerlink" title="序"></a>序</h2>
<blockquote>
  <p><strong>伪随机性</strong>（英语：Pseudorandomness）是指一个过程似乎是随机的，但实际上并不是。例如<strong>伪随机数</strong>（或称<strong>伪乱数</strong>），是使用一个确定性的算法计算出来的似乎是随机的数序，因此伪随机数实际上并不随机。在计算伪随机数时假如使用的开始值不变的话，那么伪随机数的数序也不变。伪随机数的随机性可以用它的统计特性来衡量，其主要特征是每个数出现的可能性和它出现时与数序中其它数的关系。伪随机数的优点是它的计算比较简单，而且只使用少数数值很难推算出计算它的算法。一般人们使用一个假的随机数，比如电脑上的时间作为计算伪随机数的开始值。</p>
  <footer><strong>伪随机数</strong><cite><a href="https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A7#firstHeading" target="_blank" rel="external">Wikipedia</a></cite></footer>
</blockquote>
<h2 id="产生随机数的方法">
  <a href="#产生随机数的方法" class="headerlink" title="产生随机数的方法"></a>产生随机数的方法</h2>
<ul>
  <li>线性同余法</li>
  <li>平方取中法</li>
  <li>M-Sequence</li>
  <li>梅森旋转算法</li>
  <li>伪随机数二进制数列</li>
</ul>
<p>其中使用最多的是<strong>线性同余法</strong>和<strong>梅森旋转算法</strong>，下面主要介绍一下<strong>线性同余法</strong></p>
<h2 id="线性同余法（LCG-linear-congruential-generator）">
  <a href="#线性同余法（LCG-linear-congruential-generator）" class="headerlink" title="线性同余法（LCG linear congruential generator）"></a>线性同余法（LCG linear congruential generator）</h2>
<blockquote>
  <p><strong>线性同余方法（LCG）</strong>是个产生伪随机数的方法。<br>它是根据递归公式：<br>$$N_{j+1}\equiv (A\times N_{j}+C){\pmod {M}}$$<br>其中$A,C,M$是产生器设定的常数。</p>
  <footer><strong>线性同余法</strong><cite><a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%80%A7%E5%90%8C%E9%A4%98%E6%96%B9%E6%B3%95#firstHeading" target="_blank" rel="external">Wikipedia</a></cite></footer>
</blockquote>
<h3 id="Python-implementation">
  <a href="#Python-implementation" class="headerlink" title="Python implementation"></a>Python implementation</h3>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Random</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, A, C, M, seed=<span class="number">0</span>)</span>:</span></div><div class="line">        self._A = A</div><div class="line">        self._C = C</div><div class="line">        self._M = M</div><div class="line">        self._prev = seed % M</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></div><div class="line">        A = self._A</div><div class="line">        C = self._C</div><div class="line">        M = self._M</div><div class="line">        prev = self._prev</div><div class="line"></div><div class="line">        cur = self._prev = (A * prev + C) % M</div><div class="line">        <span class="keyword">return</span> cur / M</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Random(A=&#123;obj._A!r&#125;, C=&#123;obj._C!r&#125;, M=&#123;obj._M!r&#125;)'</span>.format(obj=self)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="随机数序列周期长度">
  <a href="#随机数序列周期长度" class="headerlink" title="随机数序列周期长度"></a>随机数序列周期长度</h3>
<blockquote>
  <p><img src="/2017/05/05/伪随机数/Linear_congruential_generator_visualisation.svg" alt="LCG-Visualisation" title="LCG-Visualisation"></p>
  <footer><strong>Linear congruential generator</strong><cite><a href="https://en.wikipedia.org/wiki/Linear_congruential_generator#firstHeading" target="_blank" rel="external">Wikipedia</a></cite></footer>
</blockquote>
<p><strong>LCG</strong>产生的随机数序列周期最大为$M$，但大部分情况都会少于$M$。要使随机数序列达到最大周期，应符合以下条件：</p>
<ol>
  <li>$C,M$互质；</li>
  <li>$M$的所有质因数都能整除 $A-1$；</li>
  <li>若 $M$是4的倍数， $A-1$也是；</li>
  <li>$A,C,N_{0}$都比 $M$小；</li>
  <li>$A,C$是正整数。</li>
</ol>
<h3 id="优点与缺点">
  <a href="#优点与缺点" class="headerlink" title="优点与缺点"></a>优点与缺点</h3>
<ul>
  <li><strong>LCG</strong>速度非常快，需要的内存少；</li>
  <li><strong>LCG</strong>不适用于需要高质量的随机数的应用，例如<strong>蒙特卡罗模拟Monte Carlo simulation</strong>；</li>
  <li>当使用<strong>LCG</strong>生成n维空间中的点，则这些点将位于$(n!m)^{1/n}$超平面（hyperplanes）；（Marsaglia&apos;s Theorem）
    <blockquote>
      <p>Spectral test是一种伪随机数生成器（PRNG），线性同余生成器（LCG）的生成的随机数质量的统计检验方法。<br><img src="/2017/05/05/伪随机数/spectral-test.png" alt="Random(A=65539, C=0, M=2**31, seed=1)" title="Random(A=65539, C=0, M=2**31, seed=1)"><br>例如，使用<code>Random(A=65539, C=0, M=2**31, seed=1)</code>产生100,000个随机数在3维空间上的分布。很明显，所有点只落在15个二维平面上。这是由<strong>LCG</strong>产生的随机数序列中相继值的关联导致的。</p>
      <footer><strong>Spectral test</strong><cite><a href="https://en.wikipedia.org/wiki/Spectral_test#firstHeading" target="_blank" rel="external">Wikipedia</a></cite></footer>
    </blockquote>
  </li>
</ul>
<h2 id="非均匀分布随机数的生成">
  <a href="#非均匀分布随机数的生成" class="headerlink" title="非均匀分布随机数的生成"></a>非均匀分布随机数的生成</h2>
<p>用线性同余法可产生在$[0,1)$间均匀分布的随机数，利用<strong>反变换法Inverse transform sampling</strong>来产生非均匀分布的随机数。</p>
<h3 id="均匀分布">
  <a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h3>
<p>产生一个在$a\le x\le b$随机分布的随机数序列，期望的概率密度是：<br>$$<br>p(x)=<br>\begin{cases}<br>1/(b-a) &amp;,a\le x\le b \\<br>0 &amp;,otherwise<br>\end{cases}<br>$$<br>计算累积分布函数<br>$$<br>F(x)=<br>\begin{cases}<br>0 \qquad &amp;,x\lt a \\<br>\frac{x-a}{b-a} &amp;,a\le x\lt
  b \\<br>1 &amp;,x\ge b<br>\end{cases}<br>$$<br>计算逆累积分布函数：<br>$$<br>F^{-1}(p)=a+(b-a)p \qquad ,p \in [0, 1]<br>$$</p>
<p>利用上面的公式我们就可以产生符合均匀分布的随机数。这个过程就叫做<strong>反变换法</strong>。</p>
<h4 id="Python-implementation-1">
  <a href="#Python-implementation-1" class="headerlink" title="Python implementation"></a>Python implementation</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">random = Random(A=<span class="number">65539</span>, C=<span class="number">0</span>, M=<span class="number">2</span>**<span class="number">31</span>, seed=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">uniformDistributionFactory</span><span class="params">(a, b)</span>:</span></div><div class="line">    <span class="keyword">if</span> a &gt; b:</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'a must be smaller than b'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniform_distribution</span><span class="params">()</span>:</span></div><div class="line">        p = random()</div><div class="line">        <span class="keyword">return</span> a + (b - a) * p</div><div class="line"></div><div class="line">    <span class="keyword">return</span> uniform_distribution</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="概率密度图像">
  <a href="#概率密度图像" class="headerlink" title="概率密度图像"></a>概率密度图像</h4><img src="/2017/05/05/伪随机数/t01.png" alt="Probability density" title="Probability density">
<h3 id="指数分布">
  <a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h3>
<p>指数分布的概率密度函数为：<br>$$<br>p(x)=\lambda e^{-\lambda x} ,x\gt 0 \qquad (\lambda \gt 0)<br>$$<br>计算累积分布函数：<br>$$<br>F(x)=1-e^{-\lambda x}<br>$$<br>计算逆累积分布函数：<br>$$<br>F^{-1}(p)=\frac{-ln(1-p)}{\lambda}<br>$$<br>利用上面的公式我们就可以产生符合指数分布的随机数。不过,因为$p$是均匀分布的，则$1-p$也是均匀分布的，所以上式可以简化成下式<br>$$<br>F^{-1}(p)=\frac{-ln(p)}{\lambda}<br>$$</p>
<h4 id="Python-implementation-2">
  <a href="#Python-implementation-2" class="headerlink" title="Python implementation"></a>Python implementation</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line">random = Random(A=<span class="number">65539</span>, C=<span class="number">0</span>, M=<span class="number">2</span>**<span class="number">31</span>, seed=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">exponentialDistributionFactory</span><span class="params">(lam)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> lam &gt; <span class="number">0</span>:</div><div class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'lambda must be bigger than 0'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">exponential_distribution</span><span class="params">()</span>:</span></div><div class="line">        p = random()</div><div class="line">        <span class="keyword">return</span> - math.log(p, math.e) / lam</div><div class="line"></div><div class="line">    <span class="keyword">return</span> exponential_distribution</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="概率密度图像-1">
  <a href="#概率密度图像-1" class="headerlink" title="概率密度图像"></a>概率密度图像</h4><img src="/2017/05/05/伪随机数/t02.png" alt="Probability density" title="Probability density">
<h3 id="正态分布">
  <a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3>
<p>正态分布的概率密度函数为<br>$$<br>p(x)=\frac{1}{\sqrt{2\pi\sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}<br>$$<br>计算累积分布函数：</p>
<ul>
  <li>
    <p>假设现在有两个独立的标准正态分布$X\sim N(0,1)$和$Y\sim N(0,1)$，由于二者相互独立，则联合概率密度函数为：<br> $$<br> p(x,y)=p(x)\cdot p(y)=\frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}}\cdot \frac{1}{\sqrt{2\pi}}e^{-\frac{y^2}{2}}<br> =\frac{1}{2\pi}e^{-\frac{x^2+y^2}{2}}<br> $$</p>
  </li>
  <li>
    <p>做极坐标变换，则$x=R\cos\theta$，$y=R\sin\theta$，则有：<br> $$<br> \frac{1}{2\pi}e^{-\frac{x^2+y^2}{2}}=\frac{1}{2\pi}e^{-\frac{R^2}{2}}<br> $$</p>
  </li>
  <li>这个结果可以看作是两个概率分布的密度函数的乘积，设其中一个是$[0, 2\pi]$上的均匀分布$\theta\sim Unif(0,2\pi)=\frac{1}{2\pi}$，则另外一个密度函数为：<br> $$<br> p(R)=e^{-\frac{R^2}{2}}<br> $$</li>
  <li>计算其累计分布函数：<br> $$<br> F(r)=1-e^{-\frac{r^2}{2}}<br> $$</li>
</ul>
<p>计算逆累积分布函数：<br>$$<br>F^{-1}(p)=\sqrt{-2\ln(1-p)}<br>$$</p>
<p>根据<strong>反变换法</strong>，我们可以根据上式得出符合$p(R)$的分布，而如果$p$是均匀分布的，则$u_1=1-p$也是均匀分布的，则：<br>$$<br>X = R\cdot\cos\theta=\sqrt{-2\ln u_1}\cdot\cos (2\pi u_2) \\<br>Y = R\cdot\sin\theta=\sqrt{-2\ln u_1}\cdot\sin (2\pi u_2)<br>$$<br>利用以上任意一式即可生成符合正态分布的随机数，这个过程称作<strong>Box-Muller变换</strong>。</p>
<h4 id="Python-implementation-3">
  <a href="#Python-implementation-3" class="headerlink" title="Python implementation"></a>Python implementation</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line">random = Random(A=<span class="number">65539</span>, C=<span class="number">0</span>, M=<span class="number">2</span>**<span class="number">31</span>, seed=<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">NormalDistributionFactory</span><span class="params">(mu, sigma)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">normal_distribution</span><span class="params">()</span>:</span></div><div class="line">        u1 = random()</div><div class="line">        u2 = random()</div><div class="line">        z = math.sqrt(<span class="number">-2</span>*math.log(u1, math.e)) * math.cos(<span class="number">2</span> * math.pi * u2)</div><div class="line">        <span class="comment"># z = math.sqrt(-2*math.log(u1, math.e)) * math.sin(2 * math.pi * u2)</span></div><div class="line">        <span class="keyword">return</span> z * sigma + mu</div><div class="line"></div><div class="line">    <span class="keyword">return</span> normal_distribution</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="概率密度图像-2">
  <a href="#概率密度图像-2" class="headerlink" title="概率密度图像"></a>概率密度图像</h4><img src="/2017/05/05/伪随机数/t03.png" alt="Probability density" title="Probability density">
<h2 id="结论">
  <a href="#结论" class="headerlink" title="结论"></a>结论</h2>
<p>以上简单的讲了如何用<strong>线性同余法</strong>来生成均匀分布在$[0, 1)$间的随机数，再利用<strong>反变换法</strong>生成非均匀分布的伪随机数，例如<strong>指数分布</strong>,<strong>正态分布</strong>。</p>
<h2 id="参考">
  <a href="#参考" class="headerlink" title="参考"></a>参考</h2>
<blockquote class="pullquote">
  <ul>
    <li><a href="https://zh.wikipedia.org/wiki/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%80%A7" target="_blank" rel="external">伪随机数</a></li>
    <li><a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%80%A7%E5%90%8C%E9%A4%98%E6%96%B9%E6%B3%95" target="_blank" rel="external">线性同余法</a></li>
    <li><a href="https://en.wikipedia.org/wiki/Spectral_test" target="_blank" rel="external">Spectral test</a></li>
    <li><a href="https://en.wikipedia.org/wiki/Inverse_transform_sampling" target="_blank" rel="external">反变换法Inverse transform sampling</a></li>
    <li><a href="https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform" target="_blank" rel="external">Box–Muller transform</a></li>
  </ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      一般计算机产生的随机数都是伪随机数
    
    </summary>
    
      <category term="Algorithms" scheme="http://linw1995.com/categories/Algorithms/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>AA树的平衡与再平衡</title>
    <link href="http://linw1995.com/2017/04/27/AA%E6%A0%91%E7%9A%84%E5%B9%B3%E8%A1%A1%E4%B8%8E%E5%86%8D%E5%B9%B3%E8%A1%A1/"/>
    <id>http://linw1995.com/2017/04/27/AA树的平衡与再平衡/</id>
    <published>2017-04-27T04:38:13.000Z</published>
    <updated>2017-05-24T10:42:50.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍">
  <a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2>
<blockquote>
  <p><strong>AA树</strong>在计算机科学一种形式的自平衡二叉查找树用于高效存储和检索序数据。<strong>AA树</strong>的名称是由它的发明者<em>Arne Andersson</em>而来。<br><strong>AA树</strong>是<strong>红黑树</strong>的一种变种，是<em>Arne Andersson</em>教授在1993年年在他的论文<em>“Balanced search trees made simple”</em>中介绍，设计的目的是减少<strong>红黑树</strong>考虑的不同情况，区别于<strong>红黑树</strong>的是，<strong>AA树</strong>的红节点只能作为右叶子。换句话说，没有红节点可以是一个左子儿。这导致代替<strong>2-3-4树</strong>，从而大大简化了维护<strong>2-3树</strong>的模拟。维护<strong>红黑树</strong>的平衡需要考虑7种不同的情况:<br>    <img src="/2017/04/27/AA树的平衡与再平衡/360px-Red_Black_Shape_Cases.svg.png" alt="Red-Black-Shape-Cases" title="Red-Black-Shape-Cases"><br>因为<strong>AA树</strong>有严格的条件(红节点只能为右节点)，故只需考虑2种情形:<br><img src="/2017/04/27/AA树的平衡与再平衡/105px-AA_Tree_Shape_Cases.svg.png" alt="AA-Tree-Shape-Cases" title="AA-Tree-Shape-Cases"></p>
  <footer><strong>维基百科</strong><cite><a href="https://zh.wikipedia.org/wiki/AA%E6%A0%91#firstHeading" target="_blank" rel="external">Wikipedia</a></cite></footer>
</blockquote>
<p><strong>AA树</strong>是<strong>2-3树</strong>的模拟，<strong>2-3树</strong>和<strong>AA树</strong>是<strong>等距同构</strong>的。其节点类型如下</p> <img src="/2017/04/27/AA树的平衡与再平衡/IMG_01.JPG" alt="2-3tree&1-2tree" title="2-3tree&1-2tree">
<h2 id="平衡条件">
  <a href="#平衡条件" class="headerlink" title="平衡条件"></a>平衡条件</h2>
<p>树是用与高效的存储和检索数据的，为了维持其效率，必须维持其平衡结构。<br>平衡一颗<strong>红黑树</strong>需记录其颜色，而<strong>AA树</strong>是在每个节点记录其<strong>level</strong>这相当于<strong>红黑树</strong>节点的黑高度</p>
<ol>
  <li>所有叶节点的<strong>level</strong>都是1</li>
  <li>每个左孩子的<strong>level</strong>恰好为其父亲的<strong>level</strong>减一</li>
  <li>每个右孩子的<strong>level</strong>等于其父亲的<strong>level</strong>或为其父亲的<strong>level</strong>减一</li>
  <li>每个右孙子的<strong>level</strong>严格小于其祖父节点的<strong>level</strong></li>
  <li>每一个<strong>level</strong>大于1的节点有两个子节点</li>
</ol>
<h2 id="Skew-amp-Split">
  <a href="#Skew-amp-Split" class="headerlink" title="Skew &amp; Split"></a>Skew &amp; Split</h2>
<p>对于<strong>AA树</strong>，维持其平衡的基本操作如下：</p>
<ol>
  <li>
    <p><strong>偏斜Skew</strong>：使得子树中向左的水平边变成向右的。</p> <img src="/2017/04/27/AA树的平衡与再平衡/IMG_02.JPG" alt="Skew" title="Skew">
    <p> 不满足平衡条件：2</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">skew</span><span class="params">(node)</span>:</span></div><div class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> node</div><div class="line">    <span class="keyword">if</span> node.left.level != node.level:</div><div class="line">        <span class="keyword">return</span> node</div><div class="line">    lft = node.left</div><div class="line">    node.left = lft.right   <span class="comment">#   B =&gt; C change to D =&gt; C</span></div><div class="line">    lft.right = node        <span class="comment">#   D =&gt; B change to B =&gt; D</span></div><div class="line">    <span class="keyword">return</span> lft              <span class="comment"># top =&gt; D change to top =&gt; B</span></div></pre>
          </td>
        </tr>
      </table>
    </figure>
    <ol>
      <li>判断是否是偏斜<br> i. 是否为空节点，是则不执行<br> ii. 是否存在左节点，不存在则不执行<br> iii. 是否不满足平衡条件 2，满足则不执行</li>
      <li>右旋转操作</li>
      <li>返回新的节点</li>
    </ol>
  </li>
  <li>
    <p><strong>分割Split</strong>：对溢出子节点进行分割，将三个值中的中间值向上移到父节点，如果让父节点溢出了，就继续分割下去。</p> <img src="/2017/04/27/AA树的平衡与再平衡/IMG_03.JPG" alt="Split" title="Split">
    <p> 不满足平衡条件：4</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">split</span><span class="params">(node)</span>:</span></div><div class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> node.right <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> node.right.right <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> node</div><div class="line">    <span class="keyword">if</span> node.right.right.level != node.level:</div><div class="line">        <span class="keyword">return</span> node</div><div class="line">    rgt = node.right</div><div class="line">    node.right = rgt.left   <span class="comment">#   C =&gt; E change to C =&gt; D</span></div><div class="line">    rgt.left = node         <span class="comment">#   E =&gt; D change to E =&gt; C</span></div><div class="line">    rgt.level += <span class="number">1</span>          <span class="comment">#   let E's level == A's level</span></div><div class="line">    <span class="keyword">return</span> rgt              <span class="comment">#   A =&gt; C change to A =&gt; E</span></div></pre>
          </td>
        </tr>
      </table>
    </figure>
    <ol>
      <li>判断是否要执行分割<br> i. 是否为空节点，是则不执行<br> ii. 是否存在右子节点，右孙节点，不存在则不执行<br> iii. 是否满足平衡条件 4，满足则不执行</li>
      <li>分割（左旋转）操作</li>
      <li>返回新的节点</li>
    </ol>
  </li>
</ol>
<p>尽管各种树结构及其再平衡方法都不尽相同，但他们通常是由以上两类基本操作发展来的。</p>
<h2 id="Insert-amp-Remove">
  <a href="#Insert-amp-Remove" class="headerlink" title="Insert &amp; Remove"></a>Insert &amp; Remove</h2>
<p>作为一种数据结构，必须拥有<strong>Insert</strong>与<strong>Remove</strong>等基本操作吧。那么，如何在操作中保持树的平衡？</p>
<h3 id="Insert-插入操作">
  <a href="#Insert-插入操作" class="headerlink" title="Insert 插入操作"></a>Insert 插入操作</h3>
<p>在一棵已平衡的<strong>AA树</strong>插入一个新的节点，如果他是个左子节点，那么可采用<strong>偏斜Skew</strong>操作；如果他是个右子节点，那啥事情都不用干；但它是右孙节点的话，就成为了一个溢出的节点（四节点型结构），那样就要执行<strong>分割Split</strong>操作。</p>
<h4 id="算法步骤">
  <a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(node, key, val)</span>:</span></div><div class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> Node(key, val)</div><div class="line">    <span class="keyword">if</span> node.key == key:</div><div class="line">        node.val = val</div><div class="line">    <span class="keyword">elif</span> key &lt; node.key:</div><div class="line">        node.left = insert(node.left, key, val)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        node.right = insert(node.right, key, val)</div><div class="line">    node = skew(node)</div><div class="line">    node = split(node)</div><div class="line">    <span class="keyword">return</span> node</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ol>
  <li>判断节点是否是空，空则返回新建一个节点</li>
  <li>判断节点的键与待插入的键
    <ol>
      <li>相等则更新值</li>
      <li>大于则执行左子树的插入操作</li>
      <li>小于则执行右子树的插入操作</li>
    </ol>
  </li>
  <li>执行翻转Skew操作</li>
  <li>执行分割Split操作</li>
</ol>
<h4 id="示例">
  <a href="#示例" class="headerlink" title="示例"></a>示例</h4>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">current tree:</div><div class="line"></div><div class="line">       /-?</div><div class="line">-A(Lv.1)</div><div class="line">      |       /-?</div><div class="line">       \C(Lv.1)</div><div class="line">              \-?</div><div class="line"></div><div class="line">insert B</div><div class="line"></div><div class="line">before skew:</div><div class="line"></div><div class="line">              /-?</div><div class="line">       /B(Lv.1)</div><div class="line">      |       \-?</div><div class="line">-C(Lv.1)</div><div class="line">      |</div><div class="line">       \-?</div><div class="line"></div><div class="line">after skew:</div><div class="line"></div><div class="line">       /-?</div><div class="line">-B(Lv.1)</div><div class="line">      |       /-?</div><div class="line">       \C(Lv.1)</div><div class="line">              \-?</div><div class="line"></div><div class="line">before split:</div><div class="line"></div><div class="line">       /-?</div><div class="line">-A(Lv.1)</div><div class="line">      |       /-?</div><div class="line">       \B(Lv.1)</div><div class="line">             |       /-?</div><div class="line">              \C(Lv.1)</div><div class="line">                     \-?</div><div class="line"></div><div class="line">after split:</div><div class="line"></div><div class="line">          /-?</div><div class="line">   /A(Lv.1)</div><div class="line">  |       \-?</div><div class="line">-B(Lv.2)</div><div class="line">  |</div><div class="line">  |       /-?</div><div class="line">   \C(Lv.1)</div><div class="line">          \-?</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="Remove-删除操作">
  <a href="#Remove-删除操作" class="headerlink" title="Remove 删除操作"></a>Remove 删除操作</h3>
<p>在一棵平衡的树删除一个叶节点的过程十分简单，可删除处于结构内部的节点的过程就没那么简单了。所以接下来没讲清楚请见谅。结合代码和示例能更好的明白这个过程。</p>
<p>为了在这个过程中平衡树结构，删除一个内部节点可以转换成交换内部节点与其后继节点,删除后第一件事就要降低其<strong>level</strong>（如果可以的话），然后再对整个level执行<strong>Skew</strong>和<strong>Split</strong>操作。这个方法是最受欢迎的，因为这个方法容易理解。</p>
<h4 id="算法步骤-1">
  <a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrease_level</span><span class="params">(node)</span>:</span></div><div class="line">    should_be = min(node.left.level <span class="keyword">if</span> node.left <span class="keyword">else</span> <span class="number">0</span>,</div><div class="line">                    node.right.level <span class="keyword">if</span> node.right <span class="keyword">else</span> <span class="number">0</span>) + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> should_be &lt; node.level:</div><div class="line">        node.level = should_be</div><div class="line">        <span class="keyword">if</span> node.right <span class="keyword">and</span> should_be &lt; node.right.level:</div><div class="line">            node.right.level = should_be</div><div class="line">    <span class="keyword">return</span> node</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(node, key)</span>:</span></div><div class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> node</div><div class="line">    <span class="keyword">if</span> key &gt; node.key:</div><div class="line">        node.right = remove(node.right, key)</div><div class="line">    <span class="keyword">elif</span> key &lt; node.key:</div><div class="line">        node.left = remove(node.left, key)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">elif</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            heir = node.right</div><div class="line">            node.right = remove(heir, heir.key)</div><div class="line">            node.key = heir.key</div><div class="line">            node.val = heir.val</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            heir = node.left</div><div class="line">            node.left = remove(heir, heir.key)</div><div class="line">            node.key = heir.key</div><div class="line">            node.val = heir.val</div><div class="line">    node = decrease_level(node)</div><div class="line">    node = skew(node)</div><div class="line">    node.right = skew(node.right)</div><div class="line">    <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        node.right.right = skew(node.right.right)</div><div class="line">    node = split(node)</div><div class="line">    node.right = split(node.right)</div><div class="line">    <span class="keyword">return</span> node</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ol>
  <li>删除节点<br> i. 判断节点是否为空节点，是则返回自身<br> ii. 判断目标键与当前节点的键，执行对应操作<br> &nbsp;&nbsp;&nbsp;&nbsp;大于，对右子树执行删除操作；<br> &nbsp;&nbsp;&nbsp;&nbsp;小于，对左子树执行删除操作；<br> &nbsp;&nbsp;&nbsp;&nbsp;等于，判断是否为叶节点，是则返回空节点，完成删除操作，否则与后继节点交换</li>
  <li>降低节点的<strong>level</strong></li>
  <li>对同<strong>level</strong>的后继与其本身执行<strong>Skew</strong>操作，再执行<strong>Split</strong>操作</li>
</ol>
<h4 id="示例-1">
  <a href="#示例-1" class="headerlink" title="示例"></a>示例</h4>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">current tree:</div><div class="line"></div><div class="line">          /-?</div><div class="line">   /A(Lv.1)</div><div class="line">  |       \-?</div><div class="line">  |</div><div class="line">-B(Lv.2)</div><div class="line">  |          /-?</div><div class="line">  |   /C(Lv.1)</div><div class="line">  |  |       \-?</div><div class="line">   \D(Lv.2)</div><div class="line">     |</div><div class="line">     |       /-?</div><div class="line">      \E(Lv.1)</div><div class="line">            |       /-?</div><div class="line">             \F(Lv.1)</div><div class="line">                    \-?</div><div class="line"></div><div class="line">remove B</div><div class="line"></div><div class="line">before skew:</div><div class="line"></div><div class="line">          /-?</div><div class="line">   /C(Lv.1)</div><div class="line">  |       \-?</div><div class="line">-D(Lv.1)</div><div class="line">  |</div><div class="line">  |       /-?</div><div class="line">   \E(Lv.1)</div><div class="line">         |       /-?</div><div class="line">          \F(Lv.1)</div><div class="line">                 \-?</div><div class="line"></div><div class="line">after skew:</div><div class="line"></div><div class="line">       /-?</div><div class="line">-C(Lv.1)</div><div class="line">      |       /-?</div><div class="line">       \D(Lv.1)</div><div class="line">             |       /-?</div><div class="line">              \E(Lv.1)</div><div class="line">                    |       /-?</div><div class="line">                     \F(Lv.1)</div><div class="line">                            \-?</div><div class="line"></div><div class="line">before split:</div><div class="line"></div><div class="line">       /-?</div><div class="line">-A(Lv.1)</div><div class="line">      |       /-?</div><div class="line">       \C(Lv.1)</div><div class="line">             |       /-?</div><div class="line">              \D(Lv.1)</div><div class="line">                    |       /-?</div><div class="line">                     \E(Lv.1)</div><div class="line">                           |       /-?</div><div class="line">                            \F(Lv.1)</div><div class="line">                                   \-?</div><div class="line"></div><div class="line">after split:</div><div class="line"></div><div class="line">          /-?</div><div class="line">   /A(Lv.1)</div><div class="line">  |       \-?</div><div class="line">-C(Lv.2)</div><div class="line">  |</div><div class="line">  |       /-?</div><div class="line">   \D(Lv.1)</div><div class="line">         |       /-?</div><div class="line">          \E(Lv.1)</div><div class="line">                |       /-?</div><div class="line">                 \F(Lv.1)</div><div class="line">                        \-?</div><div class="line"></div><div class="line">before split:</div><div class="line"></div><div class="line">       /-?</div><div class="line">-D(Lv.1)</div><div class="line">      |       /-?</div><div class="line">       \E(Lv.1)</div><div class="line">             |       /-?</div><div class="line">              \F(Lv.1)</div><div class="line">                     \-?</div><div class="line"></div><div class="line">after split:</div><div class="line"></div><div class="line">          /-?</div><div class="line">   /D(Lv.1)</div><div class="line">  |       \-?</div><div class="line">-E(Lv.2)</div><div class="line">  |</div><div class="line">  |       /-?</div><div class="line">   \F(Lv.1)</div><div class="line">          \-?</div><div class="line"></div><div class="line">current tree:</div><div class="line"></div><div class="line">          /-?</div><div class="line">   /A(Lv.1)</div><div class="line">  |       \-?</div><div class="line">  |</div><div class="line">-C(Lv.2)</div><div class="line">  |          /-?</div><div class="line">  |   /D(Lv.1)</div><div class="line">  |  |       \-?</div><div class="line">   \E(Lv.2)</div><div class="line">     |</div><div class="line">     |       /-?</div><div class="line">      \F(Lv.1)</div><div class="line">             \-?</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>由于Skew和Split操作都是在递归性回溯部分中执行的。这样一来，错误的节点型结构就会在其回溯路径上被修复。</p>
<h2 id="结论">
  <a href="#结论" class="headerlink" title="结论"></a>结论</h2>
<p>由于<strong>AA树</strong>与其他二分搜索树来说同数量节点形成的树结构较浅，故搜索速度较快。但其插入删除节点效率较低，因为需要执行多次<strong>Skew</strong>和<strong>Split</strong>操作。</p>
<h2 id="剩余代码">
  <a href="#剩余代码" class="headerlink" title="剩余代码"></a>剩余代码</h2>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></div><div class="line">    __slots__ = (<span class="string">'left'</span>, <span class="string">'right'</span>, <span class="string">'level'</span>, <span class="string">'key'</span>, <span class="string">'val'</span>)</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, val)</span>:</span></div><div class="line">        self.left = <span class="keyword">None</span></div><div class="line">        self.right = <span class="keyword">None</span></div><div class="line">        self.level = <span class="number">1</span></div><div class="line">        self.key = key</div><div class="line">        self.val = val</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Node(key=&#123;k!r&#125;, val=&#123;v!r&#125;, lvl=&#123;l!r&#125;)'</span>.format(</div><div class="line">            k=self.key, v=self.val, l=self.level</div><div class="line">        )</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="参考">
  <a href="#参考" class="headerlink" title="参考"></a>参考</h2>
<blockquote class="pullquote">
  <ul>
    <li>Magnus Lie Hetland.(2014).Tree Balance … and Balancing.In <em>Python Algorithms: Mastering Basic Algorithms in the Python Language,Second Edition</em>,pages 143-149.</li>
    <li>Magnus Lie Hetland.(2015).树的平衡与再平衡.In <em>Python算法教程</em>,pages 145-152.</li>
    <li><a href="http://user.it.uu.se/~arnea/abs/simp.html" target="_blank" rel="external">Andersson, A.(1993).Balanced search trees made simple.In <em>Proceedings of the Workshop on Algorithms and Data Structures</em>(WADS),pages 60-71.</a></li>
  </ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;strong&gt;AA树&lt;/strong&gt;是一种&lt;strong&gt;自平衡二叉查找树&lt;/strong&gt;用于高效存储和检索序数据
    
    </summary>
    
      <category term="Algorithms" scheme="http://linw1995.com/categories/Algorithms/"/>
    
    
      <category term="Data Structrue" scheme="http://linw1995.com/tags/Data-Structrue/"/>
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>分享 Better Me - AGA</title>
    <link href="http://linw1995.com/2017/04/24/%E5%88%86%E4%BA%AB-Better-Me-AGA/"/>
    <id>http://linw1995.com/2017/04/24/分享-Better-Me-AGA/</id>
    <published>2017-04-24T11:08:15.000Z</published>
    <updated>2017-04-27T10:19:51.825Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/ejkHrp5uxQg" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=no border=0 marginwidth=0 marginheight=0 width=100% height=86 src=//music.163.com/outchain/player?type=2&amp;id=28453009&amp;auto=0&amp;height=66&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="Share" scheme="http://linw1995.com/categories/Share/"/>
    
    
      <category term="Music" scheme="http://linw1995.com/tags/Music/"/>
    
      <category term="YouTube" scheme="http://linw1995.com/tags/YouTube/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy学习日记 二 · Selenium+PhantomJS</title>
    <link href="http://linw1995.com/2017/04/23/Scrapy%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E4%BA%8C-%C2%B7-Selenium-PhantomJS/"/>
    <id>http://linw1995.com/2017/04/23/Scrapy学习日记-二-·-Selenium-PhantomJS/</id>
    <published>2017-04-23T12:40:27.000Z</published>
    <updated>2017-07-16T14:40:34.657Z</updated>
    
    <content type="html"><![CDATA[<p>现在爬虫文章一大堆，内容却千遍一律。<br>我想写和这些不一样的，可为啥还要讲<strong>Selenium</strong>和<strong>PhantomJS</strong>呢？<br>
  <a id="more"></a><br>因为，我这可是技术文:)</p>
<h1 id="介绍">
  <a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1>
<h2 id="PhantomJS">
  <a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h2><img src="/2017/04/23/Scrapy学习日记-二-·-Selenium-PhantomJS/phantomjs-logo.png" alt="PhantomJS-LOGO" title="PhantomJS-LOGO">
<p>俗称无头浏览器，即无界面浏览器。既然它是个浏览器，这意味着我们平时用浏览器所见的，用<strong>PhantomJS</strong>也能得到。因为带<strong>JS</strong>运行环境，所以可以浏览带<strong>Ajax</strong>的网页。很多网站反爬技术是利用了爬虫缺少<strong>JS</strong>运行环境这一点来反爬的，所以用<strong>PhatomJS</strong>就可以做到一定程度上的反反爬。</p>
<h2 id="Selenium">
  <a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h2><img src="/2017/04/23/Scrapy学习日记-二-·-Selenium-PhantomJS/selenium-logo.png" alt="Selenium-LOGO" title="Selenium-LOGO">
<p>Web应用程序的自动化测试工具，通过原生浏览器支持或者浏览器扩展来操控浏览器，甚至模拟用户操作。<br>支持许多浏览器，像<strong>Chrome</strong>、<strong>Firefox</strong>、<strong>IE</strong>、<strong>Safari</strong>等常用浏览器，当然也支持<strong>PhantomJS</strong>这个无头浏览器。</p>
<h1 id="安装">
  <a href="#安装" class="headerlink" title="安装"></a>安装</h1>
<ul>
  <li>
    <p><a href="http://phantomjs.org/" target="_blank" rel="external">PhantomJS</a>下载解压，再把执行文件添加到系统PATH中即可</p>
  </li>
  <li>
    <p>selenium安装简单，用pip即可</p>
    <pre><code>pip install selenium
</code></pre>
  </li>
</ul>
<h1 id="使用">
  <a href="#使用" class="headerlink" title="使用"></a>使用</h1>
<p><strong>Scrapy</strong>可以自定制<strong>download middleware</strong></p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> multiprocessing.context</div><div class="line"><span class="keyword">import</span> multiprocessing.pool</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</div><div class="line"></div><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</div><div class="line"><span class="keyword">from</span> selenium.webdriver.remote.remote_connection <span class="keyword">import</span> LOGGER</div><div class="line"></div><div class="line">LOGGER.setLevel(logging.INFO)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeout</span><span class="params">(max_timeout)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    Timeout decorator, parameter in seconds.</div><div class="line">    http://stackoverflow.com/a/35139284/7035932</div><div class="line">    '''</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeout_decorator</span><span class="params">(item)</span>:</span></div><div class="line"><span class="meta">        @functools.wraps(item)</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">func_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            pool = multiprocessing.pool.ThreadPool(processes=<span class="number">1</span>)</div><div class="line">            async_result = pool.apply_async(item, args, kwargs)</div><div class="line">            <span class="keyword">return</span> async_result.get(max_timeout)</div><div class="line">        <span class="keyword">return</span> func_wrapper</div><div class="line">    <span class="keyword">return</span> timeout_decorator</div><div class="line"></div><div class="line"></div><div class="line">logger = logging.getLogger(__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getresponse</span><span class="params">(driver)</span>:</span></div><div class="line">    log = driver.get_log(<span class="string">'har'</span>)</div><div class="line">    log = json.loads(log[<span class="number">0</span>][<span class="string">'message'</span>])</div><div class="line">    <span class="keyword">return</span> log[<span class="string">'log'</span>][<span class="string">'entries'</span>][<span class="number">0</span>][<span class="string">'response'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhantomJSMiddleware</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.driver = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.driver:</div><div class="line">            self.driver.quit()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">injectheaders</span><span class="params">(self, headers)</span>:</span></div><div class="line">        caps = DesiredCapabilities.PHANTOMJS.copy()</div><div class="line">        caps[<span class="string">'phantomjs.page.settings.loadImages'</span>] = <span class="keyword">False</span></div><div class="line">        <span class="comment"># caps['proxy'] = proxy json object</span></div><div class="line">        <span class="comment"># https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#proxy-json-object</span></div><div class="line">        <span class="keyword">if</span> <span class="string">'User-Agent'</span> <span class="keyword">in</span> headers:</div><div class="line">            caps[<span class="string">'phantomjs.page.settings.UserAgent'</span>] = headers[<span class="string">'User-Agent'</span>]</div><div class="line">            <span class="keyword">del</span> headers[<span class="string">'User-Agent'</span>]</div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> headers:</div><div class="line">            caps[<span class="string">'phantomjs.page.customheaders.'</span> + key] = headers[key]</div><div class="line"></div><div class="line">        self.driver.start_session(caps)</div><div class="line"></div><div class="line"><span class="meta">    @timeout(10)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        driver = self.driver</div><div class="line">        headers = request.headers.to_unicode_dict()</div><div class="line">        encoding = request.encoding</div><div class="line">        self.injectheaders(headers)</div><div class="line">        driver.get(request.url)</div><div class="line"></div><div class="line">        isnotloaded = <span class="keyword">True</span></div><div class="line">        <span class="keyword">while</span> isnotloaded:</div><div class="line">            time.sleep(<span class="number">0.1</span>)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                response = getresponse(driver)</div><div class="line">                <span class="keyword">if</span> response[<span class="string">'status'</span>]:</div><div class="line">                    isnotloaded = <span class="keyword">False</span></div><div class="line">            <span class="keyword">except</span> IndexError:</div><div class="line">                <span class="keyword">pass</span></div><div class="line"></div><div class="line">        body = driver.page_source</div><div class="line">        status_code = response[<span class="string">'status'</span>]</div><div class="line">        headers = [(x[<span class="string">'name'</span>], x[<span class="string">'value'</span>]) <span class="keyword">for</span> x <span class="keyword">in</span> response[<span class="string">'headers'</span>]]</div><div class="line">        <span class="keyword">return</span> HtmlResponse(driver.current_url, body=body,</div><div class="line">                            status=status_code, headers=headers,</div><div class="line">                            encoding=encoding, request=request)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.driver <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.driver = webdriver.PhantomJS()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> request.method != <span class="string">'GET'</span>:</div><div class="line">            <span class="keyword">raise</span> NotImplementedError(</div><div class="line">                <span class="string">'Do not support &#123;r.method&#125; method'</span>.format(r=request))</div><div class="line"></div><div class="line">        isnotworking = <span class="keyword">True</span></div><div class="line">        <span class="keyword">while</span> isnotworking:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="keyword">return</span> self._process_request(request, spider)</div><div class="line">            <span class="keyword">except</span> multiprocessing.context.TimeoutError:</div><div class="line">                logger.warning(<span class="string">'Timeout ...'</span>)</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                msg = str(e).strip()</div><div class="line">                <span class="keyword">if</span> msg:</div><div class="line">                    logger.error(msg)</div><div class="line"></div><div class="line">            logger.info(<span class="string">'restart process_request'</span>)</div><div class="line">            self.driver.quit()</div><div class="line">            self.driver = webdriver.PhantomJS()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>然后在设置里导入该<strong>Middleware</strong></p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># settings.py</span></div><div class="line"><span class="comment"># ...</span></div><div class="line">DOWNLOADER_MIDDLEWARES = &#123;</div><div class="line">    <span class="comment"># 作为request处理的最后一站，优先级应设为最低</span></div><div class="line">    <span class="string">'project.middlewares.PhantomJSMiddleware'</span>: <span class="number">0</span>,</div><div class="line">    <span class="comment"># 不需要解压缩，禁止该插件</span></div><div class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="keyword">None</span>,</div><div class="line">&#125;</div><div class="line"><span class="comment"># ...</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<h1 id="参考链接">
  <a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1>
<blockquote class="pullquote">
  <ul>
    <li><a href="https://github.com/SeleniumHQ/selenium/tree/master/py" target="_blank" rel="external">Selenium-Python</a></li>
    <li><a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities" target="_blank" rel="external">Selenium-DesiredCapabilities</a></li>
    <li><a href="http://phantomjs.org/api/webpage/property/settings.html" target="_blank" rel="external">phantomjs.page.settings</a></li>
    <li><a href="https://github.com/detro/ghostdriver#faq" target="_blank" rel="external">Ghost Driver F.A.Q.</a></li>
    <li><a href="https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#proxy-json-object" target="_blank" rel="external">Selenium Proxy</a></li>
    <li><a href="http://stackoverflow.com/a/35139284/7035932" target="_blank" rel="external">Timeout decorator</a></li>
  </ul>
</blockquote>
<h1 id="Scrapy学习日记">
  <a href="#Scrapy学习日记" class="headerlink" title="Scrapy学习日记"></a>Scrapy学习日记</h1>
<blockquote class="pullquote">
  <ol>
    <li><a href="/2017/04/15/Scrapy学习日记-一-·-run-many-spiders/" title="Scrapy学习日记 一 · run many spiders">Scrapy学习日记 一 · run many spiders</a></li>
    <li><a href="/2017/04/23/Scrapy学习日记-二-·-Selenium-PhantomJS/" title="Scrapy学习日记 二 · Selenium+PhantomJS">Scrapy学习日记 二 · Selenium+PhantomJS</a></li>
  </ol>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在爬虫文章一大堆，内容却千遍一律。&lt;br&gt;我想写和这些不一样的，可为啥还要讲&lt;strong&gt;Selenium&lt;/strong&gt;和&lt;strong&gt;PhantomJS&lt;/strong&gt;呢？&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://linw1995.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://linw1995.com/tags/Scrapy/"/>
    
      <category term="Selenium" scheme="http://linw1995.com/tags/Selenium/"/>
    
      <category term="PhantomJS" scheme="http://linw1995.com/tags/PhantomJS/"/>
    
  </entry>
  
  <entry>
    <title>分享 Way Back Into Love - Haley Bennett/Hugh Grant</title>
    <link href="http://linw1995.com/2017/04/17/%E5%88%86%E4%BA%AB-Way-Back-Into-Love-Haley-Bennett-Hugh-Grant/"/>
    <id>http://linw1995.com/2017/04/17/分享-Way-Back-Into-Love-Haley-Bennett-Hugh-Grant/</id>
    <published>2017-04-17T14:33:23.000Z</published>
    <updated>2017-04-27T10:30:29.116Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/2qrkapxFihM" frameborder="0" allowfullscreen></iframe></div>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=no border=0 marginwidth=0 marginheight=0 width=100% height=86 src=//music.163.com/outchain/player?type=2&amp;id=5046372&amp;auto=0&amp;height=66&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="Share" scheme="http://linw1995.com/categories/Share/"/>
    
    
      <category term="Music" scheme="http://linw1995.com/tags/Music/"/>
    
      <category term="YouTube" scheme="http://linw1995.com/tags/YouTube/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy学习日记 一 · run many spiders</title>
    <link href="http://linw1995.com/2017/04/15/Scrapy%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0-%E4%B8%80-%C2%B7-run-many-spiders/"/>
    <id>http://linw1995.com/2017/04/15/Scrapy学习日记-一-·-run-many-spiders/</id>
    <published>2017-04-15T02:32:50.000Z</published>
    <updated>2017-05-24T10:42:50.983Z</updated>
    
    <content type="html"><![CDATA[<p>这两周都在学习使用这个爬虫框架，略有收获。<br>把一些小技巧分享给大家。<br>
  <a id="more"></a>
</p>
<h1 id="template-自定模板">
  <a href="#template-自定模板" class="headerlink" title="template 自定模板"></a>template 自定模板</h1>
<p>用过<strong>Scrapy</strong>的人都知道，有生成<strong>Spider</strong>的命令</p>
<pre><code>scrapy genspider mydomain mydomain.com
</code></pre>
<p>其实我们可以自定模板，然后一样通过这个命令生成出爬虫。</p>
<!-- markdownlint-disable MD022 MD012 -->
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"># common.tmpl</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import scrapy</div><div class="line"></div><div class="line"></div><div class="line">class $classname(scrapy.Spider):</div><div class="line">    name = &quot;$name&quot;</div><div class="line">    allowed_domains = [&quot;$domain&quot;]</div><div class="line">    start_urls = [&apos;http://$domain/&apos;]</div><div class="line"></div><div class="line">    def parse(self, response):</div><div class="line">        pass</div></pre>
      </td>
    </tr>
  </table>
</figure>
<!-- markdownlint-enable MD022 MD012-->
<p>在根目录下创建新的文件夹来存放自定模板,再把写好的common.tmpl保存到里面</p>
<pre><code>scrapy.cfg
myprojec/
    __init__.py
    items.py
    pipelines.py
    settings.py
    templates/
        spiders/
            common.tmpl
    spiders/
        __init__.py
        spider1.py
        spider2.py
        ...
</code></pre>
<p>然后修改设置，添加TEMPLATES_DIR<br>
  <!-- markdownlint-disable MD022 MD026 -->
</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># settings.py</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</div><div class="line"><span class="comment"># ...</span></div><div class="line"></div><div class="line">basedir = os.path.dirname(__file__)</div><div class="line">TEMPLATES_DIR = os.path.abspath os.path.join(basedir, <span class="string">'templates'</span>))</div><div class="line"><span class="comment"># ...</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<!-- markdownlint-enable MD022 MD026-->
<p>然后即可使用该命令生成<strong>Spider</strong>了</p>
<pre><code>scrapy genspider -t common mydomain mydomain.com
</code></pre>
<h1 id="command-自定命令">
  <a href="#command-自定命令" class="headerlink" title="command 自定命令"></a>command 自定命令</h1>
<p>用<strong>template</strong>模板生成了大量的<strong>Spider</strong>,想要用一个命令让他们一起运行怎么办。<br>通过自定<strong>command</strong>,满足你的</p>
<!-- markdownlint-disable MD022 MD026 MD012 -->
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># runallspider.py</span></div><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> scrapy.commands <span class="keyword">import</span> ScrapyCommand</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span><span class="params">(ScrapyCommand)</span>:</span></div><div class="line"></div><div class="line">    requires_project = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">syntax</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'[options]'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">short_desc</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Runs all of the spiders'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, args, opts)</span>:</span></div><div class="line">        <span class="keyword">for</span> spider_name <span class="keyword">in</span> self.crawler_process.spider_loader.list():</div><div class="line">            self.crawler_process.crawl(spider_name)</div><div class="line">        self.crawler_process.start()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<!-- markdownlint-enable MD022 MD026 MD012 -->
<p>也同<strong>template</strong>一样，在根目录下创建一文件夹commands，把写好的runallspider.py保存到里面去<br>然后修改设置，添加COMMANDS_MODULE<br>
  <!-- markdownlint-disable MD022 MD026 -->
</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># settings.py</span></div><div class="line"><span class="comment"># ...</span></div><div class="line">COMMANDS_MODULE = <span class="string">'myproject.commands'</span></div><div class="line"><span class="comment"># ...</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<!-- markdownlint-enable MD022 MD026 -->
<p>然后即可使用该命令同时运行所有<strong>Spider</strong>了</p>
<pre><code>scrapy runallspider
</code></pre>
<h1 id="job-Spider的暂停-恢复">
  <a href="#job-Spider的暂停-恢复" class="headerlink" title="job Spider的暂停\恢复"></a>job Spider的暂停\恢复</h1>
<p>和<strong>Linux</strong>系统下的<strong>job</strong>命令类似，用来保存<strong>Spider</strong>状态，以下次启动<strong>Spider</strong>来恢复之前的保存的爬取状态</p>
<p>首先要修改设置，添加JOBDIR<br>
  <!-- markdownlint-disable MD022 MD026 -->
</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># settings.py</span></div><div class="line"><span class="comment"># ...</span></div><div class="line">JOBDIR = os.path.abspath os.path.join(basedir, <span class="string">'jobs'</span>))</div><div class="line"><span class="comment"># ...</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<!-- markdownlint-enable MD022 MD026 -->
<p>然后像往常一样运行爬虫即可，也可以通过重载设置来临时使用</p>
<pre><code>scrapy crawl spider -s JOBDIR=jobs/spider
</code></pre>
<p>爬虫暂停后，也是通过以上命令恢复到之前保存的状态</p>
<p>可是现在我们运行<code>scrapy runallspider</code>命令就会出错，这是因为<strong>Scrapy</strong>设计时只考虑运行单例<strong>Spider</strong><br>我们只需对存储<strong>Spider</strong>状态的类代码进行修改，使其能满足我们的要求</p>
<!-- markdownlint-disable MD022 MD026 MD012 -->
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># ext/__init__.py</span></div><div class="line"><span class="comment"># -*- coding: utf - 8 - *-</span></div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> pickle</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</div><div class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> task</div><div class="line"></div><div class="line"><span class="keyword">from</span> scrapy.core.scheduler <span class="keyword">import</span> Scheduler <span class="keyword">as</span> SchedulerBase</div><div class="line"><span class="keyword">from</span> scrapy.dupefilters <span class="keyword">import</span> RFPDupeFilter <span class="keyword">as</span> RFPDupeFilterBase</div><div class="line"><span class="keyword">from</span> scrapy.extensions.logstats <span class="keyword">import</span> LogStats <span class="keyword">as</span> LogStatsBase</div><div class="line"><span class="keyword">from</span> scrapy.extensions.spiderstate <span class="keyword">import</span> SpiderState <span class="keyword">as</span> SpiderStateBase</div><div class="line"><span class="keyword">from</span> scrapy.utils.job <span class="keyword">import</span> job_dir</div><div class="line"><span class="keyword">from</span> scrapy.utils.misc <span class="keyword">import</span> load_object</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">StatsCollector</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, crawler)</span>:</span></div><div class="line">        self._dump = crawler.settings.getbool(<span class="string">'STATS_DUMP'</span>)</div><div class="line">        self._stats = defaultdict(dict)</div><div class="line">        self.jobdir = job_dir(crawler.settings)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_value</span><span class="params">(self, key, default=None, spider=None)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._stats[spider.name <span class="keyword">if</span> spider <span class="keyword">else</span> <span class="keyword">None</span>].get(key, default)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_stats</span><span class="params">(self, spider=None)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._stats[spider.name <span class="keyword">if</span> spider <span class="keyword">else</span> <span class="keyword">None</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_all_stats</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._stats</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_value</span><span class="params">(self, key, value, spider=None)</span>:</span></div><div class="line">        self._stats[spider.name <span class="keyword">if</span> spider <span class="keyword">else</span> <span class="keyword">None</span>][key] = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_stats</span><span class="params">(self, stats, spider=None)</span>:</span></div><div class="line">        self._stats[spider.name <span class="keyword">if</span> spider <span class="keyword">else</span> <span class="keyword">None</span>] = stats</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inc_value</span><span class="params">(self, key, count=<span class="number">1</span>, start=<span class="number">0</span>, spider=None)</span>:</span></div><div class="line">        d = self._stats[spider.name <span class="keyword">if</span> spider <span class="keyword">else</span> <span class="keyword">None</span>]</div><div class="line">        d[key] = d.setdefault(key, start) + count</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">max_value</span><span class="params">(self, key, value, spider=None)</span>:</span></div><div class="line">        d = self._stats[spider.name <span class="keyword">if</span> spider <span class="keyword">else</span> <span class="keyword">None</span>]</div><div class="line">        d[key] = max(d.setdefault(key, value), value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min_value</span><span class="params">(self, key, value, spider=None)</span>:</span></div><div class="line">        d = self._stats[spider.name <span class="keyword">if</span> spider <span class="keyword">else</span> <span class="keyword">None</span>]</div><div class="line">        d[key] = min(d.setdefault(key, value), value)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_stats</span><span class="params">(self, spider=None)</span>:</span></div><div class="line">        self._stats[spider.name <span class="keyword">if</span> spider <span class="keyword">else</span> <span class="keyword">None</span>].clear()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear_all_stats</span><span class="params">(self)</span>:</span></div><div class="line">        self._stats.clear()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></div><div class="line">        loadpath = os.path.join(self.jobdir, <span class="string">'stats'</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(loadpath):</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">with</span> open(loadpath, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</div><div class="line">            self._stats = pickle.load(f)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider, reason)</span>:</span></div><div class="line">        dumppath = os.path.join(self.jobdir, <span class="string">'stats'</span>)</div><div class="line">        <span class="keyword">with</span> open(dumppath, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            pickle.dump(self._stats, f)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderState</span><span class="params">(SpiderStateBase)</span>:</span></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">statefn</span><span class="params">(self)</span>:</span></div><div class="line">        statedir = os.path.join(</div><div class="line">            self.jobdir,</div><div class="line">            self.spider_name) <span class="keyword">if</span> self.spider_name <span class="keyword">else</span> self.jobdir</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(statedir):</div><div class="line">            os.makedirs(statedir)</div><div class="line">        <span class="keyword">return</span> os.path.join(statedir, <span class="string">'spider.state'</span>)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        obj = super(SpiderState, cls).from_crawler(crawler)</div><div class="line">        obj.spider_name = crawler.spidercls.name <span class="keyword">if</span> crawler.spidercls <span class="keyword">else</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">return</span> obj</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Scheduler</span><span class="params">(SchedulerBase)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        settings = crawler.settings</div><div class="line">        dupefilter_cls = load_object(settings[<span class="string">'DUPEFILTER_CLASS'</span>])</div><div class="line">        dupefilter = dupefilter_cls.from_crawler(crawler)</div><div class="line">        pqclass = load_object(settings[<span class="string">'SCHEDULER_PRIORITY_QUEUE'</span>])</div><div class="line">        dqclass = load_object(settings[<span class="string">'SCHEDULER_DISK_QUEUE'</span>])</div><div class="line">        mqclass = load_object(settings[<span class="string">'SCHEDULER_MEMORY_QUEUE'</span>])</div><div class="line">        logunser = settings.getbool(</div><div class="line">            <span class="string">'LOG_UNSERIALIZABLE_REQUESTS'</span>, settings.getbool(<span class="string">'SCHEDULER_DEBUG'</span>))</div><div class="line">        obj = cls(dupefilter, jobdir=job_dir(settings),</div><div class="line">                  logunser=logunser, stats=crawler.stats,</div><div class="line">                  pqclass=pqclass, dqclass=dqclass, mqclass=mqclass)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> crawler.spidercls:</div><div class="line">            obj.spider_name = crawler.spidercls.name</div><div class="line">            obj.dqdir = obj._dqdir(job_dir(settings))</div><div class="line">        <span class="keyword">return</span> obj</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_dqdir</span><span class="params">(self, jobdir)</span>:</span></div><div class="line">        <span class="keyword">if</span> jobdir:</div><div class="line">            jobdir = os.path.join(</div><div class="line">                jobdir, self.spider_name) \</div><div class="line">                <span class="keyword">if</span> hasattr(self, <span class="string">'spider_name'</span>) <span class="keyword">else</span> jobdir</div><div class="line">            dqdir = os.path.join(jobdir, <span class="string">'requests.queue'</span>)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dqdir):</div><div class="line">                os.makedirs(dqdir)</div><div class="line">            <span class="keyword">return</span> dqdir</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RFPDupeFilter</span><span class="params">(RFPDupeFilterBase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=None, debug=False, spider_name=None)</span>:</span></div><div class="line">        super(RFPDupeFilter, self).__init__(path=<span class="keyword">None</span>, debug=debug)</div><div class="line">        <span class="keyword">if</span> path:</div><div class="line">            <span class="keyword">if</span> spider_name:</div><div class="line">                path = os.path.join(path, spider_name)</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</div><div class="line">                    os.makedirs(path)</div><div class="line">            path = os.path.join(path, <span class="string">'requests.seen'</span>)</div><div class="line">            self.file = open(path, <span class="string">'a+'</span>)</div><div class="line">            self.file.seek(<span class="number">0</span>)</div><div class="line">            self.fingerprints.update(x.rstrip() <span class="keyword">for</span> x <span class="keyword">in</span> self.file)</div><div class="line"></div><div class="line"><span class="meta">    @classmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></div><div class="line">        settings = crawler.settings</div><div class="line">        debug = settings.getbool(<span class="string">'BUPEFILTER_DEBUG'</span>)</div><div class="line">        <span class="keyword">return</span> cls(job_dir(settings), debug,</div><div class="line">                   crawler.spidercls.name <span class="keyword">if</span> crawler.spidercls <span class="keyword">else</span> <span class="keyword">None</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogStats</span><span class="params">(LogStatsBase)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_opened</span><span class="params">(self, spider)</span>:</span></div><div class="line">        self.itemsprev = self.stats.get_value(</div><div class="line">            <span class="string">'item_scraped_count'</span>, <span class="number">0</span>, spider)</div><div class="line">        self.pagesprev = self.stats.get_value(</div><div class="line">            <span class="string">'response_received_count'</span>, <span class="number">0</span>, spider)</div><div class="line"></div><div class="line">        self.task = task.LoopingCall(self.log, spider)</div><div class="line">        self.task.start(self.interval)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(self, spider)</span>:</span></div><div class="line">        LogStatslogger = logging.getLogger(spider.name)</div><div class="line"></div><div class="line">        items = self.stats.get_value(<span class="string">'item_scraped_count'</span>, <span class="number">0</span>, spider)</div><div class="line">        pages = self.stats.get_value(<span class="string">'response_received_count'</span>, <span class="number">0</span>, spider)</div><div class="line">        irate = (items - self.itemsprev) * self.multiplier</div><div class="line">        prate = (pages - self.pagesprev) * self.multiplier</div><div class="line">        self.pagesprev, self.itemsprev = pages, items</div><div class="line"></div><div class="line">        msg = (<span class="string">"Crawled %(pages)d pages (at %(pagerate)d pages/min), "</span></div><div class="line">               <span class="string">"scraped %(items)d items (at %(itemrate)d items/min)"</span>)</div><div class="line">        log_args = &#123;<span class="string">'pages'</span>: pages, <span class="string">'pagerate'</span>: prate,</div><div class="line">                    <span class="string">'items'</span>: items, <span class="string">'itemrate'</span>: irate&#125;</div><div class="line">        LogStatslogger.info(msg, log_args, extra=&#123;<span class="string">'spider'</span>: spider&#125;)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<!-- markdownlint-enable MD022 MD026 MD012 -->
<p>把以上代码保存到根目录下的<code>ext\__init__.py</code>中，最后修改设置<br>
  <!-- markdownlint-disable MD022 MD026 -->
</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># settings.py...</span></div><div class="line">DUPEFILTER_CLASS = <span class="string">'myproject.ext.RFPDupeFilter'</span></div><div class="line">SCHEDULER = <span class="string">'myproject.ext.Scheduler'</span></div><div class="line">EXTENSIONS_BASE = &#123;</div><div class="line">    <span class="string">'myproject.ext.LogStats'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'myproject.ext.SpiderState'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'scrapy.extensions.corestats.CoreStats'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'scrapy.extensions.telnet.TelnetConsole'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'scrapy.extensions.memusage.MemoryUsage'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'scrapy.extensions.memdebug.MemoryDebugger'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'scrapy.extensions.closespider.CloseSpider'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'scrapy.extensions.feedexport.FeedExporter'</span>: <span class="number">0</span>,</div><div class="line">    <span class="string">'scrapy.extensions.throttle.AutoThrottle'</span>: <span class="number">0</span>,</div><div class="line">&#125;</div><div class="line"><span class="comment"># ...</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<!-- markdownlint-enable MD022 MD026 -->
<p>现在运行<code>scrapy runallspider</code>就没问题了，暂停，等下次重新启动也就能恢复到原来的爬虫状态。</p>
<h1 id="结论">
  <a href="#结论" class="headerlink" title="结论"></a>结论</h1>
<p><strong>Scrapy</strong>是一个十分强大且支持扩展的爬虫框架</p>
<ol>
  <li><strong>template</strong>模板,让我们少写了许多代码;</li>
  <li><strong>command</strong>自定命令,让我们可以偷懒 :) ；</li>
  <li><strong>job</strong> <strong>Spider</strong>的暂停\恢复,这个功能太强大了。<br> 不仅只是保存<strong>Spider</strong>这几类状态，比如说通过重载<strong>pipeline</strong>中的<br><code>open_spider(spider)</code>和<code>closed_spider(spider)</code>方法,来保存<strong>pipeline</strong>的状态，以供下次恢复</li>
</ol>
<h1 id="Scrapy学习日记">
  <a href="#Scrapy学习日记" class="headerlink" title="Scrapy学习日记"></a>Scrapy学习日记</h1>
<blockquote class="pullquote">
  <ol>
    <li><a href="/2017/04/15/Scrapy学习日记-一-·-run-many-spiders/" title="Scrapy学习日记 一 · run many spiders">Scrapy学习日记 一 · run many spiders</a></li>
    <li><a href="/2017/04/23/Scrapy学习日记-二-·-Selenium-PhantomJS/" title="Scrapy学习日记 二 · Selenium+PhantomJS">Scrapy学习日记 二 · Selenium+PhantomJS</a></li>
  </ol>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两周都在学习使用这个爬虫框架，略有收获。&lt;br&gt;把一些小技巧分享给大家。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://linw1995.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://linw1995.com/tags/Scrapy/"/>
    
  </entry>
  
  <entry>
    <title>折腾VSCode记 二 · Settings Sync</title>
    <link href="http://linw1995.com/2017/04/12/%E6%8A%98%E8%85%BEVSCode%E8%AE%B0-%E4%BA%8C-%C2%B7-Settings-Sync/"/>
    <id>http://linw1995.com/2017/04/12/折腾VSCode记-二-·-Settings-Sync/</id>
    <published>2017-04-12T15:03:42.000Z</published>
    <updated>2017-07-02T05:48:08.660Z</updated>
    
    <content type="html"><![CDATA[<p>假如有一天你重装系统了，或者换电脑了，或者有多台电脑，每次重新配置<strong>VSCode</strong>也太麻烦了。<br><img src="/2017/04/12/折腾VSCode记-二-·-Settings-Sync/cloud.png" alt="SettingSync-Logo" title="SettingSync-Logo"> <strong>Setting Sync</strong><br>这个插件就完美的解决了这个问题。<br>
  <a id="more"></a>
</p>
<p>利用了<strong>Github Gist服务</strong>来保存<strong>VSCode</strong>的状态（设置、插件等等），<br>除了自己可用外，还可以分享自己的配置给别人。</p>
<h2 id="项目传送门">
  <a href="#项目传送门" class="headerlink" title="项目传送门"></a>项目传送门</h2>
<ul>
  <li><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="external">VSCode marketplac - Settings Sync</a> </li>
  <li><a href="https://github.com/shanalikhan/code-settings-sync" target="_blank" rel="external">Github - code-settings-sync</a> </li>
</ul>
<h2 id="可同步内容">
  <a href="#可同步内容" class="headerlink" title="可同步内容"></a>可同步内容</h2>
<p>All the extensions and complete User Folder that Contains</p>
<ol>
  <li>Settings File</li>
  <li>Keybinding File</li>
  <li>Launch File</li>
  <li>Snippets Folder</li>
  <li>VSCode Extensions Settings</li>
  <li>Workspaces</li>
</ol>
<h2 id="如何使用">
  <a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2>
<p>首先要安装</p>
<h3 id="安装">
  <a href="#安装" class="headerlink" title="安装"></a>安装</h3>
<p>在<strong>VSCode</strong>中按下<code>Ctrl</code> + <code>P</code> 输入</p>
<pre><code>ext install code-settings-sync
</code></pre>
<h3 id="配置">
  <a href="#配置" class="headerlink" title="配置"></a>配置</h3>
<h4 id="Github-personal-access-tokens">
  <a href="#Github-personal-access-tokens" class="headerlink" title="Github personal access tokens"></a>Github personal access tokens</h4>
<p>先到<strong>Github</strong>个人设置页面，生成有生成<strong>Gist</strong>权限的密钥</p>
<h4 id="第一次上传">
  <a href="#第一次上传" class="headerlink" title="第一次上传"></a>第一次上传</h4>
<p>在<strong>VSCode</strong>按下<code>Shift</code>+<code>Alt</code>+<code>U</code>, 编辑器上方会弹出输入框，<br>输入生成的密钥，即可。</p>
<h4 id="其它设置">
  <a href="#其它设置" class="headerlink" title="其它设置"></a>其它设置</h4>
<p>手动下载配置，按下<code>Shift</code>+<code>Alt</code>+<code>D</code>。<br>还可以设置自动同步，每次打开时都会检查自动下载新版本，真棒！<br>也支持自定同步内容。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假如有一天你重装系统了，或者换电脑了，或者有多台电脑，每次重新配置&lt;strong&gt;VSCode&lt;/strong&gt;也太麻烦了。&lt;br&gt;&lt;img src=&quot;/2017/04/12/折腾VSCode记-二-·-Settings-Sync/cloud.png&quot; alt=&quot;SettingSync-Logo&quot; title=&quot;SettingSync-Logo&quot;&gt; &lt;strong&gt;Setting Sync&lt;/strong&gt;&lt;br&gt;这个插件就完美的解决了这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="Others" scheme="http://linw1995.com/categories/Others/"/>
    
    
      <category term="VSCode" scheme="http://linw1995.com/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>分享 你就不要想起我(Cover 张杰)-唯默</title>
    <link href="http://linw1995.com/2017/04/10/%E5%88%86%E4%BA%AB-%E4%BD%A0%E5%B0%B1%E4%B8%8D%E8%A6%81%E6%83%B3%E8%B5%B7%E6%88%91-Cover-%E5%BC%A0%E6%9D%B0/"/>
    <id>http://linw1995.com/2017/04/10/分享-你就不要想起我-Cover-张杰/</id>
    <published>2017-04-10T14:27:41.000Z</published>
    <updated>2017-04-27T10:18:02.153Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="100%" height="86" src="//music.163.com/outchain/player?type=2&id=465576914&auto=0&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;100%&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;id
    
    </summary>
    
      <category term="Share" scheme="http://linw1995.com/categories/Share/"/>
    
    
      <category term="Music" scheme="http://linw1995.com/tags/Music/"/>
    
  </entry>
  
  <entry>
    <title>折腾VSCode记 一 · Python Traceback Jumper</title>
    <link href="http://linw1995.com/2017/04/09/%E6%8A%98%E8%85%BEVSCode%E8%AE%B0-%E4%B8%80-%C2%B7-Python-Traceback-Jumper/"/>
    <id>http://linw1995.com/2017/04/09/折腾VSCode记-一-·-Python-Traceback-Jumper/</id>
    <published>2017-04-09T13:58:44.000Z</published>
    <updated>2017-08-04T14:37:59.600Z</updated>
    
    <content type="html"><![CDATA[<p>因为<strong>Pycharm</strong>到期了，就开始折腾<strong>VSCode</strong>。<br>使用中，写一些<strong>Python</strong>代码时，觉得缺少一个功能 <strong>Traceback点击跳转</strong>。<br>所以就花了一整天翻看<strong>VSCode</strong>官方文档，写了个插件<br><img src="/2017/04/09/折腾VSCode记-一-·-Python-Traceback-Jumper/icon.png" alt="python traceback jumper" title="python traceback jumper"></p>
<a id="more"></a>
<p>从三月18号发布，截止到今天四月9号，下载量已经<strong>1K</strong>了。<br>写之前也没想很多，觉得不需要写很多代码，也不知道要用<strong>TypeScript</strong>写，也不会 = =。<br>翻了一遍官方文档，看了下<strong>VSCode</strong>部分源码，相关的<strong>Github issue</strong>，凭着一腔热血给做出来了。<br>代码也就50多行 果然:），利用了<strong>Regex正则表达式</strong>和<strong>VSCode</strong>提供的Api，就实现了这个功能。</p>
<h2 id="更新-2017年8月4日">
  <a href="#更新-2017年8月4日" class="headerlink" title="更新 2017年8月4日"></a>更新 2017年8月4日</h2>
<p>这个插件从那天写完后就基本没改过了（〃｀ 3′〃），因为这个插件真是太简单了。过了这么久VSCode经过了几次更新，不知道哪一次，本插件就彻底废了┭┮﹏┭┮<br>不过VSCode相对于以前更好用了，哈哈。重看了下官方文档，发现之前的task中的problemMatcher更新了，能用来代替本插件( •̀ ω •́ )✧</p>
<h3 id="配置">
  <a href="#配置" class="headerlink" title="配置"></a>配置</h3>
<p><a href="https://gist.github.com/linw1995/225a8d0e1cd32a51e44b2aab3af3f1dc" target="_blank" rel="external">Gist | VSCode Task.json for Python Traceback.</a></p>
<figure class="highlight json">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">&#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>,</div><div class="line">    <span class="attr">"tasks"</span>: [&#123;</div><div class="line">        <span class="attr">"taskName"</span>: <span class="string">"Run Python"</span>,</div><div class="line">        <span class="attr">"group"</span>: &#123;</div><div class="line">            <span class="attr">"kind"</span>: <span class="string">"build"</span>,</div><div class="line">            <span class="attr">"isDefault"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"command"</span>: <span class="string">"$&#123;config:python.pythonPath&#125;"</span>,</div><div class="line">        <span class="attr">"type"</span>: <span class="string">"shell"</span>,</div><div class="line">        <span class="attr">"args"</span>: [</div><div class="line">            <span class="string">"$&#123;file&#125;"</span></div><div class="line">        ],</div><div class="line">        <span class="attr">"presentation"</span>: &#123;</div><div class="line">            <span class="attr">"reveal"</span>: <span class="string">"always"</span>,</div><div class="line">            <span class="attr">"panel"</span>: <span class="string">"new"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"problemMatcher"</span>: &#123;</div><div class="line">            <span class="attr">"fileLocation"</span>: <span class="string">"absolute"</span>,</div><div class="line">            <span class="attr">"pattern"</span>: [&#123;</div><div class="line">                <span class="attr">"regexp"</span>: <span class="string">"^\\s+File \"(.*?)\", line ([0-9]+)[,]?.+?$"</span>,</div><div class="line">                <span class="attr">"line"</span>: <span class="number">2</span>,</div><div class="line">                <span class="attr">"file"</span>: <span class="number">1</span>,</div><div class="line">                <span class="attr">"message"</span>: <span class="number">0</span></div><div class="line">            &#125;, &#123;</div><div class="line">                <span class="attr">"regexp"</span>: <span class="string">"^\\s+(.+?)$"</span>,</div><div class="line">                <span class="attr">"code"</span>: <span class="number">1</span></div><div class="line">            &#125;]</div><div class="line">        &#125;</div><div class="line">    &#125;]</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="项目传送门">
  <a href="#项目传送门" class="headerlink" title="项目传送门"></a>项目传送门</h2>
<ul>
  <li><a href="https://marketplace.visualstudio.com/items?itemName=linw1995.python-traceback-jumper" target="_blank" rel="external">VSCode marketplace - python traceback jumper</a></li>
  <li><a href="https://github.com/linw1995/python-traceback-jumper" target="_blank" rel="external">Github - python-traceback-jumper</a> </li>
</ul>
<h2 id="如何使用">
  <a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2>
<p>首先要安装</p>
<h3 id="安装">
  <a href="#安装" class="headerlink" title="安装"></a>安装</h3>
<p>在<strong>VSCode</strong>中按下<code>Ctrl</code> + <code>P</code> 输入</p>
<pre><code>ext install python-traceback-jumper
</code></pre>
<h3 id="配置-1">
  <a href="#配置-1" class="headerlink" title="配置"></a>配置</h3>
<p>在工作区下的<code>setting.json</code>中添加</p>
<pre><code>&quot;python.tracebackJumper.enable&quot;: true
</code></pre>
<p>目前只能在<strong>output</strong>输出栏下使用。所以必须配置<strong>task</strong>。<br>编辑 <code>task.json</code></p>
<figure class="highlight json">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">&#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"$&#123;config.python.pythonPath&#125;"</span>,</div><div class="line">    <span class="attr">"isShellCommand"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"args"</span>: [<span class="string">"$&#123;file&#125;"</span>],</div><div class="line">    <span class="attr">"showOutput"</span>: <span class="string">"always"</span> // 一定要showOutput</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="吐槽">
  <a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2>
<p>其实在<strong>terminal</strong>中会通过<strong>Regex</strong>来提供跳转链接，不过这是<strong>VSCode</strong>内建的。。。:)<br>为啥不连<strong>Output</strong>输出栏也搞了，还有<strong>DEBUG</strong>输出栏。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为&lt;strong&gt;Pycharm&lt;/strong&gt;到期了，就开始折腾&lt;strong&gt;VSCode&lt;/strong&gt;。&lt;br&gt;使用中，写一些&lt;strong&gt;Python&lt;/strong&gt;代码时，觉得缺少一个功能 &lt;strong&gt;Traceback点击跳转&lt;/strong&gt;。&lt;br&gt;所以就花了一整天翻看&lt;strong&gt;VSCode&lt;/strong&gt;官方文档，写了个插件&lt;br&gt;&lt;img src=&quot;/2017/04/09/折腾VSCode记-一-·-Python-Traceback-Jumper/icon.png&quot;
    alt=&quot;python traceback jumper&quot; title=&quot;python traceback jumper&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://linw1995.com/categories/Others/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
      <category term="VSCode" scheme="http://linw1995.com/tags/VSCode/"/>
    
      <category term="TypeScript" scheme="http://linw1995.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>成为一个DictionaryKey的条件</title>
    <link href="http://linw1995.com/2017/04/08/%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AADictionaryKey%E7%9A%84%E6%9D%A1%E4%BB%B6/"/>
    <id>http://linw1995.com/2017/04/08/成为一个DictionaryKey的条件/</id>
    <published>2017-04-08T07:50:51.000Z</published>
    <updated>2017-05-24T10:42:51.173Z</updated>
    
    <content type="html"><![CDATA[<p>一个dict的键不就是字符串嘛，No!No!No!</p>
<a id="more"></a>
<h1 id="需求">
  <a href="#需求" class="headerlink" title="需求"></a>需求</h1>
<p>在面对复杂映射关系，简单的字符串可满足不了我们的需求。<br>为避免太多的重复的代码，进一步提高代码可读性，我们需要定制自己的key。</p>
<h1 id="Python中的dict是如果工作的呢？">
  <a href="#Python中的dict是如果工作的呢？" class="headerlink" title="Python中的dict是如果工作的呢？"></a><strong>Python</strong>中的<strong>dict</strong>是如果工作的呢？</h1>
<p>是利用了<strong>hash table散列表</strong>，来进行索引。<br>索引算法示例如下:</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup</span><span class="params">(d, key)</span>:</span></div><div class="line">    <span class="string">'''dictionary lookup is done in three steps:</span></div><div class="line">       1. 用hash函数计算key的散列值</div><div class="line"></div><div class="line">       2. 取出对应的散列值的表元bucket</div><div class="line"></div><div class="line">       3. 比对key来取出key所对应的值</div><div class="line">    '''</div><div class="line">    h = hash(key)                  <span class="comment"># step 1</span></div><div class="line">    cl = d.data[h]                 <span class="comment"># step 2</span></div><div class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> cl:                <span class="comment"># step 3</span></div><div class="line">        <span class="keyword">if</span> key == pair[<span class="number">0</span>]:</div><div class="line">            <span class="keyword">return</span> pair[<span class="number">1</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">raise</span> KeyError, <span class="string">"Key %s not found."</span> % key</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>从以上总结出来，成为一个<strong>DictoinaryKeys</strong>的条件就是：</p>
<ol>
  <li>实现<strong><strong>hash</strong></strong>方法</li>
  <li>实现<strong><strong>eq</strong></strong>方法</li>
</ol>
<h1 id="实例">
  <a href="#实例" class="headerlink" title="实例"></a>实例</h1>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xpath</span>:</span></div><div class="line">    __slots__ = (<span class="string">"string"</span>, <span class="string">"identity"</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, xpath: str)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        &gt;&gt;&gt; xpath = Xpath('/html/div[1]')</div><div class="line">        &gt;&gt;&gt; xpath.string</div><div class="line">        '/html/div[1]'</div><div class="line">        &gt;&gt;&gt; xpath.identity</div><div class="line">        '/html[1]/div[1]'</div><div class="line">        &gt;&gt;&gt; xpath_1 = xpath</div><div class="line">        &gt;&gt;&gt; xpath_2 = Xpath('/html/div')</div><div class="line">        &gt;&gt;&gt; xpath_3 = Xpath('/html/body')</div><div class="line">        &gt;&gt;&gt; dictionary = dict()</div><div class="line">        &gt;&gt;&gt; dictionary[xpath_1] = 1</div><div class="line">        &gt;&gt;&gt; dictionary[xpath_2]</div><div class="line">        1</div><div class="line">        &gt;&gt;&gt; dictionary[xpath_3]</div><div class="line">        Traceback (most recent call last):</div><div class="line">        ...</div><div class="line">        KeyError: '/html/body'</div><div class="line">        &gt;&gt;&gt; dictionary</div><div class="line">        &#123;'/html/div[1]': 1&#125;</div><div class="line">        '''</div><div class="line">        self.string = xpath.strip()</div><div class="line">        self.identity = <span class="string">"/"</span>.join(</div><div class="line">            (map(<span class="keyword">lambda</span> x: x + <span class="string">"[1]"</span> <span class="keyword">if</span> x <span class="keyword">and</span> <span class="keyword">not</span> x.endswith(<span class="string">"]"</span>) <span class="keyword">else</span> x,</div><div class="line">                 self.string.split(<span class="string">"/"</span>))))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"Xpath(&#123;!r&#125;)"</span>.format(self.string)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        &gt;&gt;&gt; hash(Xpath('/html/div[1]')) == hash(Xpath('/html/div'))</div><div class="line">        True</div><div class="line">        &gt;&gt;&gt; hash(Xpath('/html/div/div[2]')) == hash(Xpath('/html/div/div[1]'))</div><div class="line">        False</div><div class="line">        '''</div><div class="line">        <span class="keyword">return</span> hash(self.identity)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span> -&gt; bool:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        &gt;&gt;&gt; Xpath('/html/div[1]') == Xpath('/html/div')</div><div class="line">        True</div><div class="line">        &gt;&gt;&gt; Xpath('/html/div/div[2]') == Xpath('/html/div/div[1]')</div><div class="line">        False</div><div class="line">        '''</div><div class="line">        <span class="keyword">if</span> isinstance(other, str):</div><div class="line">            other = Xpath(other)</div><div class="line">        <span class="keyword">return</span> self.identity == other.identity</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h1 id="参考链接">
  <a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1>
<blockquote class="pullquote">
  <ul>
    <li><a href="https://wiki.python.org/moin/DictionaryKeys" target="_blank" rel="external">DictionaryKeys - Python</a></li>
    <li><a href="http://www.laurentluce.com/posts/python-dictionary-implementation/" target="_blank" rel="external">Python dictionary implementation</a></li>
  </ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个dict的键不就是字符串嘛，No!No!No!&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://linw1995.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python object的可变与不可变</title>
    <link href="http://linw1995.com/2017/03/31/%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98/"/>
    <id>http://linw1995.com/2017/03/31/可变与不可变/</id>
    <published>2017-03-31T07:59:12.000Z</published>
    <updated>2017-05-24T10:42:51.131Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Python object</strong>可以分为两大类型，<strong>可变mutable</strong>与<strong>不可变immutable</strong>。<br>可变与不可变究竟意味着什么？<br>
  <a id="more"></a>
</p>
<p>对象是<strong>Python</strong>对数据的抽象化，在<strong>Python</strong>中，数据被表现成对象或者对象间的关系。<br>在<strong>Python</strong>中一切皆为对象，每个对象各含有<strong>identity</strong>、<strong>type</strong>和<strong>value</strong></p>
<ul>
  <li><strong>identity</strong> 在对象创建之后就不会改变，可想作是对象在内存中的地址。<br> 使用<strong>id(obj)</strong>可以得到一个对象的<strong>identity</strong>。</li>
  <li><strong>type</strong> 可想而知，类型在创建后也不会被改变。</li>
  <li><strong>value</strong> 保存了对象的值。<br> 对于有的对象这个值在创建对象之后还是可变的，那么称这种对象为<strong>可变对象mutable object</strong>；<br>而有的反之，自创建对象之后不可变，那么称这种对象为<strong>不可变对象immutable object</strong>。</li>
</ul>
<h1 id="常见的mutable和immutable对象">
  <a href="#常见的mutable和immutable对象" class="headerlink" title="常见的mutable和immutable对象"></a>常见的mutable和immutable对象</h1>
<p><strong>Python</strong>的主要类型有：</p>
<ul>
  <li>
    <p>不可变 <strong>immutable</strong></p>
    <ul>
      <li>数值类型 <strong>int</strong> <strong>float</strong> <strong>complex</strong> <strong>str</strong></li>
      <li>数组类型 <strong>tuple</strong> <strong>frozenset</strong> <strong>bytes</strong></li>
    </ul>
    <p>以上类型的对象都是不可变的</p>
  </li>
  <li>
    <p>可变 <strong>mutable</strong></p>
    <ul>
      <li>数组类型 <strong>list</strong> <strong>bytearray</strong> <strong>set</strong></li>
      <li>映射类型 <strong>dict</strong></li>
    </ul>
    <p>以上类型的对象都是可变的</p>
  </li>
</ul>
<h1 id="用id函数来判断对象是可变还是不可变">
  <a href="#用id函数来判断对象是可变还是不可变" class="headerlink" title="用id函数来判断对象是可变还是不可变"></a>用id函数来判断对象是可变还是不可变</h1>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(x)</div><div class="line">int</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line"><span class="number">2</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong>int</strong>明明讲的是不可变对象，但怎么变化呢？<br>其实x是一个新的<strong>int</strong>对象</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">1</span>; id(x)</div><div class="line"><span class="number">1560852944</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">2</span>; id(x)</div><div class="line"><span class="number">1560852976</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>每当<strong>int</strong>对象的值需要变化，总是会生成一个新的对象，旧的应该就会被销毁。<br>其实在<strong>Python</strong>中会缓存值为-5~256的<strong>int</strong>对象</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">check_id</span><span class="params">(x)</span>:</span></div><div class="line"><span class="meta">... </span>    i = id(x)</div><div class="line"><span class="meta">... </span>    x += <span class="number">1</span>; x -= <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> i == id(x)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(list(filter(check_id, range(<span class="number">10</span>**<span class="number">3</span>))))</div><div class="line"><span class="number">257</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(list(filter(check_id, range(<span class="number">-10</span>**<span class="number">3</span>, <span class="number">0</span>))))</div><div class="line"><span class="number">5</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<blockquote> <a href="http://stackoverflow.com/questions/15171695/whats-with-the-integer-cache-inside-python" target="_blank" rel="external">What's with the Integer Cache inside Python? [stackoverflow]</a> </blockquote>
<h1 id="Tuple之谜">
  <a href="#Tuple之谜" class="headerlink" title="Tuple之谜"></a>Tuple之谜</h1>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = tuple([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, []])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">0</span>] = <span class="number">1</span></div><div class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t_id = id(t)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">3</span>].append(<span class="string">"some"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t</div><div class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, [<span class="string">"some"</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t_id == id(t)</div><div class="line"><span class="keyword">True</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>当要改变<strong>tuple</strong>中的值时，抛出<strong>TypeError</strong>错误，因为<strong>tuple</strong>是不可变的对象<br>可接下来<code>t[3].append(&quot;some&quot;)</code>，却成功的改变了<strong>tuple</strong>的内容。<br>其实保存在<strong>tuple</strong>中的只是<strong>list</strong>的<strong>identity</strong>,
  <strong>list</strong>是可变的，但其<strong>identity</strong>是不变的。</p>
<h1 id="hashable可散列">
  <a href="#hashable可散列" class="headerlink" title="hashable可散列"></a>hashable可散列</h1>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>mutable = [list, bytearray, set, dict]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>immutable = [int, float, complex, str, tuple, frozenset, bytes]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">check_hashable</span><span class="params">(t)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">try</span>:</div><div class="line"><span class="meta">... </span>        hash(t)</div><div class="line"><span class="meta">... </span>    <span class="keyword">except</span>:</div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>all(map(check_hashable, immutable))</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>any(map(check_hashable, mutable))</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>hash(tuple([<span class="number">1</span>, list()))</div><div class="line">TypeError: unhashable type: <span class="string">'list'</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>结论：<strong>mutable object</strong>都是<strong>unhashable</strong>的，纯<strong>immutable object</strong>都是<strong>hashable</strong>。</p>
<h1 id="参考链接">
  <a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1>
<blockquote class="pullquote">
  <ul>
    <li><a href="https://docs.python.org/3.6/reference/datamodel.html#objects-values-and-types" target="_blank" rel="external">Objects, values and types - Data model [python doc]</a></li>
    <li><a href="http://stackoverflow.com/questions/15171695/whats-with-the-integer-cache-inside-python" target="_blank" rel="external">What’s with the Integer Cache inside Python? [stackoverflow]</a></li>
  </ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Python object&lt;/strong&gt;可以分为两大类型，&lt;strong&gt;可变mutable&lt;/strong&gt;与&lt;strong&gt;不可变immutable&lt;/strong&gt;。&lt;br&gt;可变与不可变究竟意味着什么？&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://linw1995.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python collections</title>
    <link href="http://linw1995.com/2017/03/30/Python-collections/"/>
    <id>http://linw1995.com/2017/03/30/Python-collections/</id>
    <published>2017-03-30T14:53:14.000Z</published>
    <updated>2017-07-04T12:57:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Python</strong>内置了一组高性能的容器类型，满足了所有基本的需求，<br>这个库就叫做<strong>collections</strong><br>
  <a id="more"></a>
</p>
<h2 id="同">
  <a href="#同" class="headerlink" title="同"></a>同</h2>
<h3 id="Counter">
  <a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3>
<p>一个方便快捷的计数工具，基于<strong>dict</strong>类，可对<strong>hashable</strong>对象进行计数。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter()  <span class="comment"># 空计数器</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(<span class="string">'gallahad'</span>)  <span class="comment"># 可迭代对象</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(&#123;<span class="string">'red'</span>: <span class="number">4</span>, <span class="string">'blue'</span>: <span class="number">2</span>&#125;) <span class="comment"># 映射对象</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(cats=<span class="number">4</span>, dogs=<span class="number">8</span>)  <span class="comment"># kwargs参数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter([<span class="string">'eggs'</span>, <span class="string">'ham'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">'bacon'</span>]  <span class="comment"># 赋予不存在的键初始值</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c[<span class="string">'sausage'</span>] = <span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> c[<span class="string">'sausage'</span>]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="methods">
  <a href="#methods" class="headerlink" title="methods"></a>methods</h4>
<ol>
  <li>
    <p><strong>elements()</strong>， 返回一个根据元素的计数重复元素的迭代器。</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">4</span>, b=<span class="number">2</span>, c=<span class="number">0</span>, d=<span class="number">-2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(c.elements())</div><div class="line">[<span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>]</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>most_common(n)</strong>，返回n个计数最多的元素， 返回数组，数组元素为(counted_object, count)。</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(<span class="string">'abracadabra'</span>).most_common(<span class="number">3</span>)</div><div class="line">[(<span class="string">'a'</span>, <span class="number">5</span>), (<span class="string">'r'</span>, <span class="number">2</span>), (<span class="string">'b'</span>, <span class="number">2</span>)]</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>subtract([iterable-or-mapping])</strong>，非常像<strong>dict.update</strong>，但不是覆盖旧记录，而是减去（保持为整数）。</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">4</span>, b=<span class="number">2</span>, c=<span class="number">0</span>, d=<span class="number">-2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.subtract(d)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">0</span>, <span class="string">'c'</span>: <span class="number">-3</span>, <span class="string">'d'</span>: <span class="number">-6</span>&#125;)</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>update([iterable-or-mapping])</strong>，等同于<strong>dict.update</strong>，覆盖掉旧记录。</p>
  </li>
</ol>
<h4 id="其它用法">
  <a href="#其它用法" class="headerlink" title="其它用法"></a>其它用法</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(a=<span class="number">3</span>, b=<span class="number">1</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = Counter(a=<span class="number">1</span>, b=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c + d                       <span class="comment"># 可加</span></div><div class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">4</span>, <span class="string">'b'</span>: <span class="number">3</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c - d                       <span class="comment"># 可减（保持结果正数）</span></div><div class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">2</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c &amp; d                       <span class="comment"># 交集</span></div><div class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">1</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c | d                       <span class="comment"># 并集</span></div><div class="line">Counter(&#123;<span class="string">'a'</span>: <span class="number">3</span>, <span class="string">'b'</span>: <span class="number">2</span>&#125;)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="deque">
  <a href="#deque" class="headerlink" title="deque"></a>deque</h3>
<p>双向队列，支持方法多数与<strong>list</strong>一致，<br><strong>append</strong>, <strong>clear</strong>, <strong>count</strong>, <strong>extend</strong>, <strong>pop</strong>, <strong>remove</strong>, <strong>reverse</strong></p>
<h4 id="特殊方法">
  <a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h4>
<ol>
  <li><strong>appendleft(x)</strong></li>
  <li><strong>extendleft(x)</strong></li>
  <li><strong>popleft()</strong></li>
  <li>
    <p><strong>rotate(n)</strong>，轮转n个位置</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">deque([<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">1</span>)                      <span class="comment"># 右轮转</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">deque([<span class="string">'l'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.rotate(<span class="number">-1</span>)                     <span class="comment"># 左轮转</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">deque([<span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>])</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>maxlen</strong>，<strong>deque</strong>的最大长度</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tail</span><span class="params">(filename, n=<span class="number">10</span>)</span>:</span></div><div class="line">    <span class="string">'Return the last n lines of a file'</span></div><div class="line">    <span class="keyword">return</span> deque(open(filename), maxlen=n)</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
</ol>
<h4 id="用deque来实现移动平均">
  <a href="#用deque来实现移动平均" class="headerlink" title="用deque来实现移动平均"></a>用deque来实现移动平均</h4>
<blockquote>
  <p>Wiki:<a href="https://en.wikipedia.org/wiki/Moving_average" target="_blank" rel="external">Moving average</a></p>
</blockquote>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">moving_average</span><span class="params">(iterable, n=<span class="number">3</span>)</span>:</span></div><div class="line">    it = iter(iterable)</div><div class="line">    d = deque(itertools.islice(it, n<span class="number">-1</span>))</div><div class="line">    d.appendleft(<span class="number">0</span>)</div><div class="line">    s = sum(d)</div><div class="line">    <span class="keyword">for</span> elem <span class="keyword">in</span> it:</div><div class="line">        s += elem - d.popleft()</div><div class="line">        d.append(elem)</div><div class="line">        <span class="keyword">yield</span> s / float(n)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="使用rotate来删除deque中的某个甚至多个元素">
  <a href="#使用rotate来删除deque中的某个甚至多个元素" class="headerlink" title="使用rotate来删除deque中的某个甚至多个元素"></a>使用rotate来删除deque中的某个甚至多个元素</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleted</span><span class="params">(d, start, end=None, step=None)</span>:</span></div><div class="line">    d = deque(d)</div><div class="line">    end = end <span class="keyword">or</span> start + <span class="number">1</span></div><div class="line">    size = abs(end - start)</div><div class="line">    count = <span class="number">0</span></div><div class="line">    d.rotate(-start)</div><div class="line">    diff = start</div><div class="line">    <span class="keyword">while</span> count &lt; size:</div><div class="line">        d.popleft()</div><div class="line">        <span class="keyword">if</span> step:</div><div class="line">            d.rotate(-step)</div><div class="line">            diff += step</div><div class="line">        count += <span class="number">1</span></div><div class="line">    d.rotate(diff)</div><div class="line">    <span class="keyword">return</span> d</div></pre>
      </td>
    </tr>
  </table>
</figure>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = deque(range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">deque([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>deleted(d, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>)</div><div class="line">deque([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>])</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="defaultdict">
  <a href="#defaultdict" class="headerlink" title="defaultdict"></a>defaultdict</h3>
<p>用函数为<strong>missing key</strong>提供一个默认值，以<strong>dict</strong>为基类的特殊字典。<br>其实与dict的区别就是多了个<strong><strong>missing</strong>(key)</strong>方法</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> UserDict</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDefaultDict</span><span class="params">(UserDict)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__missing__</span><span class="params">(self, key)</span>:</span></div><div class="line">        self[key] = <span class="number">0</span></div><div class="line">        <span class="keyword">return</span> self[key]</div><div class="line"></div><div class="line">d = MyDefaultDict()</div><div class="line">d[<span class="string">"abc"</span>] <span class="comment"># 0</span></div><div class="line">d <span class="comment"># &#123;'abc': 0&#125;</span></div><div class="line">d[<span class="string">"defg"</span>] += <span class="number">1</span></div><div class="line">d <span class="comment"># &#123;'abc': 0, 'defg': 1&#125;</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>和<strong>default_factory</strong>这个函数，用来初始化<em>missing key*</em>的值。</p>
<p>虽然道理很简单，但是还是用内置的<strong>defaultdict</strong>最好。<br>就算要定制自己的<strong>defaultdict</strong>, 那一定要继承<strong>defaultdict</strong>或<strong>UserDict</strong>。</p>
<blockquote>
  <ul>
    <li><a href="http://www.dongwm.com/archives/UserDict%E3%80%81UserString%E3%80%81UserList%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89/" target="_blank" rel="external">UserDict、UserString、UserList存在的意义</a></li>
    <li><a href="http://stackoverflow.com/questions/25464647/list-vs-userlist-and-dict-vs-userdict" target="_blank" rel="external">list vs UserList and dict vs UserDict [stackoverflow]</a> </li>
  </ul>
</blockquote>
<h4 id="missing-factory-function">
  <a href="#missing-factory-function" class="headerlink" title="missing factory function"></a>missing factory function</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = [(<span class="string">'yellow'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">2</span>), (<span class="string">'yellow'</span>, <span class="number">3</span>), (<span class="string">'blue'</span>, <span class="number">4</span>), (<span class="string">'red'</span>, <span class="number">1</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(list)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</div><div class="line"><span class="meta">... </span>    d[k].append(v)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</div><div class="line">dict_items([(<span class="string">'blue'</span>, [<span class="number">2</span>, <span class="number">4</span>]), (<span class="string">'red'</span>, [<span class="number">1</span>]), (<span class="string">'yellow'</span>, [<span class="number">1</span>, <span class="number">3</span>])])</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>与<strong>dict.setdefault</strong>似乎差别不大</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = dict()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</div><div class="line"><span class="meta">... </span>    d.setdefault(k, []).append(v)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</div><div class="line">dict_items([(<span class="string">'blue'</span>, [<span class="number">2</span>, <span class="number">4</span>]), (<span class="string">'red'</span>, [<span class="number">1</span>]), (<span class="string">'yellow'</span>, [<span class="number">1</span>, <span class="number">3</span>])])</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>其实，<strong>dict.setdefault</strong>用提供的变量来生成新值，而<strong>defaultdict</strong>使用函数来生成<strong>missing key</strong>的新值</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>l = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</div><div class="line"><span class="meta">... </span>    d.setdefault(k, l).append(v)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</div><div class="line">dict_items([(<span class="string">'yellow'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]), (<span class="string">'blue'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>]), (<span class="string">'red'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>])])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> random <span class="keyword">import</span> random</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = defaultdict(random)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</div><div class="line"><span class="meta">... </span>    d[k] += v</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d.items()</div><div class="line">dict_items([(<span class="string">'yellow'</span>, <span class="number">4.3108967141731975</span>), (<span class="string">'blue'</span>, <span class="number">6.5111474260668025</span>), (<span class="string">'red'</span>, <span class="number">1.978881739541357</span>)])</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="namedtuple">
  <a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3>
<p>用来生成具有键值对的特殊元组，命名元组。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>]) <span class="comment"># or namedtuple('Point', 'x y')</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(<span class="number">11</span>, y=<span class="number">22</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p</div><div class="line">Point(x=<span class="number">11</span>, y=<span class="number">22</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>命名元组，其特性在某些情况下特别好用。<br>比如处理csv文件时, 计算重复行</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">import</span> csv</div><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple, Counter</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">counter</span><span class="params">(file_name, encoding)</span>:</span></div><div class="line">    <span class="keyword">with</span> open(file_name, encoding=encoding) <span class="keyword">as</span> f:</div><div class="line">        f_csv = csv.reader(f)</div><div class="line">        Row = namedtuple(<span class="string">"Row"</span>, next(f_csv))</div><div class="line">        counter = Counter(map(<span class="keyword">lambda</span> r:Row(*r), f_csv))</div><div class="line">    <span class="keyword">return</span> counter</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="特殊方法-1">
  <a href="#特殊方法-1" class="headerlink" title="特殊方法"></a>特殊方法</h4>
<ol>
  <li>
    <p><strong>_asdict()</strong>，返回一个<strong>OrderedDict</strong></p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(x=<span class="number">11</span>, y=<span class="number">22</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p._asdict()</div><div class="line">OrderedDict([(<span class="string">'x'</span>, <span class="number">11</span>), (<span class="string">'y'</span>, <span class="number">22</span>)])</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>_replace(kwargs)</strong></p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = Point(x=<span class="number">11</span>, y=<span class="number">22</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p._replace(x=<span class="number">33</span>)</div><div class="line">Point(x=<span class="number">33</span>, y=<span class="number">22</span>)</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>_fields</strong></p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p._fields            <span class="comment"># 查看值域名</span></div><div class="line">(<span class="string">'x'</span>, <span class="string">'y'</span>)</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
</ol>
<h4 id="用namedtuple做父类">
  <a href="#用namedtuple做父类" class="headerlink" title="用namedtuple做父类"></a>用namedtuple做父类</h4>
<p>命名元组其实就是一个<strong>python</strong>类，所以可以用来当父类</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># python2.7</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(namedtuple<span class="params">(<span class="string">'Point'</span>, <span class="string">'x y'</span>)</span>)</span>:</span></div><div class="line"><span class="meta">... </span>    __slots__ = ()</div><div class="line"><span class="meta">... </span>    @property</div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">hypot</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> (self.x ** <span class="number">2</span> + self.y ** <span class="number">2</span>) ** <span class="number">0.5</span></div><div class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line"><span class="meta">... </span>        <span class="keyword">return</span> <span class="string">'Point: x=%6.3f  y=%6.3f  hypot=%6.3f'</span> % (self.x, self.y, self.hypot)</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> p <span class="keyword">in</span> Point(<span class="number">3</span>, <span class="number">4</span>), Point(<span class="number">14</span>, <span class="number">5</span>/<span class="number">7.</span>):</div><div class="line"><span class="meta">... </span>    <span class="keyword">print</span> p</div><div class="line">Point: x= <span class="number">3.000</span>  y= <span class="number">4.000</span>  hypot= <span class="number">5.000</span></div><div class="line">Point: x=<span class="number">14.000</span>  y= <span class="number">0.714</span>  hypot=<span class="number">14.018</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="OrderedDict">
  <a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3>
<p>有序字典，除了键值对有序以外，<br>还比通常字典多了个<strong>popitem(last=True)</strong>的方法,<br>last=True, <strong>LIFO</strong><br>last=False, <strong>FIFO</strong></p>
<h4 id="有趣的例子">
  <a href="#有趣的例子" class="headerlink" title="有趣的例子"></a>有趣的例子</h4>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LastUpdatedOrderedDict</span><span class="params">(OrderedDict)</span>:</span></div><div class="line">    <span class="string">'Store items in the order the keys were last added'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self:</div><div class="line">            <span class="keyword">del</span> self[key]</div><div class="line">        OrderedDict.__setitem__(self, key, value)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderedCounter</span><span class="params">(Counter, OrderedDict)</span>:</span></div><div class="line">     <span class="string">'Counter that remembers the order elements are first encountered'</span></div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">         <span class="keyword">return</span> <span class="string">'%s(%r)'</span> % (self.__class__.__name__, OrderedDict(self))</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></div><div class="line">         <span class="keyword">return</span> self.__class__, (OrderedDict(self),)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="UserList-UserDict-UserString">
  <a href="#UserList-UserDict-UserString" class="headerlink" title="UserList, UserDict, UserString"></a>UserList, UserDict, UserString</h3>
<p>当需要自定<strong>list</strong>,<strong>dict</strong>,<strong>str</strong>类型时，推荐以上来当父类。</p>
<blockquote>
  <ul>
    <li><a href="http://www.dongwm.com/archives/UserDict%E3%80%81UserString%E3%80%81UserList%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89/" target="_blank" rel="external">UserDict、UserString、UserList存在的意义</a></li>
    <li><a href="http://stackoverflow.com/questions/25464647/list-vs-userlist-and-dict-vs-userdict" target="_blank" rel="external">list vs UserList and dict vs UserDict [stackoverflow]</a> </li>
  </ul>
</blockquote>
<h2 id="异">
  <a href="#异" class="headerlink" title="异"></a>异</h2>
<h3 id="ChainMap">
  <a href="#ChainMap" class="headerlink" title="ChainMap"></a>ChainMap</h3>
<p>用来把<strong>mapping</strong>对象联合起来生成一个索引对象。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> builtins</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pylookup = ChainMap(locals(), globals(), vars(builtins))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">()</span>:</span></div><div class="line"><span class="meta">... </span>    print(<span class="string">"sum"</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pylookup[<span class="string">"sum"</span>]()</div><div class="line">sum</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> sum</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>pylookup[<span class="string">"sum"</span>].__doc__</div><div class="line"><span class="string">"Return the sum of a 'start' value (default: 0) plus an iterable of numbers\n\nWhen the iterable is empty, return the start value.\nThis function is intended specifically for use with numeric values and may\nreject non-numeric types."</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> pylookup[<span class="string">"sum"</span>]</div><div class="line">KeyError: <span class="string">"Key not found in the first mapping: 'sum'"</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong>ChainMap</strong>是按照被映射的顺序来搜索的，且只能修改第一个映射字典</p>
<h4 id="methods-1">
  <a href="#methods-1" class="headerlink" title="methods"></a>methods</h4>
<ol>
  <li>
    <p><strong>maps</strong>，一个可修改的列表，存储映射顺序</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>len(pylookup.maps)</div><div class="line"><span class="number">3</span></div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>new_child(m=None)</strong>，返回一个新的<strong>ChainMap</strong>。<br> 当m指定，则把指定的<strong>mapping</strong>对象插到映射顺序最前；<br>若m不指定，则创建一个新字典插到映射顺序最前， 像这样<code>ChainMap({}, *d.maps)</code>。</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = pylookup.new_child()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n.maps[<span class="number">0</span>]</div><div class="line">&#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n.maps[<span class="number">1</span>:] == pylookup.maps</div><div class="line"><span class="keyword">True</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>n = pylookup.newchild(<span class="number">1</span>)</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>parents</strong>，返回复制版本,除了映射顺序最前的对象，就像这样<code>ChainMap(*d.maps[1:])</code>。<br> 通常用来搜索，<strong>super()</strong>差不多是这样实现的。</p>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>p = pylookup.parents</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>p.maps == pylookup.maps[<span class="number">1</span>:]</div><div class="line"><span class="keyword">True</span></div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
</ol>
<h4 id="DeepChainMap">
  <a href="#DeepChainMap" class="headerlink" title="DeepChainMap"></a>DeepChainMap</h4>
<p>通过继承<strong>ChainMap</strong>, 打破其限制</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeepChainMap</span><span class="params">(ChainMap)</span>:</span></div><div class="line">    <span class="string">'Variant of ChainMap that allows direct updates to inner scopes'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></div><div class="line">        <span class="keyword">for</span> mapping <span class="keyword">in</span> self.maps:</div><div class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> mapping:</div><div class="line">                mapping[key] = value</div><div class="line">                <span class="keyword">return</span></div><div class="line">        self.maps[<span class="number">0</span>][key] = value</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></div><div class="line">        <span class="keyword">for</span> mapping <span class="keyword">in</span> self.maps:</div><div class="line">            <span class="keyword">if</span> key <span class="keyword">in</span> mapping:</div><div class="line">                <span class="keyword">del</span> mapping[key]</div><div class="line">                <span class="keyword">return</span></div><div class="line">        <span class="keyword">raise</span> KeyError(key)</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = DeepChainMap(&#123;<span class="string">'zebra'</span>: <span class="string">'black'</span>&#125;, &#123;<span class="string">'elephant'</span>: <span class="string">'blue'</span>&#125;, &#123;<span class="string">'lion'</span>: <span class="string">'yellow'</span>&#125;)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'lion'</span>] = <span class="string">'orange'</span>         <span class="comment"># update an existing key two levels down</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">'snake'</span>] = <span class="string">'red'</span>           <span class="comment"># new keys get added to the topmost dict</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> d[<span class="string">'elephant'</span>]            <span class="comment"># remove an existing key one level down</span></div><div class="line">DeepChainMap(&#123;<span class="string">'zebra'</span>: <span class="string">'black'</span>, <span class="string">'snake'</span>: <span class="string">'red'</span>&#125;, &#123;&#125;, &#123;<span class="string">'lion'</span>: <span class="string">'orange'</span>&#125;)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="py2与py3的区别">
  <a href="#py2与py3的区别" class="headerlink" title="py2与py3的区别"></a>py2与py3的区别</h2>
<blockquote>
  <p>注意：<br>在<strong>py2.7</strong>中<strong>UserDict</strong>, <strong>UserList</strong>, <strong>UserString</strong>为单独的模块，不在<strong>collections</strong>中。<br>由于<strong>Abstract Base Classes</strong>在<strong>py3</strong>中迁移到<strong>collections.abc</strong>中，加上<strong>abc</strong>很复杂，本文先不归纳。</p>
</blockquote>
<table>
  <thead>
    <tr>
      <th>类型</th>
      <th style="text-align:center">py2</th>
      <th style="text-align:center">py3</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>namedtuple</td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>用来生成具名元组类的工厂函数</td>
    </tr>
    <tr>
      <td>deque</td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>队列（FIFO）</td>
    </tr>
    <tr>
      <td>Counter</td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>计数器（计数字典），可对可散列对象进行计数</td>
    </tr>
    <tr>
      <td>OrderedDict</td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>有序字典，能保存添加时的顺序</td>
    </tr>
    <tr>
      <td>defaultdict</td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>缺省字典，为不存在的键提供初始值</td>
    </tr>
    <tr>
      <td>ChainMap</td>
      <td style="text-align:center"><span style="color:red">✘</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>代理字典，可以同时对多个字典进行代理</td>
    </tr>
    <tr>
      <td>UserDict</td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>给开发者构造字典子类时继承的</td>
    </tr>
    <tr>
      <td>UserList</td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>给开发者构造列表子类时继承的</td>
    </tr>
    <tr>
      <td>UserString</td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td style="text-align:center"><span style="color:green">✔</span></td>
      <td>给开发者构造字符串子类时继承的</td>
    </tr>
  </tbody>
</table>
<h2 id="参考链接">
  <a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>
<blockquote class="pullquote">
  <ul>
    <li><a href="https://docs.python.org/3.6/library/collections.html" target="_blank" rel="external">py3.6  collections — Container datatypes</a></li>
    <li><a href="https://docs.python.org/2.7/library/collections.html" target="_blank" rel="external">py2.7  collections — High-performance container datatypes</a></li>
    <li><a href="https://docs.python.org/2.7/library/userdict.html" target="_blank" rel="external">py2.7 UserDict UserList UserString</a></li>
    <li><a href="https://en.wikipedia.org/wiki/Moving_average" target="_blank" rel="external">Moving average</a></li>
    <li><a href="http://www.dongwm.com/archives/UserDict%E3%80%81UserString%E3%80%81UserList%E5%AD%98%E5%9C%A8%E7%9A%84%E6%84%8F%E4%B9%89/" target="_blank" rel="external">UserDict、UserString、UserList存在的意义</a></li>
    <li><a href="http://stackoverflow.com/questions/25464647/list-vs-userlist-and-dict-vs-userdict" target="_blank" rel="external">list vs UserList and dict vs UserDict [stackoverflow]</a></li>
  </ul>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Python&lt;/strong&gt;内置了一组高性能的容器类型，满足了所有基本的需求，&lt;br&gt;这个库就叫做&lt;strong&gt;collections&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://linw1995.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://linw1995.com/tags/Python/"/>
    
  </entry>
  
</feed>
