<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linw1995</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linw1995.github.io/"/>
  <updated>2017-03-19T08:32:24.647Z</updated>
  <id>http://linw1995.github.io/</id>
  
  <author>
    <name>linw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python On Visual Studio Code With Anaconda</title>
    <link href="http://linw1995.github.io/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/"/>
    <id>http://linw1995.github.io/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/</id>
    <published>2017-03-19T08:28:48.000Z</published>
    <updated>2017-03-19T08:32:24.647Z</updated>
    
    <content type="html"><![CDATA[<p>Python是一门入门容易，且入门后又可以做很多interesting things的语言。<br>想简单的写一些代码，又不想费力去安装体积庞大的IDE，也不想使用Python自带的IDLE。<br>这时候你就需要Python On Visual Studio Code With Anaconda。<br><a id="more"></a></p>
<h1 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h1><h2 id="Visual-Studio-Code-–-Code-editing-Redefined"><a href="#Visual-Studio-Code-–-Code-editing-Redefined" class="headerlink" title="Visual Studio Code – Code editing. Redefined."></a>Visual Studio Code – Code editing. Redefined.</h2><img src="/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/2016-10-14_061710.470637_Visual_Studio_Code_0.10.1_icon.png" alt="2016-10-14_061710.470637_Visual_Studio_Code_0.10.1_icon.png" title="">
<a href="https://code.visualstudio.com/Download" title="Download Visual Studio Code" target="_blank" rel="external">VS Code Download link</a>
<blockquote><p>在2015 Build大会上宣布微软将开发 Visual Studio Code。<br>2015年4月29日，第一个预览版本发布。<br>2015年11月18日，Code团队将其在GitHub上面开源，并采用MIT许可证，同时宣布将支持扩展功能。<br>2016年4月14日，Visual Studio Code发布正式版，版本号1.0.0。<br>Visual Studio Code支持多种编程语言。与其他编辑器不同的是，Code的许多功能并不在菜单中显示，而是通过“命令面板”来调用。用户可以在命令面板中搜索和输入命令，从而实现指定功能，例如安装插件、设置属性等。<br>Code具备了现代文本编辑器所具有的功能，例如更改字符编码、更换换行符等。</p>
<footer><strong>wikipedia</strong><cite><a href="https://zh.wikipedia.org/wiki/Visual_Studio_Code" target="_blank" rel="external">Visual Studio Code</a></cite></footer></blockquote>
<h2 id="Anaconda-–-Leading-Open-Data-Science-Platform-Powered-by-Python"><a href="#Anaconda-–-Leading-Open-Data-Science-Platform-Powered-by-Python" class="headerlink" title="Anaconda – Leading Open Data Science Platform Powered by Python"></a>Anaconda – Leading Open Data Science Platform Powered by Python</h2><img src="/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/AnacondaLogo.png" alt="AnacondaLogo.png" title="">
<blockquote><p>Where packages, notebooks, and environments are shared.<br>Powerful collaboration and package management for open source and private projects.<br>Public projects and notebooks are always free.</p>
<footer><strong>Anaconda</strong><cite><a href="https://www.continuum.io/anaconda-overview" target="_blank" rel="external">overview</a></cite></footer></blockquote>
<p>对我们来说，Anaconda方便了我们对Python packages和Python environment的管理。<br>以及超方便的Jupyter Notebooks等工具，以后会一一介绍。</p>
<a href="https://www.continuum.io/downloads" title="Anaconda Download link" target="_blank" rel="external">Anaconda Download link</a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>两个软件的安装教程到处都是，这里就略过了。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="创建一个新的conda环境"><a href="#创建一个新的conda环境" class="headerlink" title="创建一个新的conda环境"></a>创建一个新的conda环境</h2><p>Python拥有众多的模块可供使用，但我们在某些情况下需要同个模块但不同版本，甚至不同的Python版本。<br>这就需要我们对这些不同的Python环境进行管理。<br>庆幸的是Anaconda提供了一个优良的环境管理功能。</p>
<h3 id="创建新环境"><a href="#创建新环境" class="headerlink" title="创建新环境"></a>创建新环境</h3><p>Python3.5: <code>conda create --name py35 python=3.5</code><br>Python2.7: <code>conda create --name py27 python=2.7</code></p>
<h3 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h3><p>Linux, OS X: <code>source activate py27</code><br>Windows: <code>activate py27</code></p>
<h2 id="VS-Code-基本配置"><a href="#VS-Code-基本配置" class="headerlink" title="VS Code 基本配置"></a>VS Code 基本配置</h2><p>打开一个文件夹，按住<code>ctrl</code>+<code>shift</code>+<code>I</code>,打开扩展管理面板<br>在上方搜索框输入<code>python</code>, 安装python扩展</p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python" target="_blank" rel="external">python</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=linw1995.python-traceback-jumper" target="_blank" rel="external">python traceback jumper</a>
</li>
</ul>
<img src="/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/pythonVSCode.png" alt="pythonVSCode.png" title="">
<img src="/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/python%20traceback%20jumper.png" alt="python traceback jumper.png" title="">
<p>安装完成后，按住<code>ctrl</code>+<code>shift</code>+<code>p</code>,输入<code>&gt;Python:Select Workspace Interpreter</code>选择需要的python环境<br>然后你会发现它目录下会多出一个目录<code>.vscode</code>，打开其中的<code>settings.json</code></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"python.pythonPath"</span>: <span class="string">"C:/ProgramData/Anaconda3/python"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就是我们现在所处的工作区设置了</p>
<blockquote>
<p>更多关于VSCode的设置请打开 菜单&gt;文件&gt;首选项&gt;设置<br>关于PythonVSCode的具体设置请看扩展介绍页的发布内容</p>
</blockquote>
<h1 id="Flask-小程序"><a href="#Flask-小程序" class="headerlink" title="Flask 小程序"></a>Flask 小程序</h1><p>写一段flask小程序来展示下，VSCode搭配Python，这套“瑞士军刀”的强大之处</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding:utf-8 -*-</span></div><div class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@app.route("/")</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(name=None)</span>:</span></div><div class="line">    <span class="keyword">raise</span> ValueError</div><div class="line">    <span class="keyword">return</span> <span class="string">"&lt;h1&gt;hello&lt;/h1&gt;"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    app.run()</div></pre></td></tr></table></figure>
<p>写代码是总少不了，补全提示，和代码格式化<br>所以在设置文件中添加新的配置</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"python.pythonPath"</span>: <span class="string">"C:/ProgramData/Anaconda3/python"</span>,</div><div class="line">    <span class="attr">"python.linting.enabled"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"python.linting.pylintEnabled"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"python.linting.flake8Enabled"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"python.formatting.provider"</span>: <span class="string">"yapf"</span>,</div><div class="line">    <span class="attr">"python.formatting.formatOnSave"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>现在开始运行写好的代码，可为了避免每次运行都要重新输入命令，我们要配置task<br>按住<code>ctrl</code>+<code>shift</code>+<code>b</code>, 选择配置任务程序<br>选择其它，弹出<code>tasks.json</code>文件，像这样编辑它</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"$&#123;config.python.pythonPath&#125;"</span>,</div><div class="line">    <span class="attr">"isShellCommand"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"args"</span>: [<span class="string">"$&#123;file&#125;"</span>],</div><div class="line">    <span class="attr">"showOutput"</span>: <span class="string">"always"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>保存后，切换回正等着运行的flask小程序<br>按住<code>ctrl</code>+<code>shift</code>+<code>b</code><br>然后就可以在输出面板看到程序在运行了<br>唔，程序运行出现了错误<br>赶紧看Traceback，发现一个个找发生Exception的代码实在是太麻烦了<br>所以要启用python traceback jumper插件的时候到了<br>在<code>setting.json</code>中加入</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"python.pythonPath"</span>: <span class="string">"C:/ProgramData/Anaconda3/python"</span>,</div><div class="line">    <span class="attr">"python.linting.enabled"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"python.linting.pylintEnabled"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"python.linting.flake8Enabled"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"python.formatting.provider"</span>: <span class="string">"yapf"</span>,</div><div class="line">    <span class="attr">"python.formatting.formatOnSave"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">"python.tracebackJumper.enable"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按住<code>ctrl</code>+<code>shift</code>+<code>p</code>输入reload重载整个编辑器后就可以，继续刚才的操作<br><img src="/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/traceback.png" alt="traceback.png" title=""></p>
<p>是不是十分方便呢</p>
<h2 id="Debug-launcher"><a href="#Debug-launcher" class="headerlink" title="Debug launcher"></a>Debug launcher</h2><p>Task功能很方便，但是并不能满足debug的需求<br>所以接下来要这样配置</p>
<p>进入调试面板，打开<code>launch.json</code>文件<br><img src="/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/debug.png" alt="debug.png" title=""></p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</div><div class="line">    <span class="attr">"configurations"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"Flask"</span>,</div><div class="line">            <span class="attr">"type"</span>: <span class="string">"python"</span>,</div><div class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</div><div class="line">            <span class="attr">"stopOnEntry"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"pythonPath"</span>: <span class="string">"$&#123;config:python.pythonPath&#125;"</span>,</div><div class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceRoot&#125;/flaskr.py"</span>,</div><div class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;"</span>,</div><div class="line">            <span class="attr">"env"</span>: &#123;</div><div class="line">                <span class="attr">"FLASK_APP"</span>: <span class="string">"$&#123;workspaceRoot&#125;/flaskr.py"</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"args"</span>: [],</div><div class="line">            <span class="attr">"debugOptions"</span>: [</div><div class="line">                <span class="string">"WaitOnAbnormalExit"</span>,</div><div class="line">                <span class="string">"WaitOnNormalExit"</span>,</div><div class="line">                <span class="string">"RedirectOutput"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后按住<code>F5</code>就可以进入debug模式了<br>点击要调试的代码行左侧边框上，添加“红点”<br>之后程序运行到此行就会停下，即可在调试控制台输入框上进行交互式调试</p>
<img src="/2017/03/19/Python-On-Visual-Studio-Code-With-Anaconda/debugContrl.png" alt="debugContrl.png" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python是一门入门容易，且入门后又可以做很多interesting things的语言。&lt;br&gt;想简单的写一些代码，又不想费力去安装体积庞大的IDE，也不想使用Python自带的IDLE。&lt;br&gt;这时候你就需要Python On Visual Studio Code With Anaconda。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://linw1995.github.io/categories/Python/"/>
    
      <category term="Others" scheme="http://linw1995.github.io/categories/Python/Others/"/>
    
    
      <category term="Python" scheme="http://linw1995.github.io/tags/Python/"/>
    
      <category term="VSCode" scheme="http://linw1995.github.io/tags/VSCode/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib 中文显示参数设置</title>
    <link href="http://linw1995.github.io/2017/03/15/Matplotlib-%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E5%8F%82%E6%95%B0%E8%AE%BE%E7%BD%AE/"/>
    <id>http://linw1995.github.io/2017/03/15/Matplotlib-中文显示参数设置/</id>
    <published>2017-03-15T01:16:42.000Z</published>
    <updated>2017-03-19T08:29:52.331Z</updated>
    
    <content type="html"><![CDATA[<p>在用Matplotlib库可视化时，难免会需要加上中文信息，可总是显示乱码出来。。。</p>
<a id="more"></a>
<p>给图加上中文信息时总是会出现中文乱码，这是因为matplotlib库里没有安装中文字体。</p>
<ul>
<li>我们可以通过在代码头插入以下代码来，对matplotlib所用字体进行设置</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding:utf-8</span></div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></div><div class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="keyword">False</span> <span class="comment">#用来正常显示负号</span></div><div class="line"><span class="comment">#有中文出现的情况，需要u'内容' py3就不需要加u</span></div></pre></td></tr></table></figure>
<ul>
<li>一劳永逸<br>通过以下命令得到matplotlib库的配置文件的地址<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c print(__import__(&apos;matplotlib&apos;).matplotlib_fname())</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后打开它，修改以下那一行<br><code>#font.serif          : DejaVu Serif, Bitstream Vera Serif, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif</code><br>去掉注释<code>#</code>符号，在<code>DejaVu Serif</code>前加入<code>SimHei,</code><br>对下列<code>#font.sans-serif</code>也是如此操作</p>
<p>然后运行一下包含中文字符的代码，见证奇迹时候到了</p>
<img src="/2017/03/15/Matplotlib-中文显示参数设置/figure_1.png" alt="figure_1.png" title="">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在用Matplotlib库可视化时，难免会需要加上中文信息，可总是显示乱码出来。。。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://linw1995.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://linw1995.github.io/tags/Python/"/>
    
      <category term="Matplotlib" scheme="http://linw1995.github.io/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>如何配置Visual Studio Code + MinGW下的C++环境</title>
    <link href="http://linw1995.github.io/2016/10/14/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AEVisual-Studio-Code-MinGW%E4%B8%8B%E7%9A%84C-%E7%8E%AF%E5%A2%83/"/>
    <id>http://linw1995.github.io/2016/10/14/如何配置Visual-Studio-Code-MinGW下的C-环境/</id>
    <published>2016-10-14T09:49:06.000Z</published>
    <updated>2017-03-19T08:26:59.856Z</updated>
    
    <content type="html"><![CDATA[<p>官方文档至今还没翻译成中文，足足琢磨了好几天明白了一些VS Code的功能。<br>现在给大家分享以下。</p>
<a id="more"></a>
<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><h3 id="Visual-Studio-Code-–-Code-editing-Redefined"><a href="#Visual-Studio-Code-–-Code-editing-Redefined" class="headerlink" title="Visual Studio Code – Code editing. Redefined."></a>Visual Studio Code – Code editing. Redefined.</h3><img src="/2016/10/14/如何配置Visual-Studio-Code-MinGW下的C-环境/2016-10-14_061710.470637_Visual_Studio_Code_0.10.1_icon.png" alt="2016-10-14_061710.470637_Visual_Studio_Code_0.10.1_icon.png" title="">
<a href="https://code.visualstudio.com/Download" title="Download Visual Studio Code" target="_blank" rel="external">VS Code Download link</a>
<blockquote><p>在2015 Build大会上宣布微软将开发 Visual Studio Code。<br>2015年4月29日，第一个预览版本发布。<br>2015年11月18日，Code团队将其在GitHub上面开源，并采用MIT许可证，同时宣布将支持扩展功能。<br>2016年4月14日，Visual Studio Code发布正式版，版本号1.0.0。<br>Visual Studio Code支持多种编程语言。与其他编辑器不同的是，Code的许多功能并不在菜单中显示，而是通过“命令面板”来调用。用户可以在命令面板中搜索和输入命令，从而实现指定功能，例如安装插件、设置属性等。<br>Code具备了现代文本编辑器所具有的功能，例如更改字符编码、更换换行符等。</p>
<footer><strong>wikipedia</strong><cite><a href="https://zh.wikipedia.org/wiki/Visual_Studio_Code" target="_blank" rel="external">Visual Studio Code</a></cite></footer></blockquote>
<h3 id="MinGW"><a href="#MinGW" class="headerlink" title="MinGW"></a>MinGW</h3><p>提供了G++编译器<br><blockquote><p>MinGW（Minimalist GNU for Windows），又称mingw32，是将GCC编译器和GNU Binutils移植到Win32平台下的产物，包括一系列头文件（Win32API）、库和可执行文件。<br>另有可用于产生32位及64位Windows可执行文件的MinGW-w64项目，是从原本MinGW产生的分支。如今已经独立发展。</p>
<footer><strong>wikipedia</strong><cite><a href="https://zh.wikipedia.org/wiki/MinGW" target="_blank" rel="external">MinGW</a></cite></footer></blockquote></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>VS Code</li>
</ul>
<p>按照安装提示一步步进行即可</p>
<ul>
<li>MinGW</li>
</ul>
<p>按照安装提示一步步进行，安装完成后。<br>会弹出以下界面<br><img src="/2016/10/14/如何配置Visual-Studio-Code-MinGW下的C-环境/2016-10-14_062200.698190_cl_MinGWInstall.png" alt="2016-10-14_062200.698190_cl_MinGWInstall.png" title=""><br>照图片选择，然后在菜单栏Installation中选择Apply changes，然后等待程序下载安装编译器。<br>以上步骤结束后，设置系统变量<br>右键我的电脑，选择属性<br><img src="/2016/10/14/如何配置Visual-Studio-Code-MinGW下的C-环境/2016-10-14_062655.852040_QQ20161014142609.png" alt="2016-10-14_062655.852040_QQ20161014142609.png" title=""><br>选择高级系统设置，再选择环境变量<br><img src="/2016/10/14/如何配置Visual-Studio-Code-MinGW下的C-环境/2016-10-14_062813.682885_QQ20161014142747.png" alt="2016-10-14_062813.682885_QQ20161014142747.png" title=""><br>再Path变量中添加MinGW根目录下的bin文件夹的路径<br><img src="/2016/10/14/如何配置Visual-Studio-Code-MinGW下的C-环境/2016-10-14_063037.967301_QQ20161014142952.png" alt="2016-10-14_063037.967301_QQ20161014142952.png" title=""><br>打开CMD，输入<code>g++ -v</code>出现以下信息安装就成功咯<br><img src="/2016/10/14/如何配置Visual-Studio-Code-MinGW下的C-环境/2016-10-14_063248.965706_QQ20161014143235.png" alt="2016-10-14_063248.965706_QQ20161014143235.png" title=""></p>
<h2 id="配置VS-Code"><a href="#配置VS-Code" class="headerlink" title="配置VS Code"></a>配置VS Code</h2><p>在码配置流程前先贴出官方的不完全配置文档<br><a href="https://code.visualstudio.com/docs/languages/cpp" title="C/C++ for VS Code (Preview)" target="_blank" rel="external">C/C++ for VS Code (Preview)</a></p>
<ol>
<li>打开 VS Code。</li>
<li>选择侧边栏的扩展图标打开扩展栏。</li>
<li>搜索cpptools。</li>
<li>点击安装，安装完成后点击启用，重启后静待cpptools完成最后一步安装。</li>
<li>完成后打开一个文件夹。（空文件夹也行）</li>
<li>设置#include路径，按住<code>ctrl</code>+<code>shift</code>+<code>P</code>呼出命令窗口，输入<code>C/Cpp: Edit Configurations</code>回车，在变量name为Win32的字典里的includePath中的值，修改或添加为<code>&quot;D:/MinGW/include&quot;</code>。</li>
<li>按住<code>ctrl</code>+<code>shift</code>+<code>P</code>呼出命令窗口，输入<code>C/Cpp: Switch a Configuration</code>回车，选择<code>Win32</code>。</li>
<li>设置task,按住<code>ctrl</code>+<code>shift</code>+<code>P</code>呼出命令窗口，输入<code>Tasks: Configure Task Runner</code>回车，选择<code>Others</code>。把tasks.json修改为以下形式：<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">    <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">    <span class="attr">"command"</span>: <span class="string">"cmd"</span>,</div><div class="line">    <span class="attr">"isShellCommand"</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">"showOutput"</span>: <span class="string">"always"</span>,</div><div class="line">    <span class="attr">"args"</span>: [<span class="string">"/C"</span>],</div><div class="line">    <span class="attr">"tasks"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"taskName"</span>: <span class="string">"build"</span>,</div><div class="line">            <span class="attr">"suppressTaskName"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"echoCommand"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"args"</span>: [<span class="string">"g++"</span>, <span class="string">"-g"</span>, <span class="string">"$&#123;fileBasename&#125;"</span>, <span class="string">"-o"</span>, <span class="string">"$&#123;fileBasename&#125;.out"</span>],</div><div class="line">            <span class="attr">"showOutput"</span>: <span class="string">"silent"</span>,</div><div class="line">            <span class="attr">"isBuildCommand"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"problemMatcher"</span>: &#123;</div><div class="line">                <span class="attr">"owner"</span>: <span class="string">"cpp"</span>,</div><div class="line">                <span class="attr">"fileLocation"</span>: [<span class="string">"relative"</span>, <span class="string">"$&#123;workspaceRoot&#125;"</span>],</div><div class="line">                <span class="attr">"pattern"</span>: &#123;</div><div class="line">                    <span class="attr">"regexp"</span>: <span class="string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span>,</div><div class="line">                    <span class="attr">"file"</span>: <span class="number">1</span>,</div><div class="line">                    <span class="attr">"line"</span>: <span class="number">2</span>,</div><div class="line">                    <span class="attr">"column"</span>: <span class="number">3</span>,</div><div class="line">                    <span class="attr">"severity"</span>: <span class="number">4</span>,</div><div class="line">                    <span class="attr">"message"</span>: <span class="number">5</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"taskName"</span>: <span class="string">"clear"</span>,</div><div class="line">            <span class="attr">"suppressTaskName"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"args"</span>: [<span class="string">"del"</span>, <span class="string">"*.out"</span>],</div><div class="line">            <span class="attr">"showOutput"</span>: <span class="string">"never"</span></div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>写一个简单的C++代码，新建一个hello.cpp文件<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello world"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>按住<code>ctrl</code>+<code>P</code>,输入<code>task build</code>回车，就能编译成功了。若是编译失败，错误信息会出现在左下角。</p>
<blockquote>
<p>按住<code>ctrl</code>+<code>shift</code>+<code>b</code>也可以执行编译命令</p>
</blockquote>
<h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>按住<code>ctrl</code>+<code>~</code>弹出CMD窗口，输入<code>hello.cpp.out</code>即可运行编译成功的程序</p>
<blockquote>
<p>每次编译完成都会在目录下生成<code>同文件名</code>+<code>.out</code>的可执行程序，但想重新编译就要先运行<code>task clear</code>命令清除所有<code>.out</code>文件，再运行<code>task build</code>命令编译。</p>
</blockquote>
<h2 id="Debug-配置"><a href="#Debug-配置" class="headerlink" title="Debug 配置"></a>Debug 配置</h2><blockquote>
<p>暂无</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官方文档至今还没翻译成中文，足足琢磨了好几天明白了一些VS Code的功能。&lt;br&gt;现在给大家分享以下。&lt;/p&gt;
    
    </summary>
    
      <category term="Others" scheme="http://linw1995.github.io/categories/Others/"/>
    
    
      <category term="VSCode" scheme="http://linw1995.github.io/tags/VSCode/"/>
    
      <category term="C++" scheme="http://linw1995.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>搭梯子 - 简单教程</title>
    <link href="http://linw1995.github.io/2016/10/02/%E6%90%AD%E6%A2%AF%E5%AD%90-%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/"/>
    <id>http://linw1995.github.io/2016/10/02/搭梯子-简单教程/</id>
    <published>2016-10-02T01:36:00.000Z</published>
    <updated>2017-03-12T07:36:05.867Z</updated>
    
    <content type="html"><![CDATA[<p>比较简单的搭梯子方法有两个：</p>
<ol>
<li>Lantern 蓝灯</li>
<li>Shadowsocks 影梭</li>
</ol>
<a id="more"></a>
<h1 id="Lantern-蓝灯"><a href="#Lantern-蓝灯" class="headerlink" title="Lantern 蓝灯"></a>Lantern 蓝灯</h1><img src="/2016/10/02/搭梯子-简单教程/Lantern.png" alt="Lantern.png" title="">
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>蓝灯是个开源项目，在程序员交友平台GitHub上就能下载。<br>传送门：</p>
<ul>
<li><a href="https://github.com/getlantern/lantern" title="github" target="_blank" rel="external">github</a></li>
<li><a href="https://getlantern.org/" title="lantern" target="_blank" rel="external">lantern</a>
</li>
</ul>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>非常简单，只需要打开该软件就好。<br>虽说免费用户有800m的月流量，但网速不够支持看视频；<br>专业用户虽然一年很便宜，但不适合一些不经常用梯子的人。</p>
<h1 id="Shadowsocks-影梭"><a href="#Shadowsocks-影梭" class="headerlink" title="Shadowsocks 影梭"></a>Shadowsocks 影梭</h1><img src="/2016/10/02/搭梯子-简单教程/shadowsocks.png" alt="shadowsocks.png" title="">
<h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><ul>
<li><a href="https://github.com/shadowsocks/shadowsocks-windows/wiki/Shadowsocks-Windows-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" title="github-wiki" target="_blank" rel="external">github-wiki</a>
</li>
</ul>
<h2 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h2><ol>
<li>下载解压后即可打开使用</li>
<li>在任务栏中找到图标，右键打开菜单，选中启用系统代理 <img src="/2016/10/02/搭梯子-简单教程/2016-10-02_013628.603141_.png" alt="2016-10-02_013628.603141_.png" title=""></li>
<li>选用适合的服务器<br> 完成第二步后还没办法看墙外的风景，需要添加一些代理服务器。<br> 那么如何添加代理服务器呢？<br> 有两种方式：<ul>
<li>网上搜索一些免费的代理服务器，但这些免费的代理服务器不仅慢还有安全隐患。</li>
<li>去正规的服务器运营商<a href="https://billing.sscloud.org/aff.php?aff=187" title="sscloud" target="_blank" rel="external">sscloud</a>购买这类服务</li>
</ul>
</li>
<li>添加代理服务器<br> 双击任务栏中的图标，弹出以下窗口 <img src="/2016/10/02/搭梯子-简单教程/2016-10-02_014621.955391_.png" alt="2016-10-02_014621.955391_.png" title="">
 手动填入信息<br> 或者扫描服务器运营商提供的二维码 <img src="/2016/10/02/搭梯子-简单教程/2016-10-02_014836.541634_.png" alt="2016-10-02_014836.541634_.png" title=""></li>
<li>完成以上步骤，就可以在<strong><em>系统代理模式==》全局代理模式</em></strong>愉快地观赏墙外的世界</li>
</ol>
<h2 id="PCA模式"><a href="#PCA模式" class="headerlink" title="PCA模式"></a>PCA模式</h2><p>全局代理模式下，上墙内网站也会使用你的服务器流量。这就需要使用<strong><em>系统代理模式==》PAC模式</em></strong>来智能代理。<br><img src="/2016/10/02/搭梯子-简单教程/2016-10-02_020200.445407_.png" alt="2016-10-02_020200.445407_.png" title=""><br>系统代理模式中选择PAC代理，然后在PAC中选择从GFWList更新本地PAC。<br>这样就可以智能地搭梯子了。</p>
<h2 id="什么！你说你浏览器还是打不开墙外的世界"><a href="#什么！你说你浏览器还是打不开墙外的世界" class="headerlink" title="什么！你说你浏览器还是打不开墙外的世界"></a>什么！你说你浏览器还是打不开墙外的世界</h2><p>原因：</p>
<ol>
<li>在绝大数浏览器设置里都有一项选择代理方式地选项，只要更改为使用系统代理设置，就可以解决问题。</li>
<li>有些浏览器像FireFox、Chrome等，都需要安装代理插件才能使用系统代理。</li>
</ol>
<p>FireFox浏览器的配置方法</p>
<ul>
<li>首先安装代理组件FoxyProxy  <img src="/2016/10/02/搭梯子-简单教程/2016-10-02_021657.563661_.png" alt="2016-10-02_021657.563661_.png" title=""></li>
<li>新建或编辑已有的代理服务器选项  <img src="/2016/10/02/搭梯子-简单教程/2016-10-02_021902.822020_.png" alt="2016-10-02_021902.822020_.png" title=""></li>
<li>添加本地PAC文件的位置，点击测试看是否通过  <img src="/2016/10/02/搭梯子-简单教程/2016-10-02_022020.691221_.png" alt="2016-10-02_022020.691221_.png" title=""></li>
<li>通过后，修改下PAC文件  <img src="/2016/10/02/搭梯子-简单教程/2016-10-02_022300.004308_.png" alt="2016-10-02_022300.004308_.png" title=""></li>
<li>重新测试PAC文件是否通过</li>
<li>现在可以试着打开墙外的世界  <img src="/2016/10/02/搭梯子-简单教程/2016-10-02_022617.197844_QQ20161002102602.png" alt="2016-10-02_022617.197844_QQ20161002102602.png" title="">
  一个旋转的FoxyProxy图标，和一个正在打开的墙外世界。</li>
</ul>
<p>Chrome浏览器的配置方法</p>
<ul>
<li><p>首先安装<a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif" title="Proxy SwitchyOmega" target="_blank" rel="external">Proxy SwitchyOmega</a></p>
</li>
<li><p>进入<a href="chrome-extension://padekgcemlokbadohgkifijomclgjgif/options.html#/profile/proxy" title="SwitchyOmega 选项" target="_blank" rel="external">SwitchyOmega 选项</a>·情景模式中的proxy添加代理服务器</p>
<img src="/2016/10/02/搭梯子-简单教程/20170312_153143.png" alt="20170312_153143.png" title="">
</li>
<li><p>自定需代理的网站，点击浏览器右上角的小图标</p>
<img src="/2016/10/02/搭梯子-简单教程/20170312_153316.png" alt="20170312_153316.png" title="">
</li>
<li><p>也可以开启全局模式，把auto switch改成proxy即可</p>
</li>
</ul>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>可以在Shadowsocks服务器选项中选择不同的服务器来满足不同的需求，平时选择<strong><em>高可用</em></strong> 就行</li>
<li>最后，谨慎了解墙外的信息</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比较简单的搭梯子方法有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lantern 蓝灯&lt;/li&gt;
&lt;li&gt;Shadowsocks 影梭&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Others" scheme="http://linw1995.github.io/categories/Others/"/>
    
    
  </entry>
  
</feed>
