<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on linw1995</title>
    <link>https://linw1995.com/tags/C/</link>
    <description>Recent content in C on linw1995</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 23 Mar 2020 22:45:59 +0800</lastBuildDate>
    
	<atom:link href="https://linw1995.com/tags/C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何用 c 实现一个 Python Awaitable 函数</title>
      <link>https://linw1995.com/blog/%E5%A6%82%E4%BD%95%E7%94%A8-c-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-Python-Awaitable-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 23 Mar 2020 22:45:59 +0800</pubDate>
      
      <guid>https://linw1995.com/blog/%E5%A6%82%E4%BD%95%E7%94%A8-c-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-Python-Awaitable-%E5%87%BD%E6%95%B0/</guid>
      <description>这是一个取巧的方式，用 C 实现一个普通的 Python 函数，但返回一个 asyncio.Future 对象。 用副线程去执行，等到执行有结果后，再调用 asyncio.Future.set_result 方法去设置函数的结果。 先看一下直接用 Python 的话，是怎么实现这个的。
import asyncio import os import threading def call_system(cmd: str, fut: asyncio.Future): exit_code = os.system(cmd) loop = fut.get_loop() loop.call_soon_threadsafe(fut.set_result, exit_code) def system(cmd): fut = asyncio.Future() threading.Thread(target=call_system, args=(cmd, fut)).start() return fut 可以注意到副线程并没有直接执行 Future.set_result 。 因为从副线程回调的话，必须调用 loop.call_soon_threadsafe 去让 loop 去调度回调。 避免了执行 await spam.system(&#39;ls&#39;) 卡住。
现在需要做的事，就是把以上的代码翻译成 C 代码
#define PY_SSIZE_T_CLEAN #include &amp;lt;Python.h&amp;gt;#include &amp;lt;pthread.h&amp;gt;#include &amp;lt;stdio.h&amp;gt; struct call_system_ctx { char *command; PyObject *fut; }; static void *call_system(void *args) { printf(&amp;#34;=== pthread launch\n&amp;#34;); struct call_system_ctx *ctx = (struct call_system_ctx *)args; printf(&amp;#34;=== call system(%s)\n&amp;#34;, ctx-&amp;gt;command); int exit_code = system(ctx-&amp;gt;command); printf(&amp;#34;=== call system(%s) done\n&amp;#34;, ctx-&amp;gt;command); printf(&amp;#34;=== acquire GIL\n&amp;#34;); PyGILState_STATE gstate = PyGILState_Ensure(); PyObject *loop = PyObject_CallMethod(ctx-&amp;gt;fut, &amp;#34;get_loop&amp;#34;, NULL); PyObject *set_result = PyObject_GetAttrString(ctx-&amp;gt;fut, &amp;#34;set_result&amp;#34;); printf(&amp;#34;=== schedule callback\n&amp;#34;); PyObject *handler = PyObject_CallMethod(loop, &amp;#34;call_soon_threadsafe&amp;#34;, &amp;#34;(O,i)&amp;#34;, set_result, exit_code); Py_DECREF(handler); Py_DECREF(set_result); Py_DECREF(loop); Py_DECREF(ctx-&amp;gt;fut); printf(&amp;#34;=== release GIL\n&amp;#34;); PyGILState_Release(gstate); printf(&amp;#34;=== pthread exit\n&amp;#34;); free(ctx); pthread_exit(NULL); return 0; } static PyObject *spam_system(PyObject *self, PyObject *args) { char *command; if (!</description>
    </item>
    
    <item>
      <title>愉快地用 C 在 LeetCode 上刷题</title>
      <link>https://linw1995.com/blog/%E6%84%89%E5%BF%AB%E5%9C%B0%E7%94%A8-C-%E5%9C%A8-LeetCode-%E4%B8%8A%E5%88%B7%E9%A2%98/</link>
      <pubDate>Sun, 18 Aug 2019 23:59:59 +0000</pubDate>
      
      <guid>https://linw1995.com/blog/%E6%84%89%E5%BF%AB%E5%9C%B0%E7%94%A8-C-%E5%9C%A8-LeetCode-%E4%B8%8A%E5%88%B7%E9%A2%98/</guid>
      <description>当在用 C 在 LeetCode 上刷题，难免无法一次 AC。而在 LeetCode 上又无法调试，只能用 printf 大法，输出一些简单的日志，比如代码运行时的变量值等。当代码 AC 后，为了降低代码运行的时间消耗，则需要把 printf 的代码删除或者注释掉。这就有点麻烦了，因为使用 printf 的代码越多，需要删除或注释掉的地方就越多。
通过使用C的预处理指令 #define, #ifdef, #else, #endif 这几个简单的指令，再加上函数式的宏（Function-like Macros），就可以只注释一行代码，即可把日志输出去掉。听起来是不是很方便呢？接下来就用 LeetCode 的第 2 题，两数相加，来据一个简单的例子。
#define __WITH_LOG__  #ifdef __WITH_LOG__ #include &amp;lt;stdio.h&amp;gt;#define LOG(message, args...) \ fprintf(stdout, &amp;#34;| %s:%d | &amp;#34; message &amp;#34;\n&amp;#34;, __FUNCTION__, __LINE__, ##args) #else #define LOG(message, args...) #endif  struct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2) { struct ListNode dummy; struct ListNode *last = &amp;amp;dummy; int inc = 0; while (inc || l1 || l2) { last-&amp;gt;next = malloc(sizeof(struct ListNode)); last = last-&amp;gt;next; last-&amp;gt;val = inc; LOG(&amp;#34;last-&amp;gt;val=inc; val=%d&amp;#34;, inc); if (l1) { last-&amp;gt;val += l1-&amp;gt;val; LOG(&amp;#34;last-&amp;gt;val+=l1-&amp;gt;val; l1-&amp;gt;val=%d, last-&amp;gt;val=%d&amp;#34;, l1-&amp;gt;val, last-&amp;gt;val); } if (l2) { last-&amp;gt;val += l2-&amp;gt;val; LOG(&amp;#34;last-&amp;gt;val+=l2-&amp;gt;val; l2-&amp;gt;val=%d, last-&amp;gt;val=%d&amp;#34;, l2-&amp;gt;val, last-&amp;gt;val); } if (last-&amp;gt;val &amp;gt; 9) { last-&amp;gt;val -= 10; inc = 1; } else { inc = 0; } if (l1) l1 = l1-&amp;gt;next; if (l2) l2 = l2-&amp;gt;next; } last-&amp;gt;next = 0; return dummy.</description>
    </item>
    
  </channel>
</rss>