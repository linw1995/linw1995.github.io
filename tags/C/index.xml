<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on linw1995</title>
    <link>https://linw1995.com/tags/C/</link>
    <description>Recent content in C on linw1995</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 18 Aug 2019 23:59:59 +0000</lastBuildDate>
    
	<atom:link href="https://linw1995.com/tags/C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>愉快地用 C 在 LeetCode 上刷题</title>
      <link>https://linw1995.com/blog/%E6%84%89%E5%BF%AB%E5%9C%B0%E7%94%A8-C-%E5%9C%A8-LeetCode-%E4%B8%8A%E5%88%B7%E9%A2%98/</link>
      <pubDate>Sun, 18 Aug 2019 23:59:59 +0000</pubDate>
      
      <guid>https://linw1995.com/blog/%E6%84%89%E5%BF%AB%E5%9C%B0%E7%94%A8-C-%E5%9C%A8-LeetCode-%E4%B8%8A%E5%88%B7%E9%A2%98/</guid>
      <description>当在用 C 在 LeetCode 上刷题，难免无法一次 AC。而在 LeetCode 上又无法调试，只能用 printf 大法，输出一些简单的日志，比如代码运行时的变量值等。当代码 AC 后，为了降低代码运行的时间消耗，则需要把 printf 的代码删除或者注释掉。这就有点麻烦了，因为使用 printf 的代码越多，需要删除或注释掉的地方就越多。
通过使用C的预处理指令 #define, #ifdef, #else, #endif 这几个简单的指令，再加上函数式的宏（Function-like Macros），就可以只注释一行代码，即可把日志输出去掉。听起来是不是很方便呢？接下来就用 LeetCode 的第 2 题，两数相加，来据一个简单的例子。
#define __WITH_LOG__ #ifdef __WITH_LOG__#include &amp;lt;stdio.h&amp;gt;#define LOG(message, args...) \fprintf(stdout, &amp;#34;| %s:%d | &amp;#34; message &amp;#34;\n&amp;#34;, __FUNCTION__, __LINE__, ##args)#else#define LOG(message, args...)#endif struct ListNode *addTwoNumbers(struct ListNode *l1, struct ListNode *l2) { struct ListNode dummy; struct ListNode *last = &amp;amp;dummy; int inc = 0; while (inc || l1 || l2) { last-&amp;gt;next = malloc(sizeof(struct ListNode)); last = last-&amp;gt;next; last-&amp;gt;val = inc; LOG(&amp;#34;last-&amp;gt;val=inc; val=%d&amp;#34;, inc); if (l1) { last-&amp;gt;val += l1-&amp;gt;val; LOG(&amp;#34;last-&amp;gt;val+=l1-&amp;gt;val; l1-&amp;gt;val=%d, last-&amp;gt;val=%d&amp;#34;, l1-&amp;gt;val, last-&amp;gt;val); } if (l2) { last-&amp;gt;val += l2-&amp;gt;val; LOG(&amp;#34;last-&amp;gt;val+=l2-&amp;gt;val; l2-&amp;gt;val=%d, last-&amp;gt;val=%d&amp;#34;, l2-&amp;gt;val, last-&amp;gt;val); } if (last-&amp;gt;val &amp;gt; 9) { last-&amp;gt;val -= 10; inc = 1; } else { inc = 0; } if (l1) l1 = l1-&amp;gt;next; if (l2) l2 = l2-&amp;gt;next; } last-&amp;gt;next = 0; return dummy.</description>
    </item>
    
  </channel>
</rss>